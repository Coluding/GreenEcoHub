import {
  require_isDate,
  require_sortBy,
  require_uniq,
  require_uniqBy
} from "./chunk-QPHCQZH4.js";
import "./chunk-QOBUBQC5.js";
import {
  At,
  Bi,
  C,
  Ei,
  Fi,
  Ji,
  Mi,
  Mt,
  P,
  Qi,
  Rt,
  Si,
  Vt,
  Xt,
  area_default,
  b,
  band,
  cubehelixLong,
  et,
  format,
  it,
  k,
  kt,
  line_default,
  linear,
  log,
  ordinal,
  point,
  qt,
  require_isPlainObject,
  require_last,
  rgbBasis,
  rn,
  symlog,
  ti,
  time,
  timeFormat,
  timeParse,
  tt,
  ui,
  utcParse,
  utcTime,
  w,
  yi
} from "./chunk-SSDMV6MA.js";
import {
  require_get
} from "./chunk-V5E7FLBO.js";
import {
  require_prop_types
} from "./chunk-62MWPLVP.js";
import {
  require_react_dom
} from "./chunk-ZW7WJ6XU.js";
import {
  require_jsx_runtime
} from "./chunk-DT77FM6J.js";
import {
  require_react
} from "./chunk-4D5CYJYK.js";
import {
  __toESM
} from "./chunk-CEQRFMJQ.js";

// ../node_modules/@nivo/line/dist/nivo-line.es.js
var import_react8 = __toESM(require_react());

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/colors.js
function colors_default(specifier) {
  var n5 = specifier.length / 6 | 0, colors2 = new Array(n5), i4 = 0;
  while (i4 < n5)
    colors2[i4] = "#" + specifier.slice(i4 * 6, ++i4 * 6);
  return colors2;
}

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/categorical/category10.js
var category10_default = colors_default("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/categorical/Accent.js
var Accent_default = colors_default("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/categorical/Dark2.js
var Dark2_default = colors_default("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/categorical/Paired.js
var Paired_default = colors_default("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/categorical/Pastel1.js
var Pastel1_default = colors_default("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/categorical/Pastel2.js
var Pastel2_default = colors_default("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/categorical/Set1.js
var Set1_default = colors_default("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/categorical/Set2.js
var Set2_default = colors_default("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/categorical/Set3.js
var Set3_default = colors_default("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/categorical/Tableau10.js
var Tableau10_default = colors_default("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/ramp.js
var ramp_default = (scheme28) => rgbBasis(scheme28[scheme28.length - 1]);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/diverging/BrBG.js
var scheme = new Array(3).concat(
  "d8b365f5f5f55ab4ac",
  "a6611adfc27d80cdc1018571",
  "a6611adfc27df5f5f580cdc1018571",
  "8c510ad8b365f6e8c3c7eae55ab4ac01665e",
  "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e",
  "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e",
  "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e",
  "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30",
  "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30"
).map(colors_default);
var BrBG_default = ramp_default(scheme);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/diverging/PRGn.js
var scheme2 = new Array(3).concat(
  "af8dc3f7f7f77fbf7b",
  "7b3294c2a5cfa6dba0008837",
  "7b3294c2a5cff7f7f7a6dba0008837",
  "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837",
  "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837",
  "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837",
  "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837",
  "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b",
  "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b"
).map(colors_default);
var PRGn_default = ramp_default(scheme2);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/diverging/PiYG.js
var scheme3 = new Array(3).concat(
  "e9a3c9f7f7f7a1d76a",
  "d01c8bf1b6dab8e1864dac26",
  "d01c8bf1b6daf7f7f7b8e1864dac26",
  "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221",
  "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221",
  "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221",
  "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221",
  "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419",
  "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419"
).map(colors_default);
var PiYG_default = ramp_default(scheme3);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/diverging/PuOr.js
var scheme4 = new Array(3).concat(
  "998ec3f7f7f7f1a340",
  "5e3c99b2abd2fdb863e66101",
  "5e3c99b2abd2f7f7f7fdb863e66101",
  "542788998ec3d8daebfee0b6f1a340b35806",
  "542788998ec3d8daebf7f7f7fee0b6f1a340b35806",
  "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806",
  "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806",
  "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08",
  "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08"
).map(colors_default);
var PuOr_default = ramp_default(scheme4);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/diverging/RdBu.js
var scheme5 = new Array(3).concat(
  "ef8a62f7f7f767a9cf",
  "ca0020f4a58292c5de0571b0",
  "ca0020f4a582f7f7f792c5de0571b0",
  "b2182bef8a62fddbc7d1e5f067a9cf2166ac",
  "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac",
  "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac",
  "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac",
  "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061",
  "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061"
).map(colors_default);
var RdBu_default = ramp_default(scheme5);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/diverging/RdGy.js
var scheme6 = new Array(3).concat(
  "ef8a62ffffff999999",
  "ca0020f4a582bababa404040",
  "ca0020f4a582ffffffbababa404040",
  "b2182bef8a62fddbc7e0e0e09999994d4d4d",
  "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d",
  "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d",
  "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d",
  "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a",
  "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a"
).map(colors_default);
var RdGy_default = ramp_default(scheme6);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js
var scheme7 = new Array(3).concat(
  "fc8d59ffffbf91bfdb",
  "d7191cfdae61abd9e92c7bb6",
  "d7191cfdae61ffffbfabd9e92c7bb6",
  "d73027fc8d59fee090e0f3f891bfdb4575b4",
  "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4",
  "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4",
  "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4",
  "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695",
  "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695"
).map(colors_default);
var RdYlBu_default = ramp_default(scheme7);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js
var scheme8 = new Array(3).concat(
  "fc8d59ffffbf91cf60",
  "d7191cfdae61a6d96a1a9641",
  "d7191cfdae61ffffbfa6d96a1a9641",
  "d73027fc8d59fee08bd9ef8b91cf601a9850",
  "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850",
  "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850",
  "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850",
  "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837",
  "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837"
).map(colors_default);
var RdYlGn_default = ramp_default(scheme8);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/diverging/Spectral.js
var scheme9 = new Array(3).concat(
  "fc8d59ffffbf99d594",
  "d7191cfdae61abdda42b83ba",
  "d7191cfdae61ffffbfabdda42b83ba",
  "d53e4ffc8d59fee08be6f59899d5943288bd",
  "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd",
  "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd",
  "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd",
  "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2",
  "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2"
).map(colors_default);
var Spectral_default = ramp_default(scheme9);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js
var scheme10 = new Array(3).concat(
  "e5f5f999d8c92ca25f",
  "edf8fbb2e2e266c2a4238b45",
  "edf8fbb2e2e266c2a42ca25f006d2c",
  "edf8fbccece699d8c966c2a42ca25f006d2c",
  "edf8fbccece699d8c966c2a441ae76238b45005824",
  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824",
  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b"
).map(colors_default);
var BuGn_default = ramp_default(scheme10);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js
var scheme11 = new Array(3).concat(
  "e0ecf49ebcda8856a7",
  "edf8fbb3cde38c96c688419d",
  "edf8fbb3cde38c96c68856a7810f7c",
  "edf8fbbfd3e69ebcda8c96c68856a7810f7c",
  "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b",
  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b",
  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b"
).map(colors_default);
var BuPu_default = ramp_default(scheme11);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js
var scheme12 = new Array(3).concat(
  "e0f3dba8ddb543a2ca",
  "f0f9e8bae4bc7bccc42b8cbe",
  "f0f9e8bae4bc7bccc443a2ca0868ac",
  "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac",
  "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e",
  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e",
  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081"
).map(colors_default);
var GnBu_default = ramp_default(scheme12);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js
var scheme13 = new Array(3).concat(
  "fee8c8fdbb84e34a33",
  "fef0d9fdcc8afc8d59d7301f",
  "fef0d9fdcc8afc8d59e34a33b30000",
  "fef0d9fdd49efdbb84fc8d59e34a33b30000",
  "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000",
  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000",
  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000"
).map(colors_default);
var OrRd_default = ramp_default(scheme13);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js
var scheme14 = new Array(3).concat(
  "ece2f0a6bddb1c9099",
  "f6eff7bdc9e167a9cf02818a",
  "f6eff7bdc9e167a9cf1c9099016c59",
  "f6eff7d0d1e6a6bddb67a9cf1c9099016c59",
  "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450",
  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450",
  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636"
).map(colors_default);
var PuBuGn_default = ramp_default(scheme14);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js
var scheme15 = new Array(3).concat(
  "ece7f2a6bddb2b8cbe",
  "f1eef6bdc9e174a9cf0570b0",
  "f1eef6bdc9e174a9cf2b8cbe045a8d",
  "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d",
  "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b",
  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b",
  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858"
).map(colors_default);
var PuBu_default = ramp_default(scheme15);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js
var scheme16 = new Array(3).concat(
  "e7e1efc994c7dd1c77",
  "f1eef6d7b5d8df65b0ce1256",
  "f1eef6d7b5d8df65b0dd1c77980043",
  "f1eef6d4b9dac994c7df65b0dd1c77980043",
  "f1eef6d4b9dac994c7df65b0e7298ace125691003f",
  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f",
  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f"
).map(colors_default);
var PuRd_default = ramp_default(scheme16);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js
var scheme17 = new Array(3).concat(
  "fde0ddfa9fb5c51b8a",
  "feebe2fbb4b9f768a1ae017e",
  "feebe2fbb4b9f768a1c51b8a7a0177",
  "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177",
  "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177",
  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177",
  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a"
).map(colors_default);
var RdPu_default = ramp_default(scheme17);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js
var scheme18 = new Array(3).concat(
  "edf8b17fcdbb2c7fb8",
  "ffffcca1dab441b6c4225ea8",
  "ffffcca1dab441b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58"
).map(colors_default);
var YlGnBu_default = ramp_default(scheme18);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js
var scheme19 = new Array(3).concat(
  "f7fcb9addd8e31a354",
  "ffffccc2e69978c679238443",
  "ffffccc2e69978c67931a354006837",
  "ffffccd9f0a3addd8e78c67931a354006837",
  "ffffccd9f0a3addd8e78c67941ab5d238443005a32",
  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32",
  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529"
).map(colors_default);
var YlGn_default = ramp_default(scheme19);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js
var scheme20 = new Array(3).concat(
  "fff7bcfec44fd95f0e",
  "ffffd4fed98efe9929cc4c02",
  "ffffd4fed98efe9929d95f0e993404",
  "ffffd4fee391fec44ffe9929d95f0e993404",
  "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04",
  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04",
  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506"
).map(colors_default);
var YlOrBr_default = ramp_default(scheme20);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js
var scheme21 = new Array(3).concat(
  "ffeda0feb24cf03b20",
  "ffffb2fecc5cfd8d3ce31a1c",
  "ffffb2fecc5cfd8d3cf03b20bd0026",
  "ffffb2fed976feb24cfd8d3cf03b20bd0026",
  "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026",
  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026",
  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026"
).map(colors_default);
var YlOrRd_default = ramp_default(scheme21);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/sequential-single/Blues.js
var scheme22 = new Array(3).concat(
  "deebf79ecae13182bd",
  "eff3ffbdd7e76baed62171b5",
  "eff3ffbdd7e76baed63182bd08519c",
  "eff3ffc6dbef9ecae16baed63182bd08519c",
  "eff3ffc6dbef9ecae16baed64292c62171b5084594",
  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594",
  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b"
).map(colors_default);
var Blues_default = ramp_default(scheme22);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/sequential-single/Greens.js
var scheme23 = new Array(3).concat(
  "e5f5e0a1d99b31a354",
  "edf8e9bae4b374c476238b45",
  "edf8e9bae4b374c47631a354006d2c",
  "edf8e9c7e9c0a1d99b74c47631a354006d2c",
  "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32",
  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32",
  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b"
).map(colors_default);
var Greens_default = ramp_default(scheme23);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/sequential-single/Greys.js
var scheme24 = new Array(3).concat(
  "f0f0f0bdbdbd636363",
  "f7f7f7cccccc969696525252",
  "f7f7f7cccccc969696636363252525",
  "f7f7f7d9d9d9bdbdbd969696636363252525",
  "f7f7f7d9d9d9bdbdbd969696737373525252252525",
  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525",
  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000"
).map(colors_default);
var Greys_default = ramp_default(scheme24);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/sequential-single/Purples.js
var scheme25 = new Array(3).concat(
  "efedf5bcbddc756bb1",
  "f2f0f7cbc9e29e9ac86a51a3",
  "f2f0f7cbc9e29e9ac8756bb154278f",
  "f2f0f7dadaebbcbddc9e9ac8756bb154278f",
  "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486",
  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486",
  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d"
).map(colors_default);
var Purples_default = ramp_default(scheme25);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/sequential-single/Reds.js
var scheme26 = new Array(3).concat(
  "fee0d2fc9272de2d26",
  "fee5d9fcae91fb6a4acb181d",
  "fee5d9fcae91fb6a4ade2d26a50f15",
  "fee5d9fcbba1fc9272fb6a4ade2d26a50f15",
  "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d",
  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d",
  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d"
).map(colors_default);
var Reds_default = ramp_default(scheme26);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js
var scheme27 = new Array(3).concat(
  "fee6cefdae6be6550d",
  "feeddefdbe85fd8d3cd94701",
  "feeddefdbe85fd8d3ce6550da63603",
  "feeddefdd0a2fdae6bfd8d3ce6550da63603",
  "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04",
  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04",
  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704"
).map(colors_default);
var Oranges_default = ramp_default(scheme27);

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js
function cividis_default(t8) {
  t8 = Math.max(0, Math.min(1, t8));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(-4.54 - t8 * (35.34 - t8 * (2381.73 - t8 * (6402.7 - t8 * (7024.72 - t8 * 2710.57))))))) + ", " + Math.max(0, Math.min(255, Math.round(32.49 + t8 * (170.73 + t8 * (52.82 - t8 * (131.46 - t8 * (176.58 - t8 * 67.37))))))) + ", " + Math.max(0, Math.min(255, Math.round(81.24 + t8 * (442.36 - t8 * (2482.43 - t8 * (6167.24 - t8 * (6614.94 - t8 * 2475.67))))))) + ")";
}

// ../node_modules/@nivo/line/node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}

// ../node_modules/@nivo/line/node_modules/d3-color/src/color.js
function Color() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$");
var reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$");
var reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$");
var reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$");
var reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$");
var reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default(Color, color, {
  copy: function(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable: function() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format2) {
  var m2, l2;
  format2 = (format2 + "").trim().toLowerCase();
  return (m2 = reHex.exec(format2)) ? (l2 = m2[1].length, m2 = parseInt(m2[1], 16), l2 === 6 ? rgbn(m2) : l2 === 3 ? new Rgb(m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, (m2 & 15) << 4 | m2 & 15, 1) : l2 === 8 ? rgba(m2 >> 24 & 255, m2 >> 16 & 255, m2 >> 8 & 255, (m2 & 255) / 255) : l2 === 4 ? rgba(m2 >> 12 & 15 | m2 >> 8 & 240, m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, ((m2 & 15) << 4 | m2 & 15) / 255) : null) : (m2 = reRgbInteger.exec(format2)) ? new Rgb(m2[1], m2[2], m2[3], 1) : (m2 = reRgbPercent.exec(format2)) ? new Rgb(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, 1) : (m2 = reRgbaInteger.exec(format2)) ? rgba(m2[1], m2[2], m2[3], m2[4]) : (m2 = reRgbaPercent.exec(format2)) ? rgba(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, m2[4]) : (m2 = reHslPercent.exec(format2)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, 1) : (m2 = reHslaPercent.exec(format2)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, m2[4]) : named.hasOwnProperty(format2) ? rgbn(named[format2]) : format2 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n5) {
  return new Rgb(n5 >> 16 & 255, n5 >> 8 & 255, n5 & 255, 1);
}
function rgba(r4, g4, b5, a4) {
  if (a4 <= 0)
    r4 = g4 = b5 = NaN;
  return new Rgb(r4, g4, b5, a4);
}
function rgbConvert(o3) {
  if (!(o3 instanceof Color))
    o3 = color(o3);
  if (!o3)
    return new Rgb();
  o3 = o3.rgb();
  return new Rgb(o3.r, o3.g, o3.b, o3.opacity);
}
function rgb(r4, g4, b5, opacity) {
  return arguments.length === 1 ? rgbConvert(r4) : new Rgb(r4, g4, b5, opacity == null ? 1 : opacity);
}
function Rgb(r4, g4, b5, opacity) {
  this.r = +r4;
  this.g = +g4;
  this.b = +b5;
  this.opacity = +opacity;
}
define_default(Rgb, rgb, extend(Color, {
  brighter: function(k5) {
    k5 = k5 == null ? brighter : Math.pow(brighter, k5);
    return new Rgb(this.r * k5, this.g * k5, this.b * k5, this.opacity);
  },
  darker: function(k5) {
    k5 = k5 == null ? darker : Math.pow(darker, k5);
    return new Rgb(this.r * k5, this.g * k5, this.b * k5, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}
function rgb_formatRgb() {
  var a4 = this.opacity;
  a4 = isNaN(a4) ? 1 : Math.max(0, Math.min(1, a4));
  return (a4 === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a4 === 1 ? ")" : ", " + a4 + ")");
}
function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h3, s3, l2, a4) {
  if (a4 <= 0)
    h3 = s3 = l2 = NaN;
  else if (l2 <= 0 || l2 >= 1)
    h3 = s3 = NaN;
  else if (s3 <= 0)
    h3 = NaN;
  return new Hsl(h3, s3, l2, a4);
}
function hslConvert(o3) {
  if (o3 instanceof Hsl)
    return new Hsl(o3.h, o3.s, o3.l, o3.opacity);
  if (!(o3 instanceof Color))
    o3 = color(o3);
  if (!o3)
    return new Hsl();
  if (o3 instanceof Hsl)
    return o3;
  o3 = o3.rgb();
  var r4 = o3.r / 255, g4 = o3.g / 255, b5 = o3.b / 255, min = Math.min(r4, g4, b5), max = Math.max(r4, g4, b5), h3 = NaN, s3 = max - min, l2 = (max + min) / 2;
  if (s3) {
    if (r4 === max)
      h3 = (g4 - b5) / s3 + (g4 < b5) * 6;
    else if (g4 === max)
      h3 = (b5 - r4) / s3 + 2;
    else
      h3 = (r4 - g4) / s3 + 4;
    s3 /= l2 < 0.5 ? max + min : 2 - max - min;
    h3 *= 60;
  } else {
    s3 = l2 > 0 && l2 < 1 ? 0 : h3;
  }
  return new Hsl(h3, s3, l2, o3.opacity);
}
function hsl(h3, s3, l2, opacity) {
  return arguments.length === 1 ? hslConvert(h3) : new Hsl(h3, s3, l2, opacity == null ? 1 : opacity);
}
function Hsl(h3, s3, l2, opacity) {
  this.h = +h3;
  this.s = +s3;
  this.l = +l2;
  this.opacity = +opacity;
}
define_default(Hsl, hsl, extend(Color, {
  brighter: function(k5) {
    k5 = k5 == null ? brighter : Math.pow(brighter, k5);
    return new Hsl(this.h, this.s, this.l * k5, this.opacity);
  },
  darker: function(k5) {
    k5 = k5 == null ? darker : Math.pow(darker, k5);
    return new Hsl(this.h, this.s, this.l * k5, this.opacity);
  },
  rgb: function() {
    var h3 = this.h % 360 + (this.h < 0) * 360, s3 = isNaN(h3) || isNaN(this.s) ? 0 : this.s, l2 = this.l, m2 = l2 + (l2 < 0.5 ? l2 : 1 - l2) * s3, m1 = 2 * l2 - m2;
    return new Rgb(
      hsl2rgb(h3 >= 240 ? h3 - 240 : h3 + 120, m1, m2),
      hsl2rgb(h3, m1, m2),
      hsl2rgb(h3 < 120 ? h3 + 240 : h3 - 120, m1, m2),
      this.opacity
    );
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl: function() {
    var a4 = this.opacity;
    a4 = isNaN(a4) ? 1 : Math.max(0, Math.min(1, a4));
    return (a4 === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a4 === 1 ? ")" : ", " + a4 + ")");
  }
}));
function hsl2rgb(h3, m1, m2) {
  return (h3 < 60 ? m1 + (m2 - m1) * h3 / 60 : h3 < 180 ? m2 : h3 < 240 ? m1 + (m2 - m1) * (240 - h3) / 60 : m1) * 255;
}

// ../node_modules/@nivo/line/node_modules/d3-color/src/math.js
var radians = Math.PI / 180;
var degrees = 180 / Math.PI;

// ../node_modules/@nivo/line/node_modules/d3-color/src/lab.js
var K = 18;
var Xn = 0.96422;
var Yn = 1;
var Zn = 0.82521;
var t0 = 4 / 29;
var t1 = 6 / 29;
var t2 = 3 * t1 * t1;
var t3 = t1 * t1 * t1;
function labConvert(o3) {
  if (o3 instanceof Lab)
    return new Lab(o3.l, o3.a, o3.b, o3.opacity);
  if (o3 instanceof Hcl)
    return hcl2lab(o3);
  if (!(o3 instanceof Rgb))
    o3 = rgbConvert(o3);
  var r4 = rgb2lrgb(o3.r), g4 = rgb2lrgb(o3.g), b5 = rgb2lrgb(o3.b), y2 = xyz2lab((0.2225045 * r4 + 0.7168786 * g4 + 0.0606169 * b5) / Yn), x3, z2;
  if (r4 === g4 && g4 === b5)
    x3 = z2 = y2;
  else {
    x3 = xyz2lab((0.4360747 * r4 + 0.3850649 * g4 + 0.1430804 * b5) / Xn);
    z2 = xyz2lab((0.0139322 * r4 + 0.0971045 * g4 + 0.7141733 * b5) / Zn);
  }
  return new Lab(116 * y2 - 16, 500 * (x3 - y2), 200 * (y2 - z2), o3.opacity);
}
function lab(l2, a4, b5, opacity) {
  return arguments.length === 1 ? labConvert(l2) : new Lab(l2, a4, b5, opacity == null ? 1 : opacity);
}
function Lab(l2, a4, b5, opacity) {
  this.l = +l2;
  this.a = +a4;
  this.b = +b5;
  this.opacity = +opacity;
}
define_default(Lab, lab, extend(Color, {
  brighter: function(k5) {
    return new Lab(this.l + K * (k5 == null ? 1 : k5), this.a, this.b, this.opacity);
  },
  darker: function(k5) {
    return new Lab(this.l - K * (k5 == null ? 1 : k5), this.a, this.b, this.opacity);
  },
  rgb: function() {
    var y2 = (this.l + 16) / 116, x3 = isNaN(this.a) ? y2 : y2 + this.a / 500, z2 = isNaN(this.b) ? y2 : y2 - this.b / 200;
    x3 = Xn * lab2xyz(x3);
    y2 = Yn * lab2xyz(y2);
    z2 = Zn * lab2xyz(z2);
    return new Rgb(
      lrgb2rgb(3.1338561 * x3 - 1.6168667 * y2 - 0.4906146 * z2),
      lrgb2rgb(-0.9787684 * x3 + 1.9161415 * y2 + 0.033454 * z2),
      lrgb2rgb(0.0719453 * x3 - 0.2289914 * y2 + 1.4052427 * z2),
      this.opacity
    );
  }
}));
function xyz2lab(t8) {
  return t8 > t3 ? Math.pow(t8, 1 / 3) : t8 / t2 + t0;
}
function lab2xyz(t8) {
  return t8 > t1 ? t8 * t8 * t8 : t2 * (t8 - t0);
}
function lrgb2rgb(x3) {
  return 255 * (x3 <= 31308e-7 ? 12.92 * x3 : 1.055 * Math.pow(x3, 1 / 2.4) - 0.055);
}
function rgb2lrgb(x3) {
  return (x3 /= 255) <= 0.04045 ? x3 / 12.92 : Math.pow((x3 + 0.055) / 1.055, 2.4);
}
function hclConvert(o3) {
  if (o3 instanceof Hcl)
    return new Hcl(o3.h, o3.c, o3.l, o3.opacity);
  if (!(o3 instanceof Lab))
    o3 = labConvert(o3);
  if (o3.a === 0 && o3.b === 0)
    return new Hcl(NaN, 0 < o3.l && o3.l < 100 ? 0 : NaN, o3.l, o3.opacity);
  var h3 = Math.atan2(o3.b, o3.a) * degrees;
  return new Hcl(h3 < 0 ? h3 + 360 : h3, Math.sqrt(o3.a * o3.a + o3.b * o3.b), o3.l, o3.opacity);
}
function hcl(h3, c4, l2, opacity) {
  return arguments.length === 1 ? hclConvert(h3) : new Hcl(h3, c4, l2, opacity == null ? 1 : opacity);
}
function Hcl(h3, c4, l2, opacity) {
  this.h = +h3;
  this.c = +c4;
  this.l = +l2;
  this.opacity = +opacity;
}
function hcl2lab(o3) {
  if (isNaN(o3.h))
    return new Lab(o3.l, 0, 0, o3.opacity);
  var h3 = o3.h * radians;
  return new Lab(o3.l, Math.cos(h3) * o3.c, Math.sin(h3) * o3.c, o3.opacity);
}
define_default(Hcl, hcl, extend(Color, {
  brighter: function(k5) {
    return new Hcl(this.h, this.c, this.l + K * (k5 == null ? 1 : k5), this.opacity);
  },
  darker: function(k5) {
    return new Hcl(this.h, this.c, this.l - K * (k5 == null ? 1 : k5), this.opacity);
  },
  rgb: function() {
    return hcl2lab(this).rgb();
  }
}));

// ../node_modules/@nivo/line/node_modules/d3-color/src/cubehelix.js
var A = -0.14861;
var B = 1.78277;
var C2 = -0.29227;
var D = -0.90649;
var E = 1.97294;
var ED = E * D;
var EB = E * B;
var BC_DA = B * C2 - D * A;
function cubehelixConvert(o3) {
  if (o3 instanceof Cubehelix)
    return new Cubehelix(o3.h, o3.s, o3.l, o3.opacity);
  if (!(o3 instanceof Rgb))
    o3 = rgbConvert(o3);
  var r4 = o3.r / 255, g4 = o3.g / 255, b5 = o3.b / 255, l2 = (BC_DA * b5 + ED * r4 - EB * g4) / (BC_DA + ED - EB), bl = b5 - l2, k5 = (E * (g4 - l2) - C2 * bl) / D, s3 = Math.sqrt(k5 * k5 + bl * bl) / (E * l2 * (1 - l2)), h3 = s3 ? Math.atan2(k5, bl) * degrees - 120 : NaN;
  return new Cubehelix(h3 < 0 ? h3 + 360 : h3, s3, l2, o3.opacity);
}
function cubehelix(h3, s3, l2, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h3) : new Cubehelix(h3, s3, l2, opacity == null ? 1 : opacity);
}
function Cubehelix(h3, s3, l2, opacity) {
  this.h = +h3;
  this.s = +s3;
  this.l = +l2;
  this.opacity = +opacity;
}
define_default(Cubehelix, cubehelix, extend(Color, {
  brighter: function(k5) {
    k5 = k5 == null ? brighter : Math.pow(brighter, k5);
    return new Cubehelix(this.h, this.s, this.l * k5, this.opacity);
  },
  darker: function(k5) {
    k5 = k5 == null ? darker : Math.pow(darker, k5);
    return new Cubehelix(this.h, this.s, this.l * k5, this.opacity);
  },
  rgb: function() {
    var h3 = isNaN(this.h) ? 0 : (this.h + 120) * radians, l2 = +this.l, a4 = isNaN(this.s) ? 0 : this.s * l2 * (1 - l2), cosh = Math.cos(h3), sinh = Math.sin(h3);
    return new Rgb(
      255 * (l2 + a4 * (A * cosh + B * sinh)),
      255 * (l2 + a4 * (C2 * cosh + D * sinh)),
      255 * (l2 + a4 * (E * cosh)),
      this.opacity
    );
  }
}));

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js
var cubehelix_default = cubehelixLong(cubehelix(300, 0.5, 0), cubehelix(-240, 0.5, 1));

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js
var warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
var cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
var c = cubehelix();
function rainbow_default(t8) {
  if (t8 < 0 || t8 > 1)
    t8 -= Math.floor(t8);
  var ts2 = Math.abs(t8 - 0.5);
  c.h = 360 * t8 - 100;
  c.s = 1.5 - 1.5 * ts2;
  c.l = 0.8 - 0.9 * ts2;
  return c + "";
}

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js
var c2 = rgb();
var pi_1_3 = Math.PI / 3;
var pi_2_3 = Math.PI * 2 / 3;
function sinebow_default(t8) {
  var x3;
  t8 = (0.5 - t8) * Math.PI;
  c2.r = 255 * (x3 = Math.sin(t8)) * x3;
  c2.g = 255 * (x3 = Math.sin(t8 + pi_1_3)) * x3;
  c2.b = 255 * (x3 = Math.sin(t8 + pi_2_3)) * x3;
  return c2 + "";
}

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js
function turbo_default(t8) {
  t8 = Math.max(0, Math.min(1, t8));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(34.61 + t8 * (1172.33 - t8 * (10793.56 - t8 * (33300.12 - t8 * (38394.49 - t8 * 14825.05))))))) + ", " + Math.max(0, Math.min(255, Math.round(23.31 + t8 * (557.33 + t8 * (1225.33 - t8 * (3574.96 - t8 * (1073.77 + t8 * 707.56))))))) + ", " + Math.max(0, Math.min(255, Math.round(27.2 + t8 * (3211.1 - t8 * (15327.97 - t8 * (27814 - t8 * (22569.18 - t8 * 6838.66))))))) + ")";
}

// ../node_modules/@nivo/line/node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js
function ramp(range) {
  var n5 = range.length;
  return function(t8) {
    return range[Math.max(0, Math.min(n5 - 1, Math.floor(t8 * n5)))];
  };
}
var viridis_default = ramp(colors_default("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
var magma = ramp(colors_default("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
var inferno = ramp(colors_default("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
var plasma = ramp(colors_default("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

// ../node_modules/@nivo/line/node_modules/@nivo/colors/dist/nivo-colors.es.js
var import_isPlainObject = __toESM(require_isPlainObject());
var import_get = __toESM(require_get());
var import_react = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
function qe() {
  return qe = Object.assign || function(e6) {
    for (var r4 = 1; r4 < arguments.length; r4++) {
      var n5 = arguments[r4];
      for (var t8 in n5)
        Object.prototype.hasOwnProperty.call(n5, t8) && (e6[t8] = n5[t8]);
    }
    return e6;
  }, qe.apply(this, arguments);
}
function Re(e6, r4) {
  (null == r4 || r4 > e6.length) && (r4 = e6.length);
  for (var n5 = 0, t8 = new Array(r4); n5 < r4; n5++)
    t8[n5] = e6[n5];
  return t8;
}
function Se(e6, r4) {
  var n5 = "undefined" != typeof Symbol && e6[Symbol.iterator] || e6["@@iterator"];
  if (n5)
    return (n5 = n5.call(e6)).next.bind(n5);
  if (Array.isArray(e6) || (n5 = function(e7, r5) {
    if (e7) {
      if ("string" == typeof e7)
        return Re(e7, r5);
      var n6 = Object.prototype.toString.call(e7).slice(8, -1);
      return "Object" === n6 && e7.constructor && (n6 = e7.constructor.name), "Map" === n6 || "Set" === n6 ? Array.from(e7) : "Arguments" === n6 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n6) ? Re(e7, r5) : void 0;
    }
  }(e6)) || r4 && e6 && "number" == typeof e6.length) {
    n5 && (e6 = n5);
    var t8 = 0;
    return function() {
      return t8 >= e6.length ? { done: true } : { done: false, value: e6[t8++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var Ce = { nivo: ["#e8c1a0", "#f47560", "#f1e15b", "#e8a838", "#61cdbb", "#97e3d5"], category10: category10_default, accent: Accent_default, dark2: Dark2_default, paired: Paired_default, pastel1: Pastel1_default, pastel2: Pastel2_default, set1: Set1_default, set2: Set2_default, set3: Set3_default };
var Ge = Object.keys(Ce);
var Ve = { brown_blueGreen: scheme, purpleRed_green: scheme2, pink_yellowGreen: scheme3, purple_orange: scheme4, red_blue: scheme5, red_grey: scheme6, red_yellow_blue: scheme7, red_yellow_green: scheme8, spectral: scheme9 };
var Te = Object.keys(Ve);
var Pe = { brown_blueGreen: BrBG_default, purpleRed_green: PRGn_default, pink_yellowGreen: PiYG_default, purple_orange: PuOr_default, red_blue: RdBu_default, red_grey: RdGy_default, red_yellow_blue: RdYlBu_default, red_yellow_green: RdYlGn_default, spectral: Spectral_default };
var Ue = { blues: scheme22, greens: scheme23, greys: scheme24, oranges: scheme27, purples: scheme25, reds: scheme26, blue_green: scheme10, blue_purple: scheme11, green_blue: scheme12, orange_red: scheme13, purple_blue_green: scheme14, purple_blue: scheme15, purple_red: scheme16, red_purple: scheme17, yellow_green_blue: scheme18, yellow_green: scheme19, yellow_orange_brown: scheme20, yellow_orange_red: scheme21 };
var De = Object.keys(Ue);
var Me = { blues: Blues_default, greens: Greens_default, greys: Greys_default, oranges: Oranges_default, purples: Purples_default, reds: Reds_default, turbo: turbo_default, viridis: viridis_default, inferno, magma, plasma, cividis: cividis_default, warm, cool, cubehelixDefault: cubehelix_default, blue_green: BuGn_default, blue_purple: BuPu_default, green_blue: GnBu_default, orange_red: OrRd_default, purple_blue_green: PuBuGn_default, purple_blue: PuBu_default, purple_red: PuRd_default, red_purple: RdPu_default, yellow_green_blue: YlGnBu_default, yellow_green: YlGn_default, yellow_orange_brown: YlOrBr_default, yellow_orange_red: YlOrRd_default };
var $e = qe({}, Ce, Ve, Ue);
var Be = Object.keys($e);
var Fe = function(e6) {
  return Ge.includes(e6);
};
var He = function(e6) {
  return Te.includes(e6);
};
var Je = function(e6) {
  return De.includes(e6);
};
var Ke = { rainbow: rainbow_default, sinebow: sinebow_default };
var Le = qe({}, Pe, Me, Ke);
var Ne = Object.keys(Le);
var Qe = function(e6, r4) {
  if ("function" == typeof e6)
    return e6;
  if ((0, import_isPlainObject.default)(e6)) {
    if (function(e7) {
      return void 0 !== e7.theme;
    }(e6)) {
      if (void 0 === r4)
        throw new Error("Unable to use color from theme as no theme was provided");
      var n5 = (0, import_get.default)(r4, e6.theme);
      if (void 0 === n5)
        throw new Error("Color from theme is undefined at path: '" + e6.theme + "'");
      return function() {
        return n5;
      };
    }
    if (function(e7) {
      return void 0 !== e7.from;
    }(e6)) {
      var t8 = function(r5) {
        return (0, import_get.default)(r5, e6.from);
      };
      if (Array.isArray(e6.modifiers)) {
        for (var o3, i4 = [], u2 = function() {
          var e7 = o3.value, r5 = e7[0], n6 = e7[1];
          if ("brighter" === r5)
            i4.push(function(e8) {
              return e8.brighter(n6);
            });
          else if ("darker" === r5)
            i4.push(function(e8) {
              return e8.darker(n6);
            });
          else {
            if ("opacity" !== r5)
              throw new Error("Invalid color modifier: '" + r5 + "', must be one of: 'brighter', 'darker', 'opacity'");
            i4.push(function(e8) {
              return e8.opacity = n6, e8;
            });
          }
        }, a4 = Se(e6.modifiers); !(o3 = a4()).done; )
          u2();
        return 0 === i4.length ? t8 : function(e7) {
          return i4.reduce(function(e8, r5) {
            return r5(e8);
          }, rgb(t8(e7))).toString();
        };
      }
      return t8;
    }
    throw new Error("Invalid color spec, you should either specify 'theme' or 'from' when using a config object");
  }
  return function() {
    return e6;
  };
};
var We = function(e6, r4) {
  return (0, import_react.useMemo)(function() {
    return Qe(e6, r4);
  }, [e6, r4]);
};
var Xe = import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.arrayOf(import_prop_types.default.string), import_prop_types.default.shape({ scheme: import_prop_types.default.oneOf(Be).isRequired, size: import_prop_types.default.number }), import_prop_types.default.shape({ datum: import_prop_types.default.string.isRequired }), import_prop_types.default.string]);
var Ye = import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func, import_prop_types.default.shape({ theme: import_prop_types.default.string.isRequired }), import_prop_types.default.shape({ from: import_prop_types.default.string.isRequired, modifiers: import_prop_types.default.arrayOf(import_prop_types.default.array) })]);
var fr = function(e6, r4) {
  if ("function" == typeof e6)
    return e6;
  var n5 = "function" == typeof r4 ? r4 : function(e7) {
    return (0, import_get.default)(e7, r4);
  };
  if (Array.isArray(e6)) {
    var t8 = ordinal(e6), o3 = function(e7) {
      return t8(n5(e7));
    };
    return o3.scale = t8, o3;
  }
  if ((0, import_isPlainObject.default)(e6)) {
    if (function(e7) {
      return void 0 !== e7.datum;
    }(e6))
      return function(r5) {
        return (0, import_get.default)(r5, e6.datum);
      };
    if (function(e7) {
      return void 0 !== e7.scheme;
    }(e6)) {
      if (Fe(e6.scheme)) {
        var i4 = ordinal($e[e6.scheme]), u2 = function(e7) {
          return i4(n5(e7));
        };
        return u2.scale = i4, u2;
      }
      if (He(e6.scheme)) {
        if (void 0 !== e6.size && (e6.size < 3 || e6.size > 11))
          throw new Error("Invalid size '" + e6.size + "' for diverging color scheme '" + e6.scheme + "', must be between 3~11");
        var a4 = ordinal($e[e6.scheme][e6.size || 11]), s3 = function(e7) {
          return a4(n5(e7));
        };
        return s3.scale = a4, s3;
      }
      if (Je(e6.scheme)) {
        if (void 0 !== e6.size && (e6.size < 3 || e6.size > 9))
          throw new Error("Invalid size '" + e6.size + "' for sequential color scheme '" + e6.scheme + "', must be between 3~9");
        var c4 = ordinal($e[e6.scheme][e6.size || 9]), l2 = function(e7) {
          return c4(n5(e7));
        };
        return l2.scale = c4, l2;
      }
    }
    throw new Error("Invalid colors, when using an object, you should either pass a 'datum' or a 'scheme' property");
  }
  return function() {
    return e6;
  };
};
var dr = function(e6, r4) {
  return (0, import_react.useMemo)(function() {
    return fr(e6, r4);
  }, [e6, r4]);
};

// ../node_modules/@nivo/line/node_modules/@nivo/axes/dist/nivo-axes.es.js
var t4 = __toESM(require_react());
var import_react5 = __toESM(require_react());

// ../node_modules/@nivo/line/node_modules/@react-spring/rafz/dist/react-spring-rafz.esm.js
var updateQueue = makeQueue();
var raf = (fn2) => schedule(fn2, updateQueue);
var writeQueue = makeQueue();
raf.write = (fn2) => schedule(fn2, writeQueue);
var onStartQueue = makeQueue();
raf.onStart = (fn2) => schedule(fn2, onStartQueue);
var onFrameQueue = makeQueue();
raf.onFrame = (fn2) => schedule(fn2, onFrameQueue);
var onFinishQueue = makeQueue();
raf.onFinish = (fn2) => schedule(fn2, onFinishQueue);
var timeouts = [];
raf.setTimeout = (handler, ms) => {
  let time2 = raf.now() + ms;
  let cancel = () => {
    let i4 = timeouts.findIndex((t8) => t8.cancel == cancel);
    if (~i4)
      timeouts.splice(i4, 1);
    __raf.count -= ~i4 ? 1 : 0;
  };
  let timeout = {
    time: time2,
    handler,
    cancel
  };
  timeouts.splice(findTimeout(time2), 0, timeout);
  __raf.count += 1;
  start();
  return timeout;
};
var findTimeout = (time2) => ~(~timeouts.findIndex((t8) => t8.time > time2) || ~timeouts.length);
raf.cancel = (fn2) => {
  updateQueue.delete(fn2);
  writeQueue.delete(fn2);
};
raf.sync = (fn2) => {
  sync = true;
  raf.batchedUpdates(fn2);
  sync = false;
};
raf.throttle = (fn2) => {
  let lastArgs;
  function queuedFn() {
    try {
      fn2(...lastArgs);
    } finally {
      lastArgs = null;
    }
  }
  function throttled(...args) {
    lastArgs = args;
    raf.onStart(queuedFn);
  }
  throttled.handler = fn2;
  throttled.cancel = () => {
    onStartQueue.delete(queuedFn);
    lastArgs = null;
  };
  return throttled;
};
var nativeRaf = typeof window != "undefined" ? window.requestAnimationFrame : () => {
};
raf.use = (impl) => nativeRaf = impl;
raf.now = typeof performance != "undefined" ? () => performance.now() : Date.now;
raf.batchedUpdates = (fn2) => fn2();
raf.catch = console.error;
raf.frameLoop = "always";
raf.advance = () => {
  if (raf.frameLoop !== "demand") {
    console.warn("Cannot call the manual advancement of rafz whilst frameLoop is not set as demand");
  } else {
    update();
  }
};
var ts = -1;
var sync = false;
function schedule(fn2, queue) {
  if (sync) {
    queue.delete(fn2);
    fn2(0);
  } else {
    queue.add(fn2);
    start();
  }
}
function start() {
  if (ts < 0) {
    ts = 0;
    if (raf.frameLoop !== "demand") {
      nativeRaf(loop);
    }
  }
}
function loop() {
  if (~ts) {
    nativeRaf(loop);
    raf.batchedUpdates(update);
  }
}
function update() {
  let prevTs = ts;
  ts = raf.now();
  let count = findTimeout(ts);
  if (count) {
    eachSafely(timeouts.splice(0, count), (t8) => t8.handler());
    __raf.count -= count;
  }
  onStartQueue.flush();
  updateQueue.flush(prevTs ? Math.min(64, ts - prevTs) : 16.667);
  onFrameQueue.flush();
  writeQueue.flush();
  onFinishQueue.flush();
}
function makeQueue() {
  let next = /* @__PURE__ */ new Set();
  let current = next;
  return {
    add(fn2) {
      __raf.count += current == next && !next.has(fn2) ? 1 : 0;
      next.add(fn2);
    },
    delete(fn2) {
      __raf.count -= current == next && next.has(fn2) ? 1 : 0;
      return next.delete(fn2);
    },
    flush(arg) {
      if (current.size) {
        next = /* @__PURE__ */ new Set();
        __raf.count -= current.size;
        eachSafely(current, (fn2) => fn2(arg) && next.add(fn2));
        __raf.count += next.size;
        current = next;
      }
    }
  };
}
function eachSafely(values, each2) {
  values.forEach((value) => {
    try {
      each2(value);
    } catch (e6) {
      raf.catch(e6);
    }
  });
}
var __raf = {
  count: 0,
  clear() {
    ts = -1;
    timeouts = [];
    onStartQueue = makeQueue();
    updateQueue = makeQueue();
    onFrameQueue = makeQueue();
    writeQueue = makeQueue();
    onFinishQueue = makeQueue();
    __raf.count = 0;
  }
};

// ../node_modules/@nivo/line/node_modules/@react-spring/shared/dist/react-spring-shared.esm.js
var React = __toESM(require_react());
var import_react2 = __toESM(require_react());
function noop() {
}
var defineHidden = (obj, key, value) => Object.defineProperty(obj, key, {
  value,
  writable: true,
  configurable: true
});
var is = {
  arr: Array.isArray,
  obj: (a4) => !!a4 && a4.constructor.name === "Object",
  fun: (a4) => typeof a4 === "function",
  str: (a4) => typeof a4 === "string",
  num: (a4) => typeof a4 === "number",
  und: (a4) => a4 === void 0
};
function isEqual(a4, b5) {
  if (is.arr(a4)) {
    if (!is.arr(b5) || a4.length !== b5.length)
      return false;
    for (let i4 = 0; i4 < a4.length; i4++) {
      if (a4[i4] !== b5[i4])
        return false;
    }
    return true;
  }
  return a4 === b5;
}
var each = (obj, fn2) => obj.forEach(fn2);
function eachProp(obj, fn2, ctx2) {
  if (is.arr(obj)) {
    for (let i4 = 0; i4 < obj.length; i4++) {
      fn2.call(ctx2, obj[i4], `${i4}`);
    }
    return;
  }
  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      fn2.call(ctx2, obj[key], key);
    }
  }
}
var toArray = (a4) => is.und(a4) ? [] : is.arr(a4) ? a4 : [a4];
function flush(queue, iterator) {
  if (queue.size) {
    const items = Array.from(queue);
    queue.clear();
    each(items, iterator);
  }
}
var flushCalls = (queue, ...args) => flush(queue, (fn2) => fn2(...args));
var createStringInterpolator$1;
var to;
var colors$1 = null;
var skipAnimation = false;
var willAdvance = noop;
var assign = (globals2) => {
  if (globals2.to)
    to = globals2.to;
  if (globals2.now)
    raf.now = globals2.now;
  if (globals2.colors !== void 0)
    colors$1 = globals2.colors;
  if (globals2.skipAnimation != null)
    skipAnimation = globals2.skipAnimation;
  if (globals2.createStringInterpolator)
    createStringInterpolator$1 = globals2.createStringInterpolator;
  if (globals2.requestAnimationFrame)
    raf.use(globals2.requestAnimationFrame);
  if (globals2.batchedUpdates)
    raf.batchedUpdates = globals2.batchedUpdates;
  if (globals2.willAdvance)
    willAdvance = globals2.willAdvance;
  if (globals2.frameLoop)
    raf.frameLoop = globals2.frameLoop;
};
var globals = Object.freeze({
  __proto__: null,
  get createStringInterpolator() {
    return createStringInterpolator$1;
  },
  get to() {
    return to;
  },
  get colors() {
    return colors$1;
  },
  get skipAnimation() {
    return skipAnimation;
  },
  get willAdvance() {
    return willAdvance;
  },
  assign
});
var startQueue = /* @__PURE__ */ new Set();
var currentFrame = [];
var prevFrame = [];
var priority = 0;
var frameLoop = {
  get idle() {
    return !startQueue.size && !currentFrame.length;
  },
  start(animation) {
    if (priority > animation.priority) {
      startQueue.add(animation);
      raf.onStart(flushStartQueue);
    } else {
      startSafely(animation);
      raf(advance);
    }
  },
  advance,
  sort(animation) {
    if (priority) {
      raf.onFrame(() => frameLoop.sort(animation));
    } else {
      const prevIndex = currentFrame.indexOf(animation);
      if (~prevIndex) {
        currentFrame.splice(prevIndex, 1);
        startUnsafely(animation);
      }
    }
  },
  clear() {
    currentFrame = [];
    startQueue.clear();
  }
};
function flushStartQueue() {
  startQueue.forEach(startSafely);
  startQueue.clear();
  raf(advance);
}
function startSafely(animation) {
  if (!currentFrame.includes(animation))
    startUnsafely(animation);
}
function startUnsafely(animation) {
  currentFrame.splice(findIndex(currentFrame, (other) => other.priority > animation.priority), 0, animation);
}
function advance(dt) {
  const nextFrame = prevFrame;
  for (let i4 = 0; i4 < currentFrame.length; i4++) {
    const animation = currentFrame[i4];
    priority = animation.priority;
    if (!animation.idle) {
      willAdvance(animation);
      animation.advance(dt);
      if (!animation.idle) {
        nextFrame.push(animation);
      }
    }
  }
  priority = 0;
  prevFrame = currentFrame;
  prevFrame.length = 0;
  currentFrame = nextFrame;
  return currentFrame.length > 0;
}
function findIndex(arr, test) {
  const index = arr.findIndex(test);
  return index < 0 ? arr.length : index;
}
var colors = {
  transparent: 0,
  aliceblue: 4042850303,
  antiquewhite: 4209760255,
  aqua: 16777215,
  aquamarine: 2147472639,
  azure: 4043309055,
  beige: 4126530815,
  bisque: 4293182719,
  black: 255,
  blanchedalmond: 4293643775,
  blue: 65535,
  blueviolet: 2318131967,
  brown: 2771004159,
  burlywood: 3736635391,
  burntsienna: 3934150143,
  cadetblue: 1604231423,
  chartreuse: 2147418367,
  chocolate: 3530104575,
  coral: 4286533887,
  cornflowerblue: 1687547391,
  cornsilk: 4294499583,
  crimson: 3692313855,
  cyan: 16777215,
  darkblue: 35839,
  darkcyan: 9145343,
  darkgoldenrod: 3095792639,
  darkgray: 2846468607,
  darkgreen: 6553855,
  darkgrey: 2846468607,
  darkkhaki: 3182914559,
  darkmagenta: 2332068863,
  darkolivegreen: 1433087999,
  darkorange: 4287365375,
  darkorchid: 2570243327,
  darkred: 2332033279,
  darksalmon: 3918953215,
  darkseagreen: 2411499519,
  darkslateblue: 1211993087,
  darkslategray: 793726975,
  darkslategrey: 793726975,
  darkturquoise: 13554175,
  darkviolet: 2483082239,
  deeppink: 4279538687,
  deepskyblue: 12582911,
  dimgray: 1768516095,
  dimgrey: 1768516095,
  dodgerblue: 512819199,
  firebrick: 2988581631,
  floralwhite: 4294635775,
  forestgreen: 579543807,
  fuchsia: 4278255615,
  gainsboro: 3705462015,
  ghostwhite: 4177068031,
  gold: 4292280575,
  goldenrod: 3668254975,
  gray: 2155905279,
  green: 8388863,
  greenyellow: 2919182335,
  grey: 2155905279,
  honeydew: 4043305215,
  hotpink: 4285117695,
  indianred: 3445382399,
  indigo: 1258324735,
  ivory: 4294963455,
  khaki: 4041641215,
  lavender: 3873897215,
  lavenderblush: 4293981695,
  lawngreen: 2096890111,
  lemonchiffon: 4294626815,
  lightblue: 2916673279,
  lightcoral: 4034953471,
  lightcyan: 3774873599,
  lightgoldenrodyellow: 4210742015,
  lightgray: 3553874943,
  lightgreen: 2431553791,
  lightgrey: 3553874943,
  lightpink: 4290167295,
  lightsalmon: 4288707327,
  lightseagreen: 548580095,
  lightskyblue: 2278488831,
  lightslategray: 2005441023,
  lightslategrey: 2005441023,
  lightsteelblue: 2965692159,
  lightyellow: 4294959359,
  lime: 16711935,
  limegreen: 852308735,
  linen: 4210091775,
  magenta: 4278255615,
  maroon: 2147483903,
  mediumaquamarine: 1724754687,
  mediumblue: 52735,
  mediumorchid: 3126187007,
  mediumpurple: 2473647103,
  mediumseagreen: 1018393087,
  mediumslateblue: 2070474495,
  mediumspringgreen: 16423679,
  mediumturquoise: 1221709055,
  mediumvioletred: 3340076543,
  midnightblue: 421097727,
  mintcream: 4127193855,
  mistyrose: 4293190143,
  moccasin: 4293178879,
  navajowhite: 4292783615,
  navy: 33023,
  oldlace: 4260751103,
  olive: 2155872511,
  olivedrab: 1804477439,
  orange: 4289003775,
  orangered: 4282712319,
  orchid: 3664828159,
  palegoldenrod: 4008225535,
  palegreen: 2566625535,
  paleturquoise: 2951671551,
  palevioletred: 3681588223,
  papayawhip: 4293907967,
  peachpuff: 4292524543,
  peru: 3448061951,
  pink: 4290825215,
  plum: 3718307327,
  powderblue: 2967529215,
  purple: 2147516671,
  rebeccapurple: 1714657791,
  red: 4278190335,
  rosybrown: 3163525119,
  royalblue: 1097458175,
  saddlebrown: 2336560127,
  salmon: 4202722047,
  sandybrown: 4104413439,
  seagreen: 780883967,
  seashell: 4294307583,
  sienna: 2689740287,
  silver: 3233857791,
  skyblue: 2278484991,
  slateblue: 1784335871,
  slategray: 1887473919,
  slategrey: 1887473919,
  snow: 4294638335,
  springgreen: 16744447,
  steelblue: 1182971135,
  tan: 3535047935,
  teal: 8421631,
  thistle: 3636451583,
  tomato: 4284696575,
  turquoise: 1088475391,
  violet: 4001558271,
  wheat: 4125012991,
  white: 4294967295,
  whitesmoke: 4126537215,
  yellow: 4294902015,
  yellowgreen: 2597139199
};
var NUMBER = "[-+]?\\d*\\.?\\d+";
var PERCENTAGE = NUMBER + "%";
function call(...parts) {
  return "\\(\\s*(" + parts.join(")\\s*,\\s*(") + ")\\s*\\)";
}
var rgb2 = new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER));
var rgba2 = new RegExp("rgba" + call(NUMBER, NUMBER, NUMBER, NUMBER));
var hsl2 = new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE));
var hsla2 = new RegExp("hsla" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));
var hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex6 = /^#([0-9a-fA-F]{6})$/;
var hex8 = /^#([0-9a-fA-F]{8})$/;
function normalizeColor(color2) {
  let match;
  if (typeof color2 === "number") {
    return color2 >>> 0 === color2 && color2 >= 0 && color2 <= 4294967295 ? color2 : null;
  }
  if (match = hex6.exec(color2))
    return parseInt(match[1] + "ff", 16) >>> 0;
  if (colors$1 && colors$1[color2] !== void 0) {
    return colors$1[color2];
  }
  if (match = rgb2.exec(color2)) {
    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 255) >>> 0;
  }
  if (match = rgba2.exec(color2)) {
    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
  }
  if (match = hex3.exec(color2)) {
    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + "ff", 16) >>> 0;
  }
  if (match = hex8.exec(color2))
    return parseInt(match[1], 16) >>> 0;
  if (match = hex4.exec(color2)) {
    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
  }
  if (match = hsl2.exec(color2)) {
    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 255) >>> 0;
  }
  if (match = hsla2.exec(color2)) {
    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
  }
  return null;
}
function hue2rgb(p4, q, t8) {
  if (t8 < 0)
    t8 += 1;
  if (t8 > 1)
    t8 -= 1;
  if (t8 < 1 / 6)
    return p4 + (q - p4) * 6 * t8;
  if (t8 < 1 / 2)
    return q;
  if (t8 < 2 / 3)
    return p4 + (q - p4) * (2 / 3 - t8) * 6;
  return p4;
}
function hslToRgb(h3, s3, l2) {
  const q = l2 < 0.5 ? l2 * (1 + s3) : l2 + s3 - l2 * s3;
  const p4 = 2 * l2 - q;
  const r4 = hue2rgb(p4, q, h3 + 1 / 3);
  const g4 = hue2rgb(p4, q, h3);
  const b5 = hue2rgb(p4, q, h3 - 1 / 3);
  return Math.round(r4 * 255) << 24 | Math.round(g4 * 255) << 16 | Math.round(b5 * 255) << 8;
}
function parse255(str) {
  const int = parseInt(str, 10);
  if (int < 0)
    return 0;
  if (int > 255)
    return 255;
  return int;
}
function parse360(str) {
  const int = parseFloat(str);
  return (int % 360 + 360) % 360 / 360;
}
function parse1(str) {
  const num = parseFloat(str);
  if (num < 0)
    return 0;
  if (num > 1)
    return 255;
  return Math.round(num * 255);
}
function parsePercentage(str) {
  const int = parseFloat(str);
  if (int < 0)
    return 0;
  if (int > 100)
    return 1;
  return int / 100;
}
function colorToRgba(input) {
  let int32Color = normalizeColor(input);
  if (int32Color === null)
    return input;
  int32Color = int32Color || 0;
  let r4 = (int32Color & 4278190080) >>> 24;
  let g4 = (int32Color & 16711680) >>> 16;
  let b5 = (int32Color & 65280) >>> 8;
  let a4 = (int32Color & 255) / 255;
  return `rgba(${r4}, ${g4}, ${b5}, ${a4})`;
}
var createInterpolator = (range, output, extrapolate) => {
  if (is.fun(range)) {
    return range;
  }
  if (is.arr(range)) {
    return createInterpolator({
      range,
      output,
      extrapolate
    });
  }
  if (is.str(range.output[0])) {
    return createStringInterpolator$1(range);
  }
  const config2 = range;
  const outputRange = config2.output;
  const inputRange = config2.range || [0, 1];
  const extrapolateLeft = config2.extrapolateLeft || config2.extrapolate || "extend";
  const extrapolateRight = config2.extrapolateRight || config2.extrapolate || "extend";
  const easing = config2.easing || ((t8) => t8);
  return (input) => {
    const range2 = findRange(input, inputRange);
    return interpolate(input, inputRange[range2], inputRange[range2 + 1], outputRange[range2], outputRange[range2 + 1], easing, extrapolateLeft, extrapolateRight, config2.map);
  };
};
function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map) {
  let result = map ? map(input) : input;
  if (result < inputMin) {
    if (extrapolateLeft === "identity")
      return result;
    else if (extrapolateLeft === "clamp")
      result = inputMin;
  }
  if (result > inputMax) {
    if (extrapolateRight === "identity")
      return result;
    else if (extrapolateRight === "clamp")
      result = inputMax;
  }
  if (outputMin === outputMax)
    return outputMin;
  if (inputMin === inputMax)
    return input <= inputMin ? outputMin : outputMax;
  if (inputMin === -Infinity)
    result = -result;
  else if (inputMax === Infinity)
    result = result - inputMin;
  else
    result = (result - inputMin) / (inputMax - inputMin);
  result = easing(result);
  if (outputMin === -Infinity)
    result = -result;
  else if (outputMax === Infinity)
    result = result + outputMin;
  else
    result = result * (outputMax - outputMin) + outputMin;
  return result;
}
function findRange(input, inputRange) {
  for (var i4 = 1; i4 < inputRange.length - 1; ++i4)
    if (inputRange[i4] >= input)
      break;
  return i4 - 1;
}
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var $get = Symbol.for("FluidValue.get");
var $observers = Symbol.for("FluidValue.observers");
var hasFluidValue = (arg) => Boolean(arg && arg[$get]);
var getFluidValue = (arg) => arg && arg[$get] ? arg[$get]() : arg;
var getFluidObservers = (target) => target[$observers] || null;
function callFluidObserver(observer, event) {
  if (observer.eventObserved) {
    observer.eventObserved(event);
  } else {
    observer(event);
  }
}
function callFluidObservers(target, event) {
  let observers = target[$observers];
  if (observers) {
    observers.forEach((observer) => {
      callFluidObserver(observer, event);
    });
  }
}
var FluidValue = class {
  constructor(get) {
    this[$get] = void 0;
    this[$observers] = void 0;
    if (!get && !(get = this.get)) {
      throw Error("Unknown getter");
    }
    setFluidGetter(this, get);
  }
};
var setFluidGetter = (target, get) => setHidden(target, $get, get);
function addFluidObserver(target, observer) {
  if (target[$get]) {
    let observers = target[$observers];
    if (!observers) {
      setHidden(target, $observers, observers = /* @__PURE__ */ new Set());
    }
    if (!observers.has(observer)) {
      observers.add(observer);
      if (target.observerAdded) {
        target.observerAdded(observers.size, observer);
      }
    }
  }
  return observer;
}
function removeFluidObserver(target, observer) {
  let observers = target[$observers];
  if (observers && observers.has(observer)) {
    const count = observers.size - 1;
    if (count) {
      observers.delete(observer);
    } else {
      target[$observers] = null;
    }
    if (target.observerRemoved) {
      target.observerRemoved(count, observer);
    }
  }
}
var setHidden = (target, key, value) => Object.defineProperty(target, key, {
  value,
  writable: true,
  configurable: true
});
var numberRegex = /[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
var colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi;
var unitRegex = new RegExp(`(${numberRegex.source})(%|[a-z]+)`, "i");
var namedColorRegex;
var rgbaRegex = /rgba\(([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+)\)/gi;
var rgbaRound = (_2, p1, p22, p32, p4) => `rgba(${Math.round(p1)}, ${Math.round(p22)}, ${Math.round(p32)}, ${p4})`;
var createStringInterpolator = (config2) => {
  if (!namedColorRegex)
    namedColorRegex = colors$1 ? new RegExp(`(${Object.keys(colors$1).join("|")})(?!\\w)`, "g") : /^\b$/;
  const output = config2.output.map((value) => getFluidValue(value).replace(colorRegex, colorToRgba).replace(namedColorRegex, colorToRgba));
  const keyframes = output.map((value) => value.match(numberRegex).map(Number));
  const outputRanges = keyframes[0].map((_2, i4) => keyframes.map((values) => {
    if (!(i4 in values)) {
      throw Error('The arity of each "output" value must be equal');
    }
    return values[i4];
  }));
  const interpolators = outputRanges.map((output2) => createInterpolator(_extends({}, config2, {
    output: output2
  })));
  return (input) => {
    var _output$find;
    const missingUnit = !unitRegex.test(output[0]) && ((_output$find = output.find((value) => unitRegex.test(value))) == null ? void 0 : _output$find.replace(numberRegex, ""));
    let i4 = 0;
    return output[0].replace(numberRegex, () => `${interpolators[i4++](input)}${missingUnit || ""}`).replace(rgbaRegex, rgbaRound);
  };
};
var prefix = "react-spring: ";
var once = (fn2) => {
  const func = fn2;
  let called = false;
  if (typeof func != "function") {
    throw new TypeError(`${prefix}once requires a function parameter`);
  }
  return (...args) => {
    if (!called) {
      func(...args);
      called = true;
    }
  };
};
var warnInterpolate = once(console.warn);
function deprecateInterpolate() {
  warnInterpolate(`${prefix}The "interpolate" function is deprecated in v9 (use "to" instead)`);
}
var warnDirectCall = once(console.warn);
function deprecateDirectCall() {
  warnDirectCall(`${prefix}Directly calling start instead of using the api object is deprecated in v9 (use ".start" instead), this will be removed in later 0.X.0 versions`);
}
function isAnimatedString(value) {
  return is.str(value) && (value[0] == "#" || /\d/.test(value) || value in (colors$1 || {}));
}
var useOnce = (effect) => (0, import_react2.useEffect)(effect, emptyDeps);
var emptyDeps = [];
function useForceUpdate() {
  const update3 = (0, import_react2.useState)()[1];
  const mounted = (0, import_react2.useState)(makeMountedRef)[0];
  useOnce(mounted.unmount);
  return () => {
    if (mounted.current) {
      update3({});
    }
  };
}
function makeMountedRef() {
  const mounted = {
    current: true,
    unmount: () => () => {
      mounted.current = false;
    }
  };
  return mounted;
}
function useMemoOne(getResult, inputs) {
  const [initial] = (0, import_react2.useState)(() => ({
    inputs,
    result: getResult()
  }));
  const committed = (0, import_react2.useRef)();
  const prevCache = committed.current;
  let cache = prevCache;
  if (cache) {
    const useCache = Boolean(inputs && cache.inputs && areInputsEqual(inputs, cache.inputs));
    if (!useCache) {
      cache = {
        inputs,
        result: getResult()
      };
    }
  } else {
    cache = initial;
  }
  (0, import_react2.useEffect)(() => {
    committed.current = cache;
    if (prevCache == initial) {
      initial.inputs = initial.result = void 0;
    }
  }, [cache]);
  return cache.result;
}
function areInputsEqual(next, prev) {
  if (next.length !== prev.length) {
    return false;
  }
  for (let i4 = 0; i4 < next.length; i4++) {
    if (next[i4] !== prev[i4]) {
      return false;
    }
  }
  return true;
}
function usePrev(value) {
  const prevRef = (0, import_react2.useRef)();
  (0, import_react2.useEffect)(() => {
    prevRef.current = value;
  });
  return prevRef.current;
}
var useLayoutEffect2 = typeof window !== "undefined" && window.document && window.document.createElement ? React.useLayoutEffect : React.useEffect;

// ../node_modules/@nivo/line/node_modules/@react-spring/core/dist/react-spring-core.esm.js
var React3 = __toESM(require_react());
var import_react4 = __toESM(require_react());

// ../node_modules/@nivo/line/node_modules/@react-spring/animated/dist/react-spring-animated.esm.js
var React2 = __toESM(require_react());
var import_react3 = __toESM(require_react());
var $node = Symbol.for("Animated:node");
var isAnimated = (value) => !!value && value[$node] === value;
var getAnimated = (owner) => owner && owner[$node];
var setAnimated = (owner, node) => defineHidden(owner, $node, node);
var getPayload = (owner) => owner && owner[$node] && owner[$node].getPayload();
var Animated = class {
  constructor() {
    this.payload = void 0;
    setAnimated(this, this);
  }
  getPayload() {
    return this.payload || [];
  }
};
var AnimatedValue = class _AnimatedValue extends Animated {
  constructor(_value) {
    super();
    this.done = true;
    this.elapsedTime = void 0;
    this.lastPosition = void 0;
    this.lastVelocity = void 0;
    this.v0 = void 0;
    this.durationProgress = 0;
    this._value = _value;
    if (is.num(this._value)) {
      this.lastPosition = this._value;
    }
  }
  static create(value) {
    return new _AnimatedValue(value);
  }
  getPayload() {
    return [this];
  }
  getValue() {
    return this._value;
  }
  setValue(value, step) {
    if (is.num(value)) {
      this.lastPosition = value;
      if (step) {
        value = Math.round(value / step) * step;
        if (this.done) {
          this.lastPosition = value;
        }
      }
    }
    if (this._value === value) {
      return false;
    }
    this._value = value;
    return true;
  }
  reset() {
    const {
      done
    } = this;
    this.done = false;
    if (is.num(this._value)) {
      this.elapsedTime = 0;
      this.durationProgress = 0;
      this.lastPosition = this._value;
      if (done)
        this.lastVelocity = null;
      this.v0 = null;
    }
  }
};
var AnimatedString = class _AnimatedString extends AnimatedValue {
  constructor(value) {
    super(0);
    this._string = null;
    this._toString = void 0;
    this._toString = createInterpolator({
      output: [value, value]
    });
  }
  static create(value) {
    return new _AnimatedString(value);
  }
  getValue() {
    let value = this._string;
    return value == null ? this._string = this._toString(this._value) : value;
  }
  setValue(value) {
    if (is.str(value)) {
      if (value == this._string) {
        return false;
      }
      this._string = value;
      this._value = 1;
    } else if (super.setValue(value)) {
      this._string = null;
    } else {
      return false;
    }
    return true;
  }
  reset(goal) {
    if (goal) {
      this._toString = createInterpolator({
        output: [this.getValue(), goal]
      });
    }
    this._value = 0;
    super.reset();
  }
};
var TreeContext = {
  dependencies: null
};
var AnimatedObject = class extends Animated {
  constructor(source) {
    super();
    this.source = source;
    this.setValue(source);
  }
  getValue(animated2) {
    const values = {};
    eachProp(this.source, (source, key) => {
      if (isAnimated(source)) {
        values[key] = source.getValue(animated2);
      } else if (hasFluidValue(source)) {
        values[key] = getFluidValue(source);
      } else if (!animated2) {
        values[key] = source;
      }
    });
    return values;
  }
  setValue(source) {
    this.source = source;
    this.payload = this._makePayload(source);
  }
  reset() {
    if (this.payload) {
      each(this.payload, (node) => node.reset());
    }
  }
  _makePayload(source) {
    if (source) {
      const payload = /* @__PURE__ */ new Set();
      eachProp(source, this._addToPayload, payload);
      return Array.from(payload);
    }
  }
  _addToPayload(source) {
    if (TreeContext.dependencies && hasFluidValue(source)) {
      TreeContext.dependencies.add(source);
    }
    const payload = getPayload(source);
    if (payload) {
      each(payload, (node) => this.add(node));
    }
  }
};
var AnimatedArray = class _AnimatedArray extends AnimatedObject {
  constructor(source) {
    super(source);
  }
  static create(source) {
    return new _AnimatedArray(source);
  }
  getValue() {
    return this.source.map((node) => node.getValue());
  }
  setValue(source) {
    const payload = this.getPayload();
    if (source.length == payload.length) {
      return payload.map((node, i4) => node.setValue(source[i4])).some(Boolean);
    }
    super.setValue(source.map(makeAnimated));
    return true;
  }
};
function makeAnimated(value) {
  const nodeType = isAnimatedString(value) ? AnimatedString : AnimatedValue;
  return nodeType.create(value);
}
function getAnimatedType(value) {
  const parentNode = getAnimated(value);
  return parentNode ? parentNode.constructor : is.arr(value) ? AnimatedArray : isAnimatedString(value) ? AnimatedString : AnimatedValue;
}
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
var withAnimated = (Component, host2) => {
  const hasInstance = !is.fun(Component) || Component.prototype && Component.prototype.isReactComponent;
  return (0, import_react3.forwardRef)((givenProps, givenRef) => {
    const instanceRef = (0, import_react3.useRef)(null);
    const ref = hasInstance && (0, import_react3.useCallback)((value) => {
      instanceRef.current = updateRef(givenRef, value);
    }, [givenRef]);
    const [props, deps] = getAnimatedState(givenProps, host2);
    const forceUpdate = useForceUpdate();
    const callback = () => {
      const instance = instanceRef.current;
      if (hasInstance && !instance) {
        return;
      }
      const didUpdate = instance ? host2.applyAnimatedValues(instance, props.getValue(true)) : false;
      if (didUpdate === false) {
        forceUpdate();
      }
    };
    const observer = new PropsObserver(callback, deps);
    const observerRef = (0, import_react3.useRef)();
    useLayoutEffect2(() => {
      const lastObserver = observerRef.current;
      observerRef.current = observer;
      each(deps, (dep) => addFluidObserver(dep, observer));
      if (lastObserver) {
        each(lastObserver.deps, (dep) => removeFluidObserver(dep, lastObserver));
        raf.cancel(lastObserver.update);
      }
    });
    (0, import_react3.useEffect)(callback, []);
    useOnce(() => () => {
      const observer2 = observerRef.current;
      each(observer2.deps, (dep) => removeFluidObserver(dep, observer2));
    });
    const usedProps = host2.getComponentProps(props.getValue());
    return React2.createElement(Component, _extends2({}, usedProps, {
      ref
    }));
  });
};
var PropsObserver = class {
  constructor(update3, deps) {
    this.update = update3;
    this.deps = deps;
  }
  eventObserved(event) {
    if (event.type == "change") {
      raf.write(this.update);
    }
  }
};
function getAnimatedState(props, host2) {
  const dependencies = /* @__PURE__ */ new Set();
  TreeContext.dependencies = dependencies;
  if (props.style)
    props = _extends2({}, props, {
      style: host2.createAnimatedStyle(props.style)
    });
  props = new AnimatedObject(props);
  TreeContext.dependencies = null;
  return [props, dependencies];
}
function updateRef(ref, value) {
  if (ref) {
    if (is.fun(ref))
      ref(value);
    else
      ref.current = value;
  }
  return value;
}
var cacheKey = Symbol.for("AnimatedComponent");
var createHost = (components, {
  applyAnimatedValues: _applyAnimatedValues = () => false,
  createAnimatedStyle: _createAnimatedStyle = (style) => new AnimatedObject(style),
  getComponentProps: _getComponentProps = (props) => props
} = {}) => {
  const hostConfig = {
    applyAnimatedValues: _applyAnimatedValues,
    createAnimatedStyle: _createAnimatedStyle,
    getComponentProps: _getComponentProps
  };
  const animated2 = (Component) => {
    const displayName = getDisplayName(Component) || "Anonymous";
    if (is.str(Component)) {
      Component = animated2[Component] || (animated2[Component] = withAnimated(Component, hostConfig));
    } else {
      Component = Component[cacheKey] || (Component[cacheKey] = withAnimated(Component, hostConfig));
    }
    Component.displayName = `Animated(${displayName})`;
    return Component;
  };
  eachProp(components, (Component, key) => {
    if (is.arr(components)) {
      key = getDisplayName(Component);
    }
    animated2[key] = animated2(Component);
  });
  return {
    animated: animated2
  };
};
var getDisplayName = (arg) => is.str(arg) ? arg : arg && is.str(arg.displayName) ? arg.displayName : is.fun(arg) && arg.name || null;

// ../node_modules/@nivo/line/node_modules/@react-spring/core/dist/react-spring-core.esm.js
function _extends3() {
  _extends3 = Object.assign || function(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
function callProp(value, ...args) {
  return is.fun(value) ? value(...args) : value;
}
var matchProp = (value, key) => value === true || !!(key && value && (is.fun(value) ? value(key) : toArray(value).includes(key)));
var resolveProp = (prop, key) => is.obj(prop) ? key && prop[key] : prop;
var getDefaultProp = (props, key) => props.default === true ? props[key] : props.default ? props.default[key] : void 0;
var noopTransform = (value) => value;
var getDefaultProps = (props, transform = noopTransform) => {
  let keys = DEFAULT_PROPS;
  if (props.default && props.default !== true) {
    props = props.default;
    keys = Object.keys(props);
  }
  const defaults2 = {};
  for (const key of keys) {
    const value = transform(props[key], key);
    if (!is.und(value)) {
      defaults2[key] = value;
    }
  }
  return defaults2;
};
var DEFAULT_PROPS = ["config", "onProps", "onStart", "onChange", "onPause", "onResume", "onRest"];
var RESERVED_PROPS = {
  config: 1,
  from: 1,
  to: 1,
  ref: 1,
  loop: 1,
  reset: 1,
  pause: 1,
  cancel: 1,
  reverse: 1,
  immediate: 1,
  default: 1,
  delay: 1,
  onProps: 1,
  onStart: 1,
  onChange: 1,
  onPause: 1,
  onResume: 1,
  onRest: 1,
  onResolve: 1,
  items: 1,
  trail: 1,
  sort: 1,
  expires: 1,
  initial: 1,
  enter: 1,
  update: 1,
  leave: 1,
  children: 1,
  onDestroyed: 1,
  keys: 1,
  callId: 1,
  parentId: 1
};
function getForwardProps(props) {
  const forward = {};
  let count = 0;
  eachProp(props, (value, prop) => {
    if (!RESERVED_PROPS[prop]) {
      forward[prop] = value;
      count++;
    }
  });
  if (count) {
    return forward;
  }
}
function inferTo(props) {
  const to2 = getForwardProps(props);
  if (to2) {
    const out = {
      to: to2
    };
    eachProp(props, (val, key) => key in to2 || (out[key] = val));
    return out;
  }
  return _extends3({}, props);
}
function computeGoal(value) {
  value = getFluidValue(value);
  return is.arr(value) ? value.map(computeGoal) : isAnimatedString(value) ? globals.createStringInterpolator({
    range: [0, 1],
    output: [value, value]
  })(1) : value;
}
function hasProps(props) {
  for (const _2 in props)
    return true;
  return false;
}
function isAsyncTo(to2) {
  return is.fun(to2) || is.arr(to2) && is.obj(to2[0]);
}
function detachRefs(ctrl, ref) {
  var _ctrl$ref;
  (_ctrl$ref = ctrl.ref) == null ? void 0 : _ctrl$ref.delete(ctrl);
  ref == null ? void 0 : ref.delete(ctrl);
}
function replaceRef(ctrl, ref) {
  if (ref && ctrl.ref !== ref) {
    var _ctrl$ref2;
    (_ctrl$ref2 = ctrl.ref) == null ? void 0 : _ctrl$ref2.delete(ctrl);
    ref.add(ctrl);
    ctrl.ref = ref;
  }
}
var config = {
  default: {
    tension: 170,
    friction: 26
  },
  gentle: {
    tension: 120,
    friction: 14
  },
  wobbly: {
    tension: 180,
    friction: 12
  },
  stiff: {
    tension: 210,
    friction: 20
  },
  slow: {
    tension: 280,
    friction: 60
  },
  molasses: {
    tension: 280,
    friction: 120
  }
};
var linear2 = (t8) => t8;
var defaults = _extends3({}, config.default, {
  mass: 1,
  damping: 1,
  easing: linear2,
  clamp: false
});
var AnimationConfig = class {
  constructor() {
    this.tension = void 0;
    this.friction = void 0;
    this.frequency = void 0;
    this.damping = void 0;
    this.mass = void 0;
    this.velocity = 0;
    this.restVelocity = void 0;
    this.precision = void 0;
    this.progress = void 0;
    this.duration = void 0;
    this.easing = void 0;
    this.clamp = void 0;
    this.bounce = void 0;
    this.decay = void 0;
    this.round = void 0;
    Object.assign(this, defaults);
  }
};
function mergeConfig(config2, newConfig, defaultConfig) {
  if (defaultConfig) {
    defaultConfig = _extends3({}, defaultConfig);
    sanitizeConfig(defaultConfig, newConfig);
    newConfig = _extends3({}, defaultConfig, newConfig);
  }
  sanitizeConfig(config2, newConfig);
  Object.assign(config2, newConfig);
  for (const key in defaults) {
    if (config2[key] == null) {
      config2[key] = defaults[key];
    }
  }
  let {
    mass,
    frequency,
    damping
  } = config2;
  if (!is.und(frequency)) {
    if (frequency < 0.01)
      frequency = 0.01;
    if (damping < 0)
      damping = 0;
    config2.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;
    config2.friction = 4 * Math.PI * damping * mass / frequency;
  }
  return config2;
}
function sanitizeConfig(config2, props) {
  if (!is.und(props.decay)) {
    config2.duration = void 0;
  } else {
    const isTensionConfig = !is.und(props.tension) || !is.und(props.friction);
    if (isTensionConfig || !is.und(props.frequency) || !is.und(props.damping) || !is.und(props.mass)) {
      config2.duration = void 0;
      config2.decay = void 0;
    }
    if (isTensionConfig) {
      config2.frequency = void 0;
    }
  }
}
var emptyArray = [];
var Animation = class {
  constructor() {
    this.changed = false;
    this.values = emptyArray;
    this.toValues = null;
    this.fromValues = emptyArray;
    this.to = void 0;
    this.from = void 0;
    this.config = new AnimationConfig();
    this.immediate = false;
  }
};
function scheduleProps(callId, {
  key,
  props,
  defaultProps,
  state,
  actions
}) {
  return new Promise((resolve, reject) => {
    var _props$cancel;
    let delay;
    let timeout;
    let cancel = matchProp((_props$cancel = props.cancel) != null ? _props$cancel : defaultProps == null ? void 0 : defaultProps.cancel, key);
    if (cancel) {
      onStart();
    } else {
      if (!is.und(props.pause)) {
        state.paused = matchProp(props.pause, key);
      }
      let pause = defaultProps == null ? void 0 : defaultProps.pause;
      if (pause !== true) {
        pause = state.paused || matchProp(pause, key);
      }
      delay = callProp(props.delay || 0, key);
      if (pause) {
        state.resumeQueue.add(onResume);
        actions.pause();
      } else {
        actions.resume();
        onResume();
      }
    }
    function onPause() {
      state.resumeQueue.add(onResume);
      state.timeouts.delete(timeout);
      timeout.cancel();
      delay = timeout.time - raf.now();
    }
    function onResume() {
      if (delay > 0 && !globals.skipAnimation) {
        timeout = raf.setTimeout(onStart, delay);
        state.pauseQueue.add(onPause);
        state.timeouts.add(timeout);
      } else {
        onStart();
      }
    }
    function onStart() {
      state.pauseQueue.delete(onPause);
      state.timeouts.delete(timeout);
      if (callId <= (state.cancelId || 0)) {
        cancel = true;
      }
      try {
        actions.start(_extends3({}, props, {
          callId,
          cancel
        }), resolve);
      } catch (err) {
        reject(err);
      }
    }
  });
}
var getCombinedResult = (target, results) => results.length == 1 ? results[0] : results.some((result) => result.cancelled) ? getCancelledResult(target.get()) : results.every((result) => result.noop) ? getNoopResult(target.get()) : getFinishedResult(target.get(), results.every((result) => result.finished));
var getNoopResult = (value) => ({
  value,
  noop: true,
  finished: true,
  cancelled: false
});
var getFinishedResult = (value, finished, cancelled = false) => ({
  value,
  finished,
  cancelled
});
var getCancelledResult = (value) => ({
  value,
  cancelled: true,
  finished: false
});
function runAsync(to2, props, state, target) {
  const {
    callId,
    parentId,
    onRest
  } = props;
  const {
    asyncTo: prevTo,
    promise: prevPromise
  } = state;
  if (!parentId && to2 === prevTo && !props.reset) {
    return prevPromise;
  }
  return state.promise = (async () => {
    state.asyncId = callId;
    state.asyncTo = to2;
    const defaultProps = getDefaultProps(props, (value, key) => key === "onRest" ? void 0 : value);
    let preventBail;
    let bail;
    const bailPromise = new Promise((resolve, reject) => (preventBail = resolve, bail = reject));
    const bailIfEnded = (bailSignal) => {
      const bailResult = callId <= (state.cancelId || 0) && getCancelledResult(target) || callId !== state.asyncId && getFinishedResult(target, false);
      if (bailResult) {
        bailSignal.result = bailResult;
        bail(bailSignal);
        throw bailSignal;
      }
    };
    const animate = (arg1, arg2) => {
      const bailSignal = new BailSignal();
      const skipAnimationSignal = new SkipAniamtionSignal();
      return (async () => {
        if (globals.skipAnimation) {
          stopAsync(state);
          skipAnimationSignal.result = getFinishedResult(target, false);
          bail(skipAnimationSignal);
          throw skipAnimationSignal;
        }
        bailIfEnded(bailSignal);
        const props2 = is.obj(arg1) ? _extends3({}, arg1) : _extends3({}, arg2, {
          to: arg1
        });
        props2.parentId = callId;
        eachProp(defaultProps, (value, key) => {
          if (is.und(props2[key])) {
            props2[key] = value;
          }
        });
        const result2 = await target.start(props2);
        bailIfEnded(bailSignal);
        if (state.paused) {
          await new Promise((resume) => {
            state.resumeQueue.add(resume);
          });
        }
        return result2;
      })();
    };
    let result;
    if (globals.skipAnimation) {
      stopAsync(state);
      return getFinishedResult(target, false);
    }
    try {
      let animating;
      if (is.arr(to2)) {
        animating = (async (queue) => {
          for (const props2 of queue) {
            await animate(props2);
          }
        })(to2);
      } else {
        animating = Promise.resolve(to2(animate, target.stop.bind(target)));
      }
      await Promise.all([animating.then(preventBail), bailPromise]);
      result = getFinishedResult(target.get(), true, false);
    } catch (err) {
      if (err instanceof BailSignal) {
        result = err.result;
      } else if (err instanceof SkipAniamtionSignal) {
        result = err.result;
      } else {
        throw err;
      }
    } finally {
      if (callId == state.asyncId) {
        state.asyncId = parentId;
        state.asyncTo = parentId ? prevTo : void 0;
        state.promise = parentId ? prevPromise : void 0;
      }
    }
    if (is.fun(onRest)) {
      raf.batchedUpdates(() => {
        onRest(result, target, target.item);
      });
    }
    return result;
  })();
}
function stopAsync(state, cancelId) {
  flush(state.timeouts, (t8) => t8.cancel());
  state.pauseQueue.clear();
  state.resumeQueue.clear();
  state.asyncId = state.asyncTo = state.promise = void 0;
  if (cancelId)
    state.cancelId = cancelId;
}
var BailSignal = class extends Error {
  constructor() {
    super("An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise.");
    this.result = void 0;
  }
};
var SkipAniamtionSignal = class extends Error {
  constructor() {
    super("SkipAnimationSignal");
    this.result = void 0;
  }
};
var isFrameValue = (value) => value instanceof FrameValue;
var nextId$1 = 1;
var FrameValue = class extends FluidValue {
  constructor(...args) {
    super(...args);
    this.id = nextId$1++;
    this.key = void 0;
    this._priority = 0;
  }
  get priority() {
    return this._priority;
  }
  set priority(priority2) {
    if (this._priority != priority2) {
      this._priority = priority2;
      this._onPriorityChange(priority2);
    }
  }
  get() {
    const node = getAnimated(this);
    return node && node.getValue();
  }
  to(...args) {
    return globals.to(this, args);
  }
  interpolate(...args) {
    deprecateInterpolate();
    return globals.to(this, args);
  }
  toJSON() {
    return this.get();
  }
  observerAdded(count) {
    if (count == 1)
      this._attach();
  }
  observerRemoved(count) {
    if (count == 0)
      this._detach();
  }
  _attach() {
  }
  _detach() {
  }
  _onChange(value, idle = false) {
    callFluidObservers(this, {
      type: "change",
      parent: this,
      value,
      idle
    });
  }
  _onPriorityChange(priority2) {
    if (!this.idle) {
      frameLoop.sort(this);
    }
    callFluidObservers(this, {
      type: "priority",
      parent: this,
      priority: priority2
    });
  }
};
var $P = Symbol.for("SpringPhase");
var HAS_ANIMATED = 1;
var IS_ANIMATING = 2;
var IS_PAUSED = 4;
var hasAnimated = (target) => (target[$P] & HAS_ANIMATED) > 0;
var isAnimating = (target) => (target[$P] & IS_ANIMATING) > 0;
var isPaused = (target) => (target[$P] & IS_PAUSED) > 0;
var setActiveBit = (target, active) => active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;
var setPausedBit = (target, paused) => paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;
var SpringValue = class extends FrameValue {
  constructor(arg1, arg2) {
    super();
    this.key = void 0;
    this.animation = new Animation();
    this.queue = void 0;
    this.defaultProps = {};
    this._state = {
      paused: false,
      pauseQueue: /* @__PURE__ */ new Set(),
      resumeQueue: /* @__PURE__ */ new Set(),
      timeouts: /* @__PURE__ */ new Set()
    };
    this._pendingCalls = /* @__PURE__ */ new Set();
    this._lastCallId = 0;
    this._lastToId = 0;
    this._memoizedDuration = 0;
    if (!is.und(arg1) || !is.und(arg2)) {
      const props = is.obj(arg1) ? _extends3({}, arg1) : _extends3({}, arg2, {
        from: arg1
      });
      if (is.und(props.default)) {
        props.default = true;
      }
      this.start(props);
    }
  }
  get idle() {
    return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);
  }
  get goal() {
    return getFluidValue(this.animation.to);
  }
  get velocity() {
    const node = getAnimated(this);
    return node instanceof AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map((node2) => node2.lastVelocity || 0);
  }
  get hasAnimated() {
    return hasAnimated(this);
  }
  get isAnimating() {
    return isAnimating(this);
  }
  get isPaused() {
    return isPaused(this);
  }
  advance(dt) {
    let idle = true;
    let changed = false;
    const anim = this.animation;
    let {
      config: config2,
      toValues
    } = anim;
    const payload = getPayload(anim.to);
    if (!payload && hasFluidValue(anim.to)) {
      toValues = toArray(getFluidValue(anim.to));
    }
    anim.values.forEach((node2, i4) => {
      if (node2.done)
        return;
      const to2 = node2.constructor == AnimatedString ? 1 : payload ? payload[i4].lastPosition : toValues[i4];
      let finished = anim.immediate;
      let position = to2;
      if (!finished) {
        position = node2.lastPosition;
        if (config2.tension <= 0) {
          node2.done = true;
          return;
        }
        let elapsed = node2.elapsedTime += dt;
        const from = anim.fromValues[i4];
        const v0 = node2.v0 != null ? node2.v0 : node2.v0 = is.arr(config2.velocity) ? config2.velocity[i4] : config2.velocity;
        let velocity;
        if (!is.und(config2.duration)) {
          let p4 = 1;
          if (config2.duration > 0) {
            if (this._memoizedDuration !== config2.duration) {
              this._memoizedDuration = config2.duration;
              if (node2.durationProgress > 0) {
                node2.elapsedTime = config2.duration * node2.durationProgress;
                elapsed = node2.elapsedTime += dt;
              }
            }
            p4 = (config2.progress || 0) + elapsed / this._memoizedDuration;
            p4 = p4 > 1 ? 1 : p4 < 0 ? 0 : p4;
            node2.durationProgress = p4;
          }
          position = from + config2.easing(p4) * (to2 - from);
          velocity = (position - node2.lastPosition) / dt;
          finished = p4 == 1;
        } else if (config2.decay) {
          const decay = config2.decay === true ? 0.998 : config2.decay;
          const e6 = Math.exp(-(1 - decay) * elapsed);
          position = from + v0 / (1 - decay) * (1 - e6);
          finished = Math.abs(node2.lastPosition - position) < 0.1;
          velocity = v0 * e6;
        } else {
          velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;
          const precision = config2.precision || (from == to2 ? 5e-3 : Math.min(1, Math.abs(to2 - from) * 1e-3));
          const restVelocity = config2.restVelocity || precision / 10;
          const bounceFactor = config2.clamp ? 0 : config2.bounce;
          const canBounce = !is.und(bounceFactor);
          const isGrowing = from == to2 ? node2.v0 > 0 : from < to2;
          let isMoving;
          let isBouncing = false;
          const step = 1;
          const numSteps = Math.ceil(dt / step);
          for (let n5 = 0; n5 < numSteps; ++n5) {
            isMoving = Math.abs(velocity) > restVelocity;
            if (!isMoving) {
              finished = Math.abs(to2 - position) <= precision;
              if (finished) {
                break;
              }
            }
            if (canBounce) {
              isBouncing = position == to2 || position > to2 == isGrowing;
              if (isBouncing) {
                velocity = -velocity * bounceFactor;
                position = to2;
              }
            }
            const springForce = -config2.tension * 1e-6 * (position - to2);
            const dampingForce = -config2.friction * 1e-3 * velocity;
            const acceleration = (springForce + dampingForce) / config2.mass;
            velocity = velocity + acceleration * step;
            position = position + velocity * step;
          }
        }
        node2.lastVelocity = velocity;
        if (Number.isNaN(position)) {
          console.warn(`Got NaN while animating:`, this);
          finished = true;
        }
      }
      if (payload && !payload[i4].done) {
        finished = false;
      }
      if (finished) {
        node2.done = true;
      } else {
        idle = false;
      }
      if (node2.setValue(position, config2.round)) {
        changed = true;
      }
    });
    const node = getAnimated(this);
    const currVal = node.getValue();
    if (idle) {
      const finalVal = getFluidValue(anim.to);
      if ((currVal !== finalVal || changed) && !config2.decay) {
        node.setValue(finalVal);
        this._onChange(finalVal);
      } else if (changed && config2.decay) {
        this._onChange(currVal);
      }
      this._stop();
    } else if (changed) {
      this._onChange(currVal);
    }
  }
  set(value) {
    raf.batchedUpdates(() => {
      this._stop();
      this._focus(value);
      this._set(value);
    });
    return this;
  }
  pause() {
    this._update({
      pause: true
    });
  }
  resume() {
    this._update({
      pause: false
    });
  }
  finish() {
    if (isAnimating(this)) {
      const {
        to: to2,
        config: config2
      } = this.animation;
      raf.batchedUpdates(() => {
        this._onStart();
        if (!config2.decay) {
          this._set(to2, false);
        }
        this._stop();
      });
    }
    return this;
  }
  update(props) {
    const queue = this.queue || (this.queue = []);
    queue.push(props);
    return this;
  }
  start(to2, arg2) {
    let queue;
    if (!is.und(to2)) {
      queue = [is.obj(to2) ? to2 : _extends3({}, arg2, {
        to: to2
      })];
    } else {
      queue = this.queue || [];
      this.queue = [];
    }
    return Promise.all(queue.map((props) => this._update(props))).then((results) => getCombinedResult(this, results));
  }
  stop(cancel) {
    const {
      to: to2
    } = this.animation;
    this._focus(this.get());
    stopAsync(this._state, cancel && this._lastCallId);
    raf.batchedUpdates(() => this._stop(to2, cancel));
    return this;
  }
  reset() {
    this._update({
      reset: true
    });
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._start();
    } else if (event.type == "priority") {
      this.priority = event.priority + 1;
    }
  }
  _prepareNode(props) {
    const key = this.key || "";
    let {
      to: to2,
      from
    } = props;
    to2 = is.obj(to2) ? to2[key] : to2;
    if (to2 == null || isAsyncTo(to2)) {
      to2 = void 0;
    }
    from = is.obj(from) ? from[key] : from;
    if (from == null) {
      from = void 0;
    }
    const range = {
      to: to2,
      from
    };
    if (!hasAnimated(this)) {
      if (props.reverse)
        [to2, from] = [from, to2];
      from = getFluidValue(from);
      if (!is.und(from)) {
        this._set(from);
      } else if (!getAnimated(this)) {
        this._set(to2);
      }
    }
    return range;
  }
  _update(_ref, isLoop) {
    let props = _extends3({}, _ref);
    const {
      key,
      defaultProps
    } = this;
    if (props.default)
      Object.assign(defaultProps, getDefaultProps(props, (value, prop) => /^on/.test(prop) ? resolveProp(value, key) : value));
    mergeActiveFn(this, props, "onProps");
    sendEvent(this, "onProps", props, this);
    const range = this._prepareNode(props);
    if (Object.isFrozen(this)) {
      throw Error("Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?");
    }
    const state = this._state;
    return scheduleProps(++this._lastCallId, {
      key,
      props,
      defaultProps,
      state,
      actions: {
        pause: () => {
          if (!isPaused(this)) {
            setPausedBit(this, true);
            flushCalls(state.pauseQueue);
            sendEvent(this, "onPause", getFinishedResult(this, checkFinished(this, this.animation.to)), this);
          }
        },
        resume: () => {
          if (isPaused(this)) {
            setPausedBit(this, false);
            if (isAnimating(this)) {
              this._resume();
            }
            flushCalls(state.resumeQueue);
            sendEvent(this, "onResume", getFinishedResult(this, checkFinished(this, this.animation.to)), this);
          }
        },
        start: this._merge.bind(this, range)
      }
    }).then((result) => {
      if (props.loop && result.finished && !(isLoop && result.noop)) {
        const nextProps = createLoopUpdate(props);
        if (nextProps) {
          return this._update(nextProps, true);
        }
      }
      return result;
    });
  }
  _merge(range, props, resolve) {
    if (props.cancel) {
      this.stop(true);
      return resolve(getCancelledResult(this));
    }
    const hasToProp = !is.und(range.to);
    const hasFromProp = !is.und(range.from);
    if (hasToProp || hasFromProp) {
      if (props.callId > this._lastToId) {
        this._lastToId = props.callId;
      } else {
        return resolve(getCancelledResult(this));
      }
    }
    const {
      key,
      defaultProps,
      animation: anim
    } = this;
    const {
      to: prevTo,
      from: prevFrom
    } = anim;
    let {
      to: to2 = prevTo,
      from = prevFrom
    } = range;
    if (hasFromProp && !hasToProp && (!props.default || is.und(to2))) {
      to2 = from;
    }
    if (props.reverse)
      [to2, from] = [from, to2];
    const hasFromChanged = !isEqual(from, prevFrom);
    if (hasFromChanged) {
      anim.from = from;
    }
    from = getFluidValue(from);
    const hasToChanged = !isEqual(to2, prevTo);
    if (hasToChanged) {
      this._focus(to2);
    }
    const hasAsyncTo = isAsyncTo(props.to);
    const {
      config: config2
    } = anim;
    const {
      decay,
      velocity
    } = config2;
    if (hasToProp || hasFromProp) {
      config2.velocity = 0;
    }
    if (props.config && !hasAsyncTo) {
      mergeConfig(config2, callProp(props.config, key), props.config !== defaultProps.config ? callProp(defaultProps.config, key) : void 0);
    }
    let node = getAnimated(this);
    if (!node || is.und(to2)) {
      return resolve(getFinishedResult(this, true));
    }
    const reset = is.und(props.reset) ? hasFromProp && !props.default : !is.und(from) && matchProp(props.reset, key);
    const value = reset ? from : this.get();
    const goal = computeGoal(to2);
    const isAnimatable = is.num(goal) || is.arr(goal) || isAnimatedString(goal);
    const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key));
    if (hasToChanged) {
      const nodeType = getAnimatedType(to2);
      if (nodeType !== node.constructor) {
        if (immediate) {
          node = this._set(goal);
        } else
          throw Error(`Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the "to" prop suggests`);
      }
    }
    const goalType = node.constructor;
    let started = hasFluidValue(to2);
    let finished = false;
    if (!started) {
      const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;
      if (hasToChanged || hasValueChanged) {
        finished = isEqual(computeGoal(value), goal);
        started = !finished;
      }
      if (!isEqual(anim.immediate, immediate) && !immediate || !isEqual(config2.decay, decay) || !isEqual(config2.velocity, velocity)) {
        started = true;
      }
    }
    if (finished && isAnimating(this)) {
      if (anim.changed && !reset) {
        started = true;
      } else if (!started) {
        this._stop(prevTo);
      }
    }
    if (!hasAsyncTo) {
      if (started || hasFluidValue(prevTo)) {
        anim.values = node.getPayload();
        anim.toValues = hasFluidValue(to2) ? null : goalType == AnimatedString ? [1] : toArray(goal);
      }
      if (anim.immediate != immediate) {
        anim.immediate = immediate;
        if (!immediate && !reset) {
          this._set(prevTo);
        }
      }
      if (started) {
        const {
          onRest
        } = anim;
        each(ACTIVE_EVENTS, (type) => mergeActiveFn(this, props, type));
        const result = getFinishedResult(this, checkFinished(this, prevTo));
        flushCalls(this._pendingCalls, result);
        this._pendingCalls.add(resolve);
        if (anim.changed)
          raf.batchedUpdates(() => {
            anim.changed = !reset;
            onRest == null ? void 0 : onRest(result, this);
            if (reset) {
              callProp(defaultProps.onRest, result);
            } else {
              anim.onStart == null ? void 0 : anim.onStart(result, this);
            }
          });
      }
    }
    if (reset) {
      this._set(value);
    }
    if (hasAsyncTo) {
      resolve(runAsync(props.to, props, this._state, this));
    } else if (started) {
      this._start();
    } else if (isAnimating(this) && !hasToChanged) {
      this._pendingCalls.add(resolve);
    } else {
      resolve(getNoopResult(value));
    }
  }
  _focus(value) {
    const anim = this.animation;
    if (value !== anim.to) {
      if (getFluidObservers(this)) {
        this._detach();
      }
      anim.to = value;
      if (getFluidObservers(this)) {
        this._attach();
      }
    }
  }
  _attach() {
    let priority2 = 0;
    const {
      to: to2
    } = this.animation;
    if (hasFluidValue(to2)) {
      addFluidObserver(to2, this);
      if (isFrameValue(to2)) {
        priority2 = to2.priority + 1;
      }
    }
    this.priority = priority2;
  }
  _detach() {
    const {
      to: to2
    } = this.animation;
    if (hasFluidValue(to2)) {
      removeFluidObserver(to2, this);
    }
  }
  _set(arg, idle = true) {
    const value = getFluidValue(arg);
    if (!is.und(value)) {
      const oldNode = getAnimated(this);
      if (!oldNode || !isEqual(value, oldNode.getValue())) {
        const nodeType = getAnimatedType(value);
        if (!oldNode || oldNode.constructor != nodeType) {
          setAnimated(this, nodeType.create(value));
        } else {
          oldNode.setValue(value);
        }
        if (oldNode) {
          raf.batchedUpdates(() => {
            this._onChange(value, idle);
          });
        }
      }
    }
    return getAnimated(this);
  }
  _onStart() {
    const anim = this.animation;
    if (!anim.changed) {
      anim.changed = true;
      sendEvent(this, "onStart", getFinishedResult(this, checkFinished(this, anim.to)), this);
    }
  }
  _onChange(value, idle) {
    if (!idle) {
      this._onStart();
      callProp(this.animation.onChange, value, this);
    }
    callProp(this.defaultProps.onChange, value, this);
    super._onChange(value, idle);
  }
  _start() {
    const anim = this.animation;
    getAnimated(this).reset(getFluidValue(anim.to));
    if (!anim.immediate) {
      anim.fromValues = anim.values.map((node) => node.lastPosition);
    }
    if (!isAnimating(this)) {
      setActiveBit(this, true);
      if (!isPaused(this)) {
        this._resume();
      }
    }
  }
  _resume() {
    if (globals.skipAnimation) {
      this.finish();
    } else {
      frameLoop.start(this);
    }
  }
  _stop(goal, cancel) {
    if (isAnimating(this)) {
      setActiveBit(this, false);
      const anim = this.animation;
      each(anim.values, (node) => {
        node.done = true;
      });
      if (anim.toValues) {
        anim.onChange = anim.onPause = anim.onResume = void 0;
      }
      callFluidObservers(this, {
        type: "idle",
        parent: this
      });
      const result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal != null ? goal : anim.to));
      flushCalls(this._pendingCalls, result);
      if (anim.changed) {
        anim.changed = false;
        sendEvent(this, "onRest", result, this);
      }
    }
  }
};
function checkFinished(target, to2) {
  const goal = computeGoal(to2);
  const value = computeGoal(target.get());
  return isEqual(value, goal);
}
function createLoopUpdate(props, loop2 = props.loop, to2 = props.to) {
  let loopRet = callProp(loop2);
  if (loopRet) {
    const overrides = loopRet !== true && inferTo(loopRet);
    const reverse = (overrides || props).reverse;
    const reset = !overrides || overrides.reset;
    return createUpdate(_extends3({}, props, {
      loop: loop2,
      default: false,
      pause: void 0,
      to: !reverse || isAsyncTo(to2) ? to2 : void 0,
      from: reset ? props.from : void 0,
      reset
    }, overrides));
  }
}
function createUpdate(props) {
  const {
    to: to2,
    from
  } = props = inferTo(props);
  const keys = /* @__PURE__ */ new Set();
  if (is.obj(to2))
    findDefined(to2, keys);
  if (is.obj(from))
    findDefined(from, keys);
  props.keys = keys.size ? Array.from(keys) : null;
  return props;
}
function declareUpdate(props) {
  const update3 = createUpdate(props);
  if (is.und(update3.default)) {
    update3.default = getDefaultProps(update3);
  }
  return update3;
}
function findDefined(values, keys) {
  eachProp(values, (value, key) => value != null && keys.add(key));
}
var ACTIVE_EVENTS = ["onStart", "onRest", "onChange", "onPause", "onResume"];
function mergeActiveFn(target, props, type) {
  target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : void 0;
}
function sendEvent(target, type, ...args) {
  var _target$animation$typ, _target$animation, _target$defaultProps$, _target$defaultProps;
  (_target$animation$typ = (_target$animation = target.animation)[type]) == null ? void 0 : _target$animation$typ.call(_target$animation, ...args);
  (_target$defaultProps$ = (_target$defaultProps = target.defaultProps)[type]) == null ? void 0 : _target$defaultProps$.call(_target$defaultProps, ...args);
}
var BATCHED_EVENTS = ["onStart", "onChange", "onRest"];
var nextId = 1;
var Controller = class {
  constructor(props, flush2) {
    this.id = nextId++;
    this.springs = {};
    this.queue = [];
    this.ref = void 0;
    this._flush = void 0;
    this._initialProps = void 0;
    this._lastAsyncId = 0;
    this._active = /* @__PURE__ */ new Set();
    this._changed = /* @__PURE__ */ new Set();
    this._started = false;
    this._item = void 0;
    this._state = {
      paused: false,
      pauseQueue: /* @__PURE__ */ new Set(),
      resumeQueue: /* @__PURE__ */ new Set(),
      timeouts: /* @__PURE__ */ new Set()
    };
    this._events = {
      onStart: /* @__PURE__ */ new Map(),
      onChange: /* @__PURE__ */ new Map(),
      onRest: /* @__PURE__ */ new Map()
    };
    this._onFrame = this._onFrame.bind(this);
    if (flush2) {
      this._flush = flush2;
    }
    if (props) {
      this.start(_extends3({
        default: true
      }, props));
    }
  }
  get idle() {
    return !this._state.asyncTo && Object.values(this.springs).every((spring) => spring.idle);
  }
  get item() {
    return this._item;
  }
  set item(item) {
    this._item = item;
  }
  get() {
    const values = {};
    this.each((spring, key) => values[key] = spring.get());
    return values;
  }
  set(values) {
    for (const key in values) {
      const value = values[key];
      if (!is.und(value)) {
        this.springs[key].set(value);
      }
    }
  }
  update(props) {
    if (props) {
      this.queue.push(createUpdate(props));
    }
    return this;
  }
  start(props) {
    let {
      queue
    } = this;
    if (props) {
      queue = toArray(props).map(createUpdate);
    } else {
      this.queue = [];
    }
    if (this._flush) {
      return this._flush(this, queue);
    }
    prepareKeys(this, queue);
    return flushUpdateQueue(this, queue);
  }
  stop(arg, keys) {
    if (arg !== !!arg) {
      keys = arg;
    }
    if (keys) {
      const springs = this.springs;
      each(toArray(keys), (key) => springs[key].stop(!!arg));
    } else {
      stopAsync(this._state, this._lastAsyncId);
      this.each((spring) => spring.stop(!!arg));
    }
    return this;
  }
  pause(keys) {
    if (is.und(keys)) {
      this.start({
        pause: true
      });
    } else {
      const springs = this.springs;
      each(toArray(keys), (key) => springs[key].pause());
    }
    return this;
  }
  resume(keys) {
    if (is.und(keys)) {
      this.start({
        pause: false
      });
    } else {
      const springs = this.springs;
      each(toArray(keys), (key) => springs[key].resume());
    }
    return this;
  }
  each(iterator) {
    eachProp(this.springs, iterator);
  }
  _onFrame() {
    const {
      onStart,
      onChange,
      onRest
    } = this._events;
    const active = this._active.size > 0;
    const changed = this._changed.size > 0;
    if (active && !this._started || changed && !this._started) {
      this._started = true;
      flush(onStart, ([onStart2, result]) => {
        result.value = this.get();
        onStart2(result, this, this._item);
      });
    }
    const idle = !active && this._started;
    const values = changed || idle && onRest.size ? this.get() : null;
    if (changed && onChange.size) {
      flush(onChange, ([onChange2, result]) => {
        result.value = values;
        onChange2(result, this, this._item);
      });
    }
    if (idle) {
      this._started = false;
      flush(onRest, ([onRest2, result]) => {
        result.value = values;
        onRest2(result, this, this._item);
      });
    }
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._changed.add(event.parent);
      if (!event.idle) {
        this._active.add(event.parent);
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else
      return;
    raf.onFrame(this._onFrame);
  }
};
function flushUpdateQueue(ctrl, queue) {
  return Promise.all(queue.map((props) => flushUpdate(ctrl, props))).then((results) => getCombinedResult(ctrl, results));
}
async function flushUpdate(ctrl, props, isLoop) {
  const {
    keys,
    to: to2,
    from,
    loop: loop2,
    onRest,
    onResolve
  } = props;
  const defaults2 = is.obj(props.default) && props.default;
  if (loop2) {
    props.loop = false;
  }
  if (to2 === false)
    props.to = null;
  if (from === false)
    props.from = null;
  const asyncTo = is.arr(to2) || is.fun(to2) ? to2 : void 0;
  if (asyncTo) {
    props.to = void 0;
    props.onRest = void 0;
    if (defaults2) {
      defaults2.onRest = void 0;
    }
  } else {
    each(BATCHED_EVENTS, (key) => {
      const handler = props[key];
      if (is.fun(handler)) {
        const queue = ctrl["_events"][key];
        props[key] = ({
          finished,
          cancelled
        }) => {
          const result2 = queue.get(handler);
          if (result2) {
            if (!finished)
              result2.finished = false;
            if (cancelled)
              result2.cancelled = true;
          } else {
            queue.set(handler, {
              value: null,
              finished: finished || false,
              cancelled: cancelled || false
            });
          }
        };
        if (defaults2) {
          defaults2[key] = props[key];
        }
      }
    });
  }
  const state = ctrl["_state"];
  if (props.pause === !state.paused) {
    state.paused = props.pause;
    flushCalls(props.pause ? state.pauseQueue : state.resumeQueue);
  } else if (state.paused) {
    props.pause = true;
  }
  const promises = (keys || Object.keys(ctrl.springs)).map((key) => ctrl.springs[key].start(props));
  const cancel = props.cancel === true || getDefaultProp(props, "cancel") === true;
  if (asyncTo || cancel && state.asyncId) {
    promises.push(scheduleProps(++ctrl["_lastAsyncId"], {
      props,
      state,
      actions: {
        pause: noop,
        resume: noop,
        start(props2, resolve) {
          if (cancel) {
            stopAsync(state, ctrl["_lastAsyncId"]);
            resolve(getCancelledResult(ctrl));
          } else {
            props2.onRest = onRest;
            resolve(runAsync(asyncTo, props2, state, ctrl));
          }
        }
      }
    }));
  }
  if (state.paused) {
    await new Promise((resume) => {
      state.resumeQueue.add(resume);
    });
  }
  const result = getCombinedResult(ctrl, await Promise.all(promises));
  if (loop2 && result.finished && !(isLoop && result.noop)) {
    const nextProps = createLoopUpdate(props, loop2, to2);
    if (nextProps) {
      prepareKeys(ctrl, [nextProps]);
      return flushUpdate(ctrl, nextProps, true);
    }
  }
  if (onResolve) {
    raf.batchedUpdates(() => onResolve(result, ctrl, ctrl.item));
  }
  return result;
}
function getSprings(ctrl, props) {
  const springs = _extends3({}, ctrl.springs);
  if (props) {
    each(toArray(props), (props2) => {
      if (is.und(props2.keys)) {
        props2 = createUpdate(props2);
      }
      if (!is.obj(props2.to)) {
        props2 = _extends3({}, props2, {
          to: void 0
        });
      }
      prepareSprings(springs, props2, (key) => {
        return createSpring(key);
      });
    });
  }
  setSprings(ctrl, springs);
  return springs;
}
function setSprings(ctrl, springs) {
  eachProp(springs, (spring, key) => {
    if (!ctrl.springs[key]) {
      ctrl.springs[key] = spring;
      addFluidObserver(spring, ctrl);
    }
  });
}
function createSpring(key, observer) {
  const spring = new SpringValue();
  spring.key = key;
  if (observer) {
    addFluidObserver(spring, observer);
  }
  return spring;
}
function prepareSprings(springs, props, create) {
  if (props.keys) {
    each(props.keys, (key) => {
      const spring = springs[key] || (springs[key] = create(key));
      spring["_prepareNode"](props);
    });
  }
}
function prepareKeys(ctrl, queue) {
  each(queue, (props) => {
    prepareSprings(ctrl.springs, props, (key) => {
      return createSpring(key, ctrl);
    });
  });
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i4;
  for (i4 = 0; i4 < sourceKeys.length; i4++) {
    key = sourceKeys[i4];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$3 = ["children"];
var SpringContext = (_ref) => {
  let {
    children
  } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded$3);
  const inherited = (0, import_react4.useContext)(ctx);
  const pause = props.pause || !!inherited.pause, immediate = props.immediate || !!inherited.immediate;
  props = useMemoOne(() => ({
    pause,
    immediate
  }), [pause, immediate]);
  const {
    Provider
  } = ctx;
  return React3.createElement(Provider, {
    value: props
  }, children);
};
var ctx = makeContext(SpringContext, {});
SpringContext.Provider = ctx.Provider;
SpringContext.Consumer = ctx.Consumer;
function makeContext(target, init) {
  Object.assign(target, React3.createContext(init));
  target.Provider._context = target;
  target.Consumer._context = target;
  return target;
}
var SpringRef = () => {
  const current = [];
  const SpringRef2 = function SpringRef3(props) {
    deprecateDirectCall();
    const results = [];
    each(current, (ctrl, i4) => {
      if (is.und(props)) {
        results.push(ctrl.start());
      } else {
        const update3 = _getProps(props, ctrl, i4);
        if (update3) {
          results.push(ctrl.start(update3));
        }
      }
    });
    return results;
  };
  SpringRef2.current = current;
  SpringRef2.add = function(ctrl) {
    if (!current.includes(ctrl)) {
      current.push(ctrl);
    }
  };
  SpringRef2.delete = function(ctrl) {
    const i4 = current.indexOf(ctrl);
    if (~i4)
      current.splice(i4, 1);
  };
  SpringRef2.pause = function() {
    each(current, (ctrl) => ctrl.pause(...arguments));
    return this;
  };
  SpringRef2.resume = function() {
    each(current, (ctrl) => ctrl.resume(...arguments));
    return this;
  };
  SpringRef2.set = function(values) {
    each(current, (ctrl) => ctrl.set(values));
  };
  SpringRef2.start = function(props) {
    const results = [];
    each(current, (ctrl, i4) => {
      if (is.und(props)) {
        results.push(ctrl.start());
      } else {
        const update3 = this._getProps(props, ctrl, i4);
        if (update3) {
          results.push(ctrl.start(update3));
        }
      }
    });
    return results;
  };
  SpringRef2.stop = function() {
    each(current, (ctrl) => ctrl.stop(...arguments));
    return this;
  };
  SpringRef2.update = function(props) {
    each(current, (ctrl, i4) => ctrl.update(this._getProps(props, ctrl, i4)));
    return this;
  };
  const _getProps = function _getProps2(arg, ctrl, index) {
    return is.fun(arg) ? arg(index, ctrl) : arg;
  };
  SpringRef2._getProps = _getProps;
  return SpringRef2;
};
function useSprings(length, props, deps) {
  const propsFn = is.fun(props) && props;
  if (propsFn && !deps)
    deps = [];
  const ref = (0, import_react4.useMemo)(() => propsFn || arguments.length == 3 ? SpringRef() : void 0, []);
  const layoutId = (0, import_react4.useRef)(0);
  const forceUpdate = useForceUpdate();
  const state = (0, import_react4.useMemo)(() => ({
    ctrls: [],
    queue: [],
    flush(ctrl, updates2) {
      const springs2 = getSprings(ctrl, updates2);
      const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some((key) => !ctrl.springs[key]);
      return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise((resolve) => {
        setSprings(ctrl, springs2);
        state.queue.push(() => {
          resolve(flushUpdateQueue(ctrl, updates2));
        });
        forceUpdate();
      });
    }
  }), []);
  const ctrls = (0, import_react4.useRef)([...state.ctrls]);
  const updates = [];
  const prevLength = usePrev(length) || 0;
  (0, import_react4.useMemo)(() => {
    each(ctrls.current.slice(length, prevLength), (ctrl) => {
      detachRefs(ctrl, ref);
      ctrl.stop(true);
    });
    ctrls.current.length = length;
    declareUpdates(prevLength, length);
  }, [length]);
  (0, import_react4.useMemo)(() => {
    declareUpdates(0, Math.min(prevLength, length));
  }, deps);
  function declareUpdates(startIndex, endIndex) {
    for (let i4 = startIndex; i4 < endIndex; i4++) {
      const ctrl = ctrls.current[i4] || (ctrls.current[i4] = new Controller(null, state.flush));
      const update3 = propsFn ? propsFn(i4, ctrl) : props[i4];
      if (update3) {
        updates[i4] = declareUpdate(update3);
      }
    }
  }
  const springs = ctrls.current.map((ctrl, i4) => getSprings(ctrl, updates[i4]));
  const context = (0, import_react4.useContext)(SpringContext);
  const prevContext = usePrev(context);
  const hasContext = context !== prevContext && hasProps(context);
  useLayoutEffect2(() => {
    layoutId.current++;
    state.ctrls = ctrls.current;
    const {
      queue
    } = state;
    if (queue.length) {
      state.queue = [];
      each(queue, (cb) => cb());
    }
    each(ctrls.current, (ctrl, i4) => {
      ref == null ? void 0 : ref.add(ctrl);
      if (hasContext) {
        ctrl.start({
          default: context
        });
      }
      const update3 = updates[i4];
      if (update3) {
        replaceRef(ctrl, update3.ref);
        if (ctrl.ref) {
          ctrl.queue.push(update3);
        } else {
          ctrl.start(update3);
        }
      }
    });
  });
  useOnce(() => () => {
    each(state.ctrls, (ctrl) => ctrl.stop(true));
  });
  const values = springs.map((x3) => _extends3({}, x3));
  return ref ? [values, ref] : values;
}
function useSpring(props, deps) {
  const isFn = is.fun(props);
  const [[values], ref] = useSprings(1, isFn ? props : [props], isFn ? deps || [] : deps);
  return isFn || arguments.length == 2 ? [values, ref] : values;
}
var TransitionPhase;
(function(TransitionPhase2) {
  TransitionPhase2["MOUNT"] = "mount";
  TransitionPhase2["ENTER"] = "enter";
  TransitionPhase2["UPDATE"] = "update";
  TransitionPhase2["LEAVE"] = "leave";
})(TransitionPhase || (TransitionPhase = {}));
function useTransition(data, props, deps) {
  const propsFn = is.fun(props) && props;
  const {
    reset,
    sort,
    trail = 0,
    expires = true,
    onDestroyed,
    ref: propsRef,
    config: propsConfig
  } = propsFn ? propsFn() : props;
  const ref = (0, import_react4.useMemo)(() => propsFn || arguments.length == 3 ? SpringRef() : void 0, []);
  const items = toArray(data);
  const transitions = [];
  const usedTransitions = (0, import_react4.useRef)(null);
  const prevTransitions = reset ? null : usedTransitions.current;
  useLayoutEffect2(() => {
    usedTransitions.current = transitions;
  });
  useOnce(() => () => each(usedTransitions.current, (t8) => {
    if (t8.expired) {
      clearTimeout(t8.expirationId);
    }
    detachRefs(t8.ctrl, ref);
    t8.ctrl.stop(true);
  }));
  const keys = getKeys(items, propsFn ? propsFn() : props, prevTransitions);
  const expired = reset && usedTransitions.current || [];
  useLayoutEffect2(() => each(expired, ({
    ctrl,
    item,
    key
  }) => {
    detachRefs(ctrl, ref);
    callProp(onDestroyed, item, key);
  }));
  const reused = [];
  if (prevTransitions)
    each(prevTransitions, (t8, i4) => {
      if (t8.expired) {
        clearTimeout(t8.expirationId);
        expired.push(t8);
      } else {
        i4 = reused[i4] = keys.indexOf(t8.key);
        if (~i4)
          transitions[i4] = t8;
      }
    });
  each(items, (item, i4) => {
    if (!transitions[i4]) {
      transitions[i4] = {
        key: keys[i4],
        item,
        phase: TransitionPhase.MOUNT,
        ctrl: new Controller()
      };
      transitions[i4].ctrl.item = item;
    }
  });
  if (reused.length) {
    let i4 = -1;
    const {
      leave
    } = propsFn ? propsFn() : props;
    each(reused, (keyIndex, prevIndex) => {
      const t8 = prevTransitions[prevIndex];
      if (~keyIndex) {
        i4 = transitions.indexOf(t8);
        transitions[i4] = _extends3({}, t8, {
          item: items[keyIndex]
        });
      } else if (leave) {
        transitions.splice(++i4, 0, t8);
      }
    });
  }
  if (is.fun(sort)) {
    transitions.sort((a4, b5) => sort(a4.item, b5.item));
  }
  let delay = -trail;
  const forceUpdate = useForceUpdate();
  const defaultProps = getDefaultProps(props);
  const changes = /* @__PURE__ */ new Map();
  each(transitions, (t8, i4) => {
    const key = t8.key;
    const prevPhase = t8.phase;
    const p4 = propsFn ? propsFn() : props;
    let to2;
    let phase;
    let propsDelay = callProp(p4.delay || 0, key);
    if (prevPhase == TransitionPhase.MOUNT) {
      to2 = p4.enter;
      phase = TransitionPhase.ENTER;
    } else {
      const isLeave = keys.indexOf(key) < 0;
      if (prevPhase != TransitionPhase.LEAVE) {
        if (isLeave) {
          to2 = p4.leave;
          phase = TransitionPhase.LEAVE;
        } else if (to2 = p4.update) {
          phase = TransitionPhase.UPDATE;
        } else
          return;
      } else if (!isLeave) {
        to2 = p4.enter;
        phase = TransitionPhase.ENTER;
      } else
        return;
    }
    to2 = callProp(to2, t8.item, i4);
    to2 = is.obj(to2) ? inferTo(to2) : {
      to: to2
    };
    if (!to2.config) {
      const config2 = propsConfig || defaultProps.config;
      to2.config = callProp(config2, t8.item, i4, phase);
    }
    delay += trail;
    const payload = _extends3({}, defaultProps, {
      delay: propsDelay + delay,
      ref: propsRef,
      immediate: p4.immediate,
      reset: false
    }, to2);
    if (phase == TransitionPhase.ENTER && is.und(payload.from)) {
      const _p = propsFn ? propsFn() : props;
      const from = is.und(_p.initial) || prevTransitions ? _p.from : _p.initial;
      payload.from = callProp(from, t8.item, i4);
    }
    const {
      onResolve
    } = payload;
    payload.onResolve = (result) => {
      callProp(onResolve, result);
      const transitions2 = usedTransitions.current;
      const t9 = transitions2.find((t10) => t10.key === key);
      if (!t9)
        return;
      if (result.cancelled && t9.phase != TransitionPhase.UPDATE) {
        return;
      }
      if (t9.ctrl.idle) {
        const idle = transitions2.every((t10) => t10.ctrl.idle);
        if (t9.phase == TransitionPhase.LEAVE) {
          const expiry = callProp(expires, t9.item);
          if (expiry !== false) {
            const expiryMs = expiry === true ? 0 : expiry;
            t9.expired = true;
            if (!idle && expiryMs > 0) {
              if (expiryMs <= 2147483647)
                t9.expirationId = setTimeout(forceUpdate, expiryMs);
              return;
            }
          }
        }
        if (idle && transitions2.some((t10) => t10.expired)) {
          forceUpdate();
        }
      }
    };
    const springs = getSprings(t8.ctrl, payload);
    changes.set(t8, {
      phase,
      springs,
      payload
    });
  });
  const context = (0, import_react4.useContext)(SpringContext);
  const prevContext = usePrev(context);
  const hasContext = context !== prevContext && hasProps(context);
  useLayoutEffect2(() => {
    if (hasContext)
      each(transitions, (t8) => {
        t8.ctrl.start({
          default: context
        });
      });
  }, [context]);
  useLayoutEffect2(() => {
    each(changes, ({
      phase,
      payload
    }, t8) => {
      const {
        ctrl
      } = t8;
      t8.phase = phase;
      ref == null ? void 0 : ref.add(ctrl);
      if (hasContext && phase == TransitionPhase.ENTER) {
        ctrl.start({
          default: context
        });
      }
      if (payload) {
        replaceRef(ctrl, payload.ref);
        if (ctrl.ref) {
          ctrl.update(payload);
        } else {
          ctrl.start(payload);
        }
      }
    });
  }, reset ? void 0 : deps);
  const renderTransitions = (render) => React3.createElement(React3.Fragment, null, transitions.map((t8, i4) => {
    const {
      springs
    } = changes.get(t8) || t8.ctrl;
    const elem = render(_extends3({}, springs), t8.item, t8, i4);
    return elem && elem.type ? React3.createElement(elem.type, _extends3({}, elem.props, {
      key: is.str(t8.key) || is.num(t8.key) ? t8.key : t8.ctrl.id,
      ref: elem.ref
    })) : elem;
  }));
  return ref ? [renderTransitions, ref] : renderTransitions;
}
var nextKey = 1;
function getKeys(items, {
  key,
  keys = key
}, prevTransitions) {
  if (keys === null) {
    const reused = /* @__PURE__ */ new Set();
    return items.map((item) => {
      const t8 = prevTransitions && prevTransitions.find((t9) => t9.item === item && t9.phase !== TransitionPhase.LEAVE && !reused.has(t9));
      if (t8) {
        reused.add(t8);
        return t8.key;
      }
      return nextKey++;
    });
  }
  return is.und(keys) ? items : is.fun(keys) ? items.map(keys) : toArray(keys);
}
var Interpolation = class extends FrameValue {
  constructor(source, args) {
    super();
    this.key = void 0;
    this.idle = true;
    this.calc = void 0;
    this._active = /* @__PURE__ */ new Set();
    this.source = source;
    this.calc = createInterpolator(...args);
    const value = this._get();
    const nodeType = getAnimatedType(value);
    setAnimated(this, nodeType.create(value));
  }
  advance(_dt) {
    const value = this._get();
    const oldValue = this.get();
    if (!isEqual(value, oldValue)) {
      getAnimated(this).setValue(value);
      this._onChange(value, this.idle);
    }
    if (!this.idle && checkIdle(this._active)) {
      becomeIdle(this);
    }
  }
  _get() {
    const inputs = is.arr(this.source) ? this.source.map(getFluidValue) : toArray(getFluidValue(this.source));
    return this.calc(...inputs);
  }
  _start() {
    if (this.idle && !checkIdle(this._active)) {
      this.idle = false;
      each(getPayload(this), (node) => {
        node.done = false;
      });
      if (globals.skipAnimation) {
        raf.batchedUpdates(() => this.advance());
        becomeIdle(this);
      } else {
        frameLoop.start(this);
      }
    }
  }
  _attach() {
    let priority2 = 1;
    each(toArray(this.source), (source) => {
      if (hasFluidValue(source)) {
        addFluidObserver(source, this);
      }
      if (isFrameValue(source)) {
        if (!source.idle) {
          this._active.add(source);
        }
        priority2 = Math.max(priority2, source.priority + 1);
      }
    });
    this.priority = priority2;
    this._start();
  }
  _detach() {
    each(toArray(this.source), (source) => {
      if (hasFluidValue(source)) {
        removeFluidObserver(source, this);
      }
    });
    this._active.clear();
    becomeIdle(this);
  }
  eventObserved(event) {
    if (event.type == "change") {
      if (event.idle) {
        this.advance();
      } else {
        this._active.add(event.parent);
        this._start();
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else if (event.type == "priority") {
      this.priority = toArray(this.source).reduce((highest, parent) => Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1), 0);
    }
  }
};
function isIdle(source) {
  return source.idle !== false;
}
function checkIdle(active) {
  return !active.size || Array.from(active).every(isIdle);
}
function becomeIdle(self) {
  if (!self.idle) {
    self.idle = true;
    each(getPayload(self), (node) => {
      node.done = true;
    });
    callFluidObservers(self, {
      type: "idle",
      parent: self
    });
  }
}
globals.assign({
  createStringInterpolator,
  to: (source, args) => new Interpolation(source, args)
});
var update2 = frameLoop.advance;

// ../node_modules/@nivo/line/node_modules/@react-spring/web/dist/react-spring-web.esm.js
var import_react_dom = __toESM(require_react_dom());
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i4;
  for (i4 = 0; i4 < sourceKeys.length; i4++) {
    key = sourceKeys[i4];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$2 = ["style", "children", "scrollTop", "scrollLeft"];
var isCustomPropRE = /^--/;
function dangerousStyleValue(name, value) {
  if (value == null || typeof value === "boolean" || value === "")
    return "";
  if (typeof value === "number" && value !== 0 && !isCustomPropRE.test(name) && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]))
    return value + "px";
  return ("" + value).trim();
}
var attributeCache = {};
function applyAnimatedValues(instance, props) {
  if (!instance.nodeType || !instance.setAttribute) {
    return false;
  }
  const isFilterElement = instance.nodeName === "filter" || instance.parentNode && instance.parentNode.nodeName === "filter";
  const _ref = props, {
    style,
    children,
    scrollTop,
    scrollLeft
  } = _ref, attributes = _objectWithoutPropertiesLoose2(_ref, _excluded$2);
  const values = Object.values(attributes);
  const names = Object.keys(attributes).map((name) => isFilterElement || instance.hasAttribute(name) ? name : attributeCache[name] || (attributeCache[name] = name.replace(/([A-Z])/g, (n5) => "-" + n5.toLowerCase())));
  if (children !== void 0) {
    instance.textContent = children;
  }
  for (let name in style) {
    if (style.hasOwnProperty(name)) {
      const value = dangerousStyleValue(name, style[name]);
      if (isCustomPropRE.test(name)) {
        instance.style.setProperty(name, value);
      } else {
        instance.style[name] = value;
      }
    }
  }
  names.forEach((name, i4) => {
    instance.setAttribute(name, values[i4]);
  });
  if (scrollTop !== void 0) {
    instance.scrollTop = scrollTop;
  }
  if (scrollLeft !== void 0) {
    instance.scrollLeft = scrollLeft;
  }
}
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
var prefixKey = (prefix2, key) => prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
var prefixes = ["Webkit", "Ms", "Moz", "O"];
isUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {
  prefixes.forEach((prefix2) => acc[prefixKey(prefix2, prop)] = acc[prop]);
  return acc;
}, isUnitlessNumber);
var _excluded$1 = ["x", "y", "z"];
var domTransforms = /^(matrix|translate|scale|rotate|skew)/;
var pxTransforms = /^(translate)/;
var degTransforms = /^(rotate|skew)/;
var addUnit = (value, unit) => is.num(value) && value !== 0 ? value + unit : value;
var isValueIdentity = (value, id) => is.arr(value) ? value.every((v4) => isValueIdentity(v4, id)) : is.num(value) ? value === id : parseFloat(value) === id;
var AnimatedStyle = class extends AnimatedObject {
  constructor(_ref) {
    let {
      x: x3,
      y: y2,
      z: z2
    } = _ref, style = _objectWithoutPropertiesLoose2(_ref, _excluded$1);
    const inputs = [];
    const transforms = [];
    if (x3 || y2 || z2) {
      inputs.push([x3 || 0, y2 || 0, z2 || 0]);
      transforms.push((xyz) => [`translate3d(${xyz.map((v4) => addUnit(v4, "px")).join(",")})`, isValueIdentity(xyz, 0)]);
    }
    eachProp(style, (value, key) => {
      if (key === "transform") {
        inputs.push([value || ""]);
        transforms.push((transform) => [transform, transform === ""]);
      } else if (domTransforms.test(key)) {
        delete style[key];
        if (is.und(value))
          return;
        const unit = pxTransforms.test(key) ? "px" : degTransforms.test(key) ? "deg" : "";
        inputs.push(toArray(value));
        transforms.push(key === "rotate3d" ? ([x4, y3, z3, deg]) => [`rotate3d(${x4},${y3},${z3},${addUnit(deg, unit)})`, isValueIdentity(deg, 0)] : (input) => [`${key}(${input.map((v4) => addUnit(v4, unit)).join(",")})`, isValueIdentity(input, key.startsWith("scale") ? 1 : 0)]);
      }
    });
    if (inputs.length) {
      style.transform = new FluidTransform(inputs, transforms);
    }
    super(style);
  }
};
var FluidTransform = class extends FluidValue {
  constructor(inputs, transforms) {
    super();
    this._value = null;
    this.inputs = inputs;
    this.transforms = transforms;
  }
  get() {
    return this._value || (this._value = this._get());
  }
  _get() {
    let transform = "";
    let identity = true;
    each(this.inputs, (input, i4) => {
      const arg1 = getFluidValue(input[0]);
      const [t8, id] = this.transforms[i4](is.arr(arg1) ? arg1 : input.map(getFluidValue));
      transform += " " + t8;
      identity = identity && id;
    });
    return identity ? "none" : transform;
  }
  observerAdded(count) {
    if (count == 1)
      each(this.inputs, (input) => each(input, (value) => hasFluidValue(value) && addFluidObserver(value, this)));
  }
  observerRemoved(count) {
    if (count == 0)
      each(this.inputs, (input) => each(input, (value) => hasFluidValue(value) && removeFluidObserver(value, this)));
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._value = null;
    }
    callFluidObservers(this, event);
  }
};
var primitives = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"];
var _excluded = ["scrollTop", "scrollLeft"];
globals.assign({
  batchedUpdates: import_react_dom.unstable_batchedUpdates,
  createStringInterpolator,
  colors
});
var host = createHost(primitives, {
  applyAnimatedValues,
  createAnimatedStyle: (style) => new AnimatedStyle(style),
  getComponentProps: (_ref) => {
    let props = _objectWithoutPropertiesLoose2(_ref, _excluded);
    return props;
  }
});
var animated = host.animated;

// ../node_modules/@nivo/line/node_modules/@nivo/scales/dist/nivo-scales.es.js
var import_uniq = __toESM(require_uniq());
var import_uniqBy = __toESM(require_uniqBy());
var import_sortBy = __toESM(require_sortBy());
var import_last = __toESM(require_last());
var import_isDate = __toESM(require_isDate());

// ../node_modules/@nivo/line/node_modules/d3-time/src/interval.js
var t02 = /* @__PURE__ */ new Date();
var t12 = /* @__PURE__ */ new Date();
function newInterval(floori, offseti, count, field) {
  function interval(date) {
    return floori(date = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date)), date;
  }
  interval.floor = function(date) {
    return floori(date = /* @__PURE__ */ new Date(+date)), date;
  };
  interval.ceil = function(date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };
  interval.round = function(date) {
    var d0 = interval(date), d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };
  interval.offset = function(date, step) {
    return offseti(date = /* @__PURE__ */ new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };
  interval.range = function(start2, stop, step) {
    var range = [], previous;
    start2 = interval.ceil(start2);
    step = step == null ? 1 : Math.floor(step);
    if (!(start2 < stop) || !(step > 0))
      return range;
    do
      range.push(previous = /* @__PURE__ */ new Date(+start2)), offseti(start2, step), floori(start2);
    while (previous < start2 && start2 < stop);
    return range;
  };
  interval.filter = function(test) {
    return newInterval(function(date) {
      if (date >= date)
        while (floori(date), !test(date))
          date.setTime(date - 1);
    }, function(date, step) {
      if (date >= date) {
        if (step < 0)
          while (++step <= 0) {
            while (offseti(date, -1), !test(date)) {
            }
          }
        else
          while (--step >= 0) {
            while (offseti(date, 1), !test(date)) {
            }
          }
      }
    });
  };
  if (count) {
    interval.count = function(start2, end) {
      t02.setTime(+start2), t12.setTime(+end);
      floori(t02), floori(t12);
      return Math.floor(count(t02, t12));
    };
    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d2) {
        return field(d2) % step === 0;
      } : function(d2) {
        return interval.count(0, d2) % step === 0;
      });
    };
  }
  return interval;
}

// ../node_modules/@nivo/line/node_modules/d3-time/src/millisecond.js
var millisecond = newInterval(function() {
}, function(date, step) {
  date.setTime(+date + step);
}, function(start2, end) {
  return end - start2;
});
millisecond.every = function(k5) {
  k5 = Math.floor(k5);
  if (!isFinite(k5) || !(k5 > 0))
    return null;
  if (!(k5 > 1))
    return millisecond;
  return newInterval(function(date) {
    date.setTime(Math.floor(date / k5) * k5);
  }, function(date, step) {
    date.setTime(+date + step * k5);
  }, function(start2, end) {
    return (end - start2) / k5;
  });
};
var millisecond_default = millisecond;
var milliseconds = millisecond.range;

// ../node_modules/@nivo/line/node_modules/d3-time/src/duration.js
var durationSecond = 1e3;
var durationMinute = 6e4;
var durationHour = 36e5;
var durationDay = 864e5;
var durationWeek = 6048e5;

// ../node_modules/@nivo/line/node_modules/d3-time/src/second.js
var second = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds());
}, function(date, step) {
  date.setTime(+date + step * durationSecond);
}, function(start2, end) {
  return (end - start2) / durationSecond;
}, function(date) {
  return date.getUTCSeconds();
});
var second_default = second;
var seconds = second.range;

// ../node_modules/@nivo/line/node_modules/d3-time/src/minute.js
var minute = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
}, function(date, step) {
  date.setTime(+date + step * durationMinute);
}, function(start2, end) {
  return (end - start2) / durationMinute;
}, function(date) {
  return date.getMinutes();
});
var minute_default = minute;
var minutes = minute.range;

// ../node_modules/@nivo/line/node_modules/d3-time/src/hour.js
var hour = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
}, function(date, step) {
  date.setTime(+date + step * durationHour);
}, function(start2, end) {
  return (end - start2) / durationHour;
}, function(date) {
  return date.getHours();
});
var hour_default = hour;
var hours = hour.range;

// ../node_modules/@nivo/line/node_modules/d3-time/src/day.js
var day = newInterval(function(date) {
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setDate(date.getDate() + step);
}, function(start2, end) {
  return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationDay;
}, function(date) {
  return date.getDate() - 1;
});
var days = day.range;

// ../node_modules/@nivo/line/node_modules/d3-time/src/week.js
function weekday(i4) {
  return newInterval(function(date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i4) % 7);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function(start2, end) {
    return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}
var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);
var sundays = sunday.range;
var mondays = monday.range;
var tuesdays = tuesday.range;
var wednesdays = wednesday.range;
var thursdays = thursday.range;
var fridays = friday.range;
var saturdays = saturday.range;

// ../node_modules/@nivo/line/node_modules/d3-time/src/month.js
var month = newInterval(function(date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setMonth(date.getMonth() + step);
}, function(start2, end) {
  return end.getMonth() - start2.getMonth() + (end.getFullYear() - start2.getFullYear()) * 12;
}, function(date) {
  return date.getMonth();
});
var month_default = month;
var months = month.range;

// ../node_modules/@nivo/line/node_modules/d3-time/src/year.js
var year = newInterval(function(date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function(start2, end) {
  return end.getFullYear() - start2.getFullYear();
}, function(date) {
  return date.getFullYear();
});
year.every = function(k5) {
  return !isFinite(k5 = Math.floor(k5)) || !(k5 > 0) ? null : newInterval(function(date) {
    date.setFullYear(Math.floor(date.getFullYear() / k5) * k5);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setFullYear(date.getFullYear() + step * k5);
  });
};
var year_default = year;
var years = year.range;

// ../node_modules/@nivo/line/node_modules/d3-time/src/utcMinute.js
var utcMinute = newInterval(function(date) {
  date.setUTCSeconds(0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationMinute);
}, function(start2, end) {
  return (end - start2) / durationMinute;
}, function(date) {
  return date.getUTCMinutes();
});
var utcMinute_default = utcMinute;
var utcMinutes = utcMinute.range;

// ../node_modules/@nivo/line/node_modules/d3-time/src/utcHour.js
var utcHour = newInterval(function(date) {
  date.setUTCMinutes(0, 0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationHour);
}, function(start2, end) {
  return (end - start2) / durationHour;
}, function(date) {
  return date.getUTCHours();
});
var utcHour_default = utcHour;
var utcHours = utcHour.range;

// ../node_modules/@nivo/line/node_modules/d3-time/src/utcDay.js
var utcDay = newInterval(function(date) {
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function(start2, end) {
  return (end - start2) / durationDay;
}, function(date) {
  return date.getUTCDate() - 1;
});
var utcDays = utcDay.range;

// ../node_modules/@nivo/line/node_modules/d3-time/src/utcWeek.js
function utcWeekday(i4) {
  return newInterval(function(date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i4) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function(start2, end) {
    return (end - start2) / durationWeek;
  });
}
var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);
var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;

// ../node_modules/@nivo/line/node_modules/d3-time/src/utcMonth.js
var utcMonth = newInterval(function(date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function(start2, end) {
  return end.getUTCMonth() - start2.getUTCMonth() + (end.getUTCFullYear() - start2.getUTCFullYear()) * 12;
}, function(date) {
  return date.getUTCMonth();
});
var utcMonth_default = utcMonth;
var utcMonths = utcMonth.range;

// ../node_modules/@nivo/line/node_modules/d3-time/src/utcYear.js
var utcYear = newInterval(function(date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function(start2, end) {
  return end.getUTCFullYear() - start2.getUTCFullYear();
}, function(date) {
  return date.getUTCFullYear();
});
utcYear.every = function(k5) {
  return !isFinite(k5 = Math.floor(k5)) || !(k5 > 0) ? null : newInterval(function(date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k5) * k5);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k5);
  });
};
var utcYear_default = utcYear;
var utcYears = utcYear.range;

// ../node_modules/@nivo/line/node_modules/@nivo/scales/dist/nivo-scales.es.js
function $() {
  return $ = Object.assign || function(n5) {
    for (var t8 = 1; t8 < arguments.length; t8++) {
      var r4 = arguments[t8];
      for (var e6 in r4)
        Object.prototype.hasOwnProperty.call(r4, e6) && (n5[e6] = r4[e6]);
    }
    return n5;
  }, $.apply(this, arguments);
}
var J = [function(n5) {
  return n5.setMilliseconds(0);
}, function(n5) {
  return n5.setSeconds(0);
}, function(n5) {
  return n5.setMinutes(0);
}, function(n5) {
  return n5.setHours(0);
}, function(n5) {
  return n5.setDate(1);
}, function(n5) {
  return n5.setMonth(0);
}];
var K2 = { millisecond: [], second: J.slice(0, 1), minute: J.slice(0, 2), hour: J.slice(0, 3), day: J.slice(0, 4), month: J.slice(0, 5), year: J.slice(0, 6) };
var L = function(n5) {
  return function(t8) {
    return K2[n5].forEach(function(n6) {
      n6(t8);
    }), t8;
  };
};
var Q = function(n5) {
  var t8 = n5.format, r4 = void 0 === t8 ? "native" : t8, e6 = n5.precision, a4 = void 0 === e6 ? "millisecond" : e6, u2 = n5.useUTC, c4 = void 0 === u2 || u2, f3 = L(a4);
  return function(n6) {
    if (void 0 === n6)
      return n6;
    if ("native" === r4 || n6 instanceof Date)
      return f3(n6);
    var t9 = c4 ? utcParse(r4) : timeParse(r4);
    return f3(t9(n6));
  };
};
var W = function(n5, t8, r4, e6) {
  var a4, i4, o3, c4, f3 = n5.min, d2 = void 0 === f3 ? 0 : f3, s3 = n5.max, l2 = void 0 === s3 ? "auto" : s3, m2 = n5.stacked, v4 = void 0 !== m2 && m2, y2 = n5.reverse, p4 = void 0 !== y2 && y2, h3 = n5.clamp, g4 = void 0 !== h3 && h3, x3 = n5.nice, k5 = void 0 !== x3 && x3;
  "auto" === d2 ? a4 = true === v4 ? null != (i4 = t8.minStacked) ? i4 : 0 : t8.min : a4 = d2;
  "auto" === l2 ? o3 = true === v4 ? null != (c4 = t8.maxStacked) ? c4 : 0 : t8.max : o3 = l2;
  var T3 = linear().rangeRound("x" === e6 ? [0, r4] : [r4, 0]).domain(p4 ? [o3, a4] : [a4, o3]).clamp(g4);
  return true === k5 ? T3.nice() : "number" == typeof k5 && T3.nice(k5), X(T3, v4);
};
var X = function(n5, t8) {
  void 0 === t8 && (t8 = false);
  var r4 = n5;
  return r4.type = "linear", r4.stacked = t8, r4;
};
var Y = function(n5, t8, r4) {
  var e6 = point().range([0, r4]).domain(t8.all);
  return e6.type = "point", e6;
};
var _ = function(n5, t8, r4, e6) {
  var a4 = n5.round, i4 = void 0 === a4 || a4, o3 = band().range("x" === e6 ? [0, r4] : [r4, 0]).domain(t8.all).round(i4);
  return nn(o3);
};
var nn = function(n5) {
  var t8 = n5;
  return t8.type = "band", t8;
};
var tn = function(n5, t8, r4) {
  var e6, a4, i4 = n5.format, o3 = void 0 === i4 ? "native" : i4, u2 = n5.precision, c4 = void 0 === u2 ? "millisecond" : u2, f3 = n5.min, l2 = void 0 === f3 ? "auto" : f3, m2 = n5.max, v4 = void 0 === m2 ? "auto" : m2, y2 = n5.useUTC, p4 = void 0 === y2 || y2, h3 = n5.nice, g4 = void 0 !== h3 && h3, x3 = Q({ format: o3, precision: c4, useUTC: p4 });
  e6 = "auto" === l2 ? x3(t8.min) : "native" !== o3 ? x3(l2) : l2, a4 = "auto" === v4 ? x3(t8.max) : "native" !== o3 ? x3(v4) : v4;
  var k5 = p4 ? utcTime() : time();
  k5.range([0, r4]), e6 && a4 && k5.domain([e6, a4]), true === g4 ? k5.nice() : "object" != typeof g4 && "number" != typeof g4 || k5.nice(g4);
  var T3 = k5;
  return T3.type = "time", T3.useUTC = p4, T3;
};
var rn2 = function(n5, t8, r4, e6) {
  var a4, i4 = n5.base, o3 = void 0 === i4 ? 10 : i4, u2 = n5.min, c4 = void 0 === u2 ? "auto" : u2, f3 = n5.max, d2 = void 0 === f3 ? "auto" : f3;
  if (t8.all.some(function(n6) {
    return 0 === n6;
  }))
    throw new Error("a log scale domain must not include or cross zero");
  var s3, m2, v4 = false;
  if (t8.all.filter(function(n6) {
    return null != n6;
  }).forEach(function(n6) {
    v4 || (void 0 === a4 ? a4 = Math.sign(n6) : Math.sign(n6) !== a4 && (v4 = true));
  }), v4)
    throw new Error("a log scale domain must be strictly-positive or strictly-negative");
  s3 = "auto" === c4 ? t8.min : c4, m2 = "auto" === d2 ? t8.max : d2;
  var y2 = log().domain([s3, m2]).rangeRound("x" === e6 ? [0, r4] : [r4, 0]).base(o3).nice();
  return y2.type = "log", y2;
};
var en = function(n5, t8, r4, e6) {
  var a4, i4, o3 = n5.constant, u2 = void 0 === o3 ? 1 : o3, c4 = n5.min, f3 = void 0 === c4 ? "auto" : c4, d2 = n5.max, s3 = void 0 === d2 ? "auto" : d2, l2 = n5.reverse, v4 = void 0 !== l2 && l2;
  a4 = "auto" === f3 ? t8.min : f3, i4 = "auto" === s3 ? t8.max : s3;
  var y2 = symlog().constant(u2).rangeRound("x" === e6 ? [0, r4] : [r4, 0]).nice();
  true === v4 ? y2.domain([i4, a4]) : y2.domain([a4, i4]);
  var p4 = y2;
  return p4.type = "symlog", p4;
};
var an = function(n5) {
  return "x" === n5 ? "y" : "x";
};
var on = function(n5, t8) {
  return n5 === t8;
};
var un = function(n5, t8) {
  return n5.getTime() === t8.getTime();
};
function cn(n5, t8, r4, e6) {
  switch (n5.type) {
    case "linear":
      return W(n5, t8, r4, e6);
    case "point":
      return Y(0, t8, r4);
    case "band":
      return _(n5, t8, r4, e6);
    case "time":
      return tn(n5, t8, r4);
    case "log":
      return rn2(n5, t8, r4, e6);
    case "symlog":
      return en(n5, t8, r4, e6);
    default:
      throw new Error("invalid scale spec");
  }
}
var fn = function(n5, t8, r4) {
  var e6;
  if ("stacked" in r4 && r4.stacked) {
    var a4 = n5.data["x" === t8 ? "xStacked" : "yStacked"];
    return null == a4 ? null : r4(a4);
  }
  return null != (e6 = r4(n5.data[t8])) ? e6 : null;
};
var dn = function(n5, t8, r4, e6, a4) {
  var i4 = n5.map(function(n6) {
    return function(n7) {
      return $({}, n7, { data: n7.data.map(function(n8) {
        return { data: $({}, n8) };
      }) });
    }(n6);
  }), o3 = sn(i4, t8, r4);
  "stacked" in t8 && true === t8.stacked && vn(o3, i4), "stacked" in r4 && true === r4.stacked && yn(o3, i4);
  var u2 = cn(t8, o3.x, e6, "x"), c4 = cn(r4, o3.y, a4, "y"), f3 = i4.map(function(n6) {
    return $({}, n6, { data: n6.data.map(function(n7) {
      return $({}, n7, { position: { x: fn(n7, "x", u2), y: fn(n7, "y", c4) } });
    }) });
  });
  return $({}, o3, { series: f3, xScale: u2, yScale: c4 });
};
var sn = function(n5, t8, r4) {
  return { x: ln(n5, "x", t8), y: ln(n5, "y", r4) };
};
var ln = function(a4, i4, o3, u2) {
  var c4 = void 0 === u2 ? {} : u2, f3 = c4.getValue, d2 = void 0 === f3 ? function(n5) {
    return n5.data[i4];
  } : f3, s3 = c4.setValue, l2 = void 0 === s3 ? function(n5, t8) {
    n5.data[i4] = t8;
  } : s3;
  if ("linear" === o3.type)
    a4.forEach(function(n5) {
      n5.data.forEach(function(n6) {
        var t8 = d2(n6);
        t8 && l2(n6, parseFloat(String(t8)));
      });
    });
  else if ("time" === o3.type && "native" !== o3.format) {
    var m2 = Q(o3);
    a4.forEach(function(n5) {
      n5.data.forEach(function(n6) {
        var t8 = d2(n6);
        t8 && l2(n6, m2(t8));
      });
    });
  }
  var v4 = [];
  switch (a4.forEach(function(n5) {
    n5.data.forEach(function(n6) {
      v4.push(d2(n6));
    });
  }), o3.type) {
    case "linear":
      var y2 = (0, import_sortBy.default)((0, import_uniq.default)(v4).filter(function(n5) {
        return null !== n5;
      }), function(n5) {
        return n5;
      });
      return { all: y2, min: Math.min.apply(Math, y2), max: Math.max.apply(Math, y2) };
    case "time":
      var p4 = (0, import_uniqBy.default)(v4, function(n5) {
        return n5.getTime();
      }).slice(0).sort(function(n5, t8) {
        return t8.getTime() - n5.getTime();
      }).reverse();
      return { all: p4, min: p4[0], max: (0, import_last.default)(p4) };
    default:
      var h3 = (0, import_uniq.default)(v4);
      return { all: h3, min: h3[0], max: (0, import_last.default)(h3) };
  }
};
var mn = function(n5, t8, r4) {
  var i4 = an(n5), o3 = [];
  t8[i4].all.forEach(function(t9) {
    var u2 = (0, import_isDate.default)(t9) ? un : on, c4 = [];
    r4.forEach(function(r5) {
      var a4 = r5.data.find(function(n6) {
        return u2(n6.data[i4], t9);
      }), f3 = null, d2 = null;
      if (void 0 !== a4) {
        if (null !== (f3 = a4.data[n5])) {
          var s3 = (0, import_last.default)(c4);
          void 0 === s3 ? d2 = f3 : null !== s3 && (d2 = s3 + f3);
        }
        a4.data["x" === n5 ? "xStacked" : "yStacked"] = d2;
      }
      c4.push(d2), null !== d2 && o3.push(d2);
    });
  }), t8[n5].minStacked = Math.min.apply(Math, o3), t8[n5].maxStacked = Math.max.apply(Math, o3);
};
var vn = function(n5, t8) {
  return mn("x", n5, t8);
};
var yn = function(n5, t8) {
  return mn("y", n5, t8);
};
var pn = function(n5) {
  var t8 = n5.bandwidth();
  if (0 === t8)
    return n5;
  var r4 = t8 / 2;
  return n5.round() && (r4 = Math.round(r4)), function(t9) {
    var e6;
    return (null != (e6 = n5(t9)) ? e6 : 0) + r4;
  };
};
var hn = { millisecond: [millisecond_default, millisecond_default], second: [second_default, second_default], minute: [minute_default, utcMinute_default], hour: [hour_default, utcHour_default], day: [newInterval(function(n5) {
  return n5.setHours(0, 0, 0, 0);
}, function(n5, t8) {
  return n5.setDate(n5.getDate() + t8);
}, function(n5, t8) {
  return (t8.getTime() - n5.getTime()) / 864e5;
}, function(n5) {
  return Math.floor(n5.getTime() / 864e5);
}), newInterval(function(n5) {
  return n5.setUTCHours(0, 0, 0, 0);
}, function(n5, t8) {
  return n5.setUTCDate(n5.getUTCDate() + t8);
}, function(n5, t8) {
  return (t8.getTime() - n5.getTime()) / 864e5;
}, function(n5) {
  return Math.floor(n5.getTime() / 864e5);
})], week: [sunday, utcSunday], sunday: [sunday, utcSunday], monday: [monday, utcMonday], tuesday: [tuesday, utcTuesday], wednesday: [wednesday, utcWednesday], thursday: [thursday, utcThursday], friday: [friday, utcFriday], saturday: [saturday, utcSaturday], month: [month_default, utcMonth_default], year: [year_default, utcYear_default] };
var gn = Object.keys(hn);
var xn = new RegExp("^every\\s*(\\d+)?\\s*(" + gn.join("|") + ")s?$", "i");
var kn = function(n5, t8) {
  if (Array.isArray(t8))
    return t8;
  if ("string" == typeof t8 && "useUTC" in n5) {
    var r4 = t8.match(xn);
    if (r4) {
      var e6 = r4[1], a4 = r4[2], i4 = hn[a4][n5.useUTC ? 1 : 0];
      if ("day" === a4) {
        var o3, u2, c4 = n5.domain(), f3 = c4[0], d2 = c4[1], s3 = new Date(d2);
        return s3.setDate(s3.getDate() + 1), null != (o3 = null == (u2 = i4.every(Number(null != e6 ? e6 : 1))) ? void 0 : u2.range(f3, s3)) ? o3 : [];
      }
      if (void 0 === e6)
        return n5.ticks(i4);
      var l2 = i4.every(Number(e6));
      if (l2)
        return n5.ticks(l2);
    }
    throw new Error("Invalid tickValues: " + t8);
  }
  if ("ticks" in n5) {
    if (void 0 === t8)
      return n5.ticks();
    if ("number" == typeof (m2 = t8) && isFinite(m2) && Math.floor(m2) === m2)
      return n5.ticks(t8);
  }
  var m2;
  return n5.domain();
};

// ../node_modules/@nivo/line/node_modules/@nivo/axes/dist/nivo-axes.es.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_prop_types2 = __toESM(require_prop_types());
function v() {
  return v = Object.assign || function(t8) {
    for (var e6 = 1; e6 < arguments.length; e6++) {
      var i4 = arguments[e6];
      for (var n5 in i4)
        Object.prototype.hasOwnProperty.call(i4, n5) && (t8[n5] = i4[n5]);
    }
    return t8;
  }, v.apply(this, arguments);
}
var p = function(t8) {
  var e6, i4 = t8.axis, n5 = t8.scale, r4 = t8.ticksPosition, a4 = t8.tickValues, o3 = t8.tickSize, s3 = t8.tickPadding, c4 = t8.tickRotation, f3 = t8.engine, x3 = void 0 === f3 ? "svg" : f3, d2 = kn(n5, a4), y2 = yi[x3], g4 = "bandwidth" in n5 ? pn(n5) : n5, k5 = { lineX: 0, lineY: 0 }, h3 = { textX: 0, textY: 0 }, p4 = "object" == typeof document && "rtl" === document.dir, b5 = y2.align.center, P4 = y2.baseline.center;
  return "x" === i4 ? (e6 = function(t9) {
    var e7;
    return { x: null != (e7 = g4(t9)) ? e7 : 0, y: 0 };
  }, k5.lineY = o3 * ("after" === r4 ? 1 : -1), h3.textY = (o3 + s3) * ("after" === r4 ? 1 : -1), P4 = "after" === r4 ? y2.baseline.top : y2.baseline.bottom, 0 === c4 ? b5 = y2.align.center : "after" === r4 && c4 < 0 || "before" === r4 && c4 > 0 ? (b5 = y2.align[p4 ? "left" : "right"], P4 = y2.baseline.center) : ("after" === r4 && c4 > 0 || "before" === r4 && c4 < 0) && (b5 = y2.align[p4 ? "right" : "left"], P4 = y2.baseline.center)) : (e6 = function(t9) {
    var e7;
    return { x: 0, y: null != (e7 = g4(t9)) ? e7 : 0 };
  }, k5.lineX = o3 * ("after" === r4 ? 1 : -1), h3.textX = (o3 + s3) * ("after" === r4 ? 1 : -1), b5 = "after" === r4 ? y2.align.left : y2.align.right), { ticks: d2.map(function(t9) {
    return v({ key: "number" == typeof t9 || "string" == typeof t9 ? t9 : "" + t9, value: t9 }, e6(t9), k5, h3);
  }), textAlign: b5, textBaseline: P4 };
};
var b2 = function(t8, e6) {
  if (void 0 === t8 || "function" == typeof t8)
    return t8;
  if ("time" === e6.type) {
    var i4 = timeFormat(t8);
    return function(t9) {
      return i4(t9 instanceof Date ? t9 : new Date(t9));
    };
  }
  return format(t8);
};
var P2 = function(t8) {
  var e6, i4 = t8.width, n5 = t8.height, r4 = t8.scale, a4 = t8.axis, o3 = t8.values, l2 = (e6 = o3, Array.isArray(e6) ? o3 : void 0) || kn(r4, o3), s3 = "bandwidth" in r4 ? pn(r4) : r4, c4 = "x" === a4 ? l2.map(function(t9) {
    var e7, i5;
    return { key: "" + t9, x1: null != (e7 = s3(t9)) ? e7 : 0, x2: null != (i5 = s3(t9)) ? i5 : 0, y1: 0, y2: n5 };
  }) : l2.map(function(t9) {
    var e7, n6;
    return { key: "" + t9, x1: 0, x2: i4, y1: null != (e7 = s3(t9)) ? e7 : 0, y2: null != (n6 = s3(t9)) ? n6 : 0 };
  });
  return c4;
};
var S = (0, import_react5.memo)(function(t8) {
  var e6, n5 = t8.value, a4 = t8.format, o3 = t8.lineX, l2 = t8.lineY, c4 = t8.onClick, f3 = t8.textBaseline, x3 = t8.textAnchor, d2 = t8.animatedProps, u2 = Vt(), m2 = null != (e6 = null == a4 ? void 0 : a4(n5)) ? e6 : n5, k5 = (0, import_react5.useMemo)(function() {
    var t9 = { opacity: d2.opacity };
    return c4 ? { style: v({}, t9, { cursor: "pointer" }), onClick: function(t10) {
      return c4(t10, m2);
    } } : { style: t9 };
  }, [d2.opacity, c4, m2]);
  return (0, import_jsx_runtime.jsxs)(animated.g, v({ transform: d2.transform }, k5, { children: [(0, import_jsx_runtime.jsx)("line", { x1: 0, x2: o3, y1: 0, y2: l2, style: u2.axis.ticks.line }), (0, import_jsx_runtime.jsx)(animated.text, { dominantBaseline: f3, textAnchor: x3, transform: d2.textTransform, style: u2.axis.ticks.text, children: m2 })] }));
});
var T = (0, import_react5.memo)(function(e6) {
  var n5 = e6.axis, l2 = e6.scale, f3 = e6.x, x3 = void 0 === f3 ? 0 : f3, d2 = e6.y, u2 = void 0 === d2 ? 0 : d2, m2 = e6.length, k5 = e6.ticksPosition, h3 = e6.tickValues, P4 = e6.tickSize, T3 = void 0 === P4 ? 5 : P4, w4 = e6.tickPadding, A3 = void 0 === w4 ? 5 : w4, O4 = e6.tickRotation, X4 = void 0 === O4 ? 0 : O4, Y4 = e6.format, W3 = e6.renderTick, B4 = void 0 === W3 ? S : W3, z2 = e6.legend, V2 = e6.legendPosition, C4 = void 0 === V2 ? "end" : V2, R = e6.legendOffset, j = void 0 === R ? 0 : R, E2 = e6.onClick, D2 = e6.ariaHidden, q = Vt(), F = (0, import_react5.useMemo)(function() {
    return b2(Y4, l2);
  }, [Y4, l2]), H2 = p({ axis: n5, scale: l2, ticksPosition: k5, tickValues: h3, tickSize: T3, tickPadding: A3, tickRotation: X4 }), N2 = H2.ticks, I = H2.textAlign, G = H2.textBaseline, J2 = null;
  if (void 0 !== z2) {
    var K4, L2 = 0, M = 0, Q3 = 0;
    "y" === n5 ? (Q3 = -90, L2 = j, "start" === C4 ? (K4 = "start", M = m2) : "middle" === C4 ? (K4 = "middle", M = m2 / 2) : "end" === C4 && (K4 = "end")) : (M = j, "start" === C4 ? K4 = "start" : "middle" === C4 ? (K4 = "middle", L2 = m2 / 2) : "end" === C4 && (K4 = "end", L2 = m2)), J2 = (0, import_jsx_runtime.jsx)("text", { transform: "translate(" + L2 + ", " + M + ") rotate(" + Q3 + ")", textAnchor: K4, style: v({ dominantBaseline: "central" }, q.axis.legend.text), children: z2 });
  }
  var U = tt(), Z = U.animate, $2 = U.config, _2 = useSpring({ transform: "translate(" + x3 + "," + u2 + ")", lineX2: "x" === n5 ? m2 : 0, lineY2: "x" === n5 ? 0 : m2, config: $2, immediate: !Z }), tt2 = useTransition(N2, { keys: function(t8) {
    return t8.key;
  }, initial: function(t8) {
    return { opacity: 1, transform: "translate(" + t8.x + "," + t8.y + ")", textTransform: "translate(" + t8.textX + "," + t8.textY + ") rotate(" + X4 + ")" };
  }, from: function(t8) {
    return { opacity: 0, transform: "translate(" + t8.x + "," + t8.y + ")", textTransform: "translate(" + t8.textX + "," + t8.textY + ") rotate(" + X4 + ")" };
  }, enter: function(t8) {
    return { opacity: 1, transform: "translate(" + t8.x + "," + t8.y + ")", textTransform: "translate(" + t8.textX + "," + t8.textY + ") rotate(" + X4 + ")" };
  }, update: function(t8) {
    return { opacity: 1, transform: "translate(" + t8.x + "," + t8.y + ")", textTransform: "translate(" + t8.textX + "," + t8.textY + ") rotate(" + X4 + ")" };
  }, leave: { opacity: 0 }, config: $2, immediate: !Z });
  return (0, import_jsx_runtime.jsxs)(animated.g, { transform: _2.transform, "aria-hidden": D2, children: [tt2(function(e7, i4, n6, r4) {
    return t4.createElement(B4, v({ tickIndex: r4, format: F, rotate: X4, textBaseline: G, textAnchor: I, animatedProps: e7 }, i4, E2 ? { onClick: E2 } : {}));
  }), (0, import_jsx_runtime.jsx)(animated.line, { style: q.axis.domain.line, x1: 0, x2: _2.lineX2, y1: 0, y2: _2.lineY2 }), J2] });
});
var w2 = { ticksPosition: import_prop_types2.default.oneOf(["before", "after"]), tickValues: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.arrayOf(import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string, import_prop_types2.default.instanceOf(Date)])), import_prop_types2.default.string]), tickSize: import_prop_types2.default.number, tickPadding: import_prop_types2.default.number, tickRotation: import_prop_types2.default.number, format: import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.string]), renderTick: import_prop_types2.default.func, legend: import_prop_types2.default.node, legendPosition: import_prop_types2.default.oneOf(["start", "middle", "end"]), legendOffset: import_prop_types2.default.number, ariaHidden: import_prop_types2.default.bool };
var A2 = import_prop_types2.default.shape(w2);
var O = ["top", "right", "bottom", "left"];
var X2 = (0, import_react5.memo)(function(t8) {
  var e6 = t8.xScale, i4 = t8.yScale, n5 = t8.width, r4 = t8.height, a4 = { top: t8.top, right: t8.right, bottom: t8.bottom, left: t8.left };
  return (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: O.map(function(t9) {
    var o3 = a4[t9];
    if (!o3)
      return null;
    var l2 = "top" === t9 || "bottom" === t9;
    return (0, import_jsx_runtime.jsx)(T, v({}, o3, { axis: l2 ? "x" : "y", x: "right" === t9 ? n5 : 0, y: "bottom" === t9 ? r4 : 0, scale: l2 ? e6 : i4, length: l2 ? n5 : r4, ticksPosition: "top" === t9 || "left" === t9 ? "before" : "after" }), t9);
  }) });
});
var Y2 = (0, import_react5.memo)(function(t8) {
  var e6 = t8.animatedProps, i4 = Vt();
  return (0, import_jsx_runtime.jsx)(animated.line, v({}, e6, i4.grid.line));
});
var W2 = (0, import_react5.memo)(function(t8) {
  var e6 = t8.lines, i4 = tt(), r4 = i4.animate, a4 = i4.config, l2 = useTransition(e6, { keys: function(t9) {
    return t9.key;
  }, initial: function(t9) {
    return { opacity: 1, x1: t9.x1, x2: t9.x2, y1: t9.y1, y2: t9.y2 };
  }, from: function(t9) {
    return { opacity: 0, x1: t9.x1, x2: t9.x2, y1: t9.y1, y2: t9.y2 };
  }, enter: function(t9) {
    return { opacity: 1, x1: t9.x1, x2: t9.x2, y1: t9.y1, y2: t9.y2 };
  }, update: function(t9) {
    return { opacity: 1, x1: t9.x1, x2: t9.x2, y1: t9.y1, y2: t9.y2 };
  }, leave: { opacity: 0 }, config: a4, immediate: !r4 });
  return (0, import_jsx_runtime.jsx)("g", { children: l2(function(t9, e7) {
    return (0, import_react5.createElement)(Y2, v({}, e7, { key: e7.key, animatedProps: t9 }));
  }) });
});
var B2 = (0, import_react5.memo)(function(t8) {
  var e6 = t8.width, n5 = t8.height, r4 = t8.xScale, a4 = t8.yScale, o3 = t8.xValues, l2 = t8.yValues, s3 = (0, import_react5.useMemo)(function() {
    return !!r4 && P2({ width: e6, height: n5, scale: r4, axis: "x", values: o3 });
  }, [r4, o3, e6, n5]), c4 = (0, import_react5.useMemo)(function() {
    return !!a4 && P2({ width: e6, height: n5, scale: a4, axis: "y", values: l2 });
  }, [n5, e6, a4, l2]);
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [s3 && (0, import_jsx_runtime.jsx)(W2, { lines: s3 }), c4 && (0, import_jsx_runtime.jsx)(W2, { lines: c4 })] });
});
var z = function(t8, e6) {
  var i4, n5 = e6.axis, r4 = e6.scale, a4 = e6.x, o3 = void 0 === a4 ? 0 : a4, l2 = e6.y, s3 = void 0 === l2 ? 0 : l2, c4 = e6.length, x3 = e6.ticksPosition, d2 = e6.tickValues, u2 = e6.tickSize, m2 = void 0 === u2 ? 5 : u2, y2 = e6.tickPadding, g4 = void 0 === y2 ? 5 : y2, k5 = e6.tickRotation, h3 = void 0 === k5 ? 0 : k5, v4 = e6.format, b5 = e6.legend, P4 = e6.legendPosition, S4 = void 0 === P4 ? "end" : P4, T3 = e6.legendOffset, w4 = void 0 === T3 ? 0 : T3, A3 = e6.theme, O4 = p({ axis: n5, scale: r4, ticksPosition: x3, tickValues: d2, tickSize: m2, tickPadding: g4, tickRotation: h3, engine: "canvas" }), X4 = O4.ticks, Y4 = O4.textAlign, W3 = O4.textBaseline;
  t8.save(), t8.translate(o3, s3), t8.textAlign = Y4, t8.textBaseline = W3, t8.font = (A3.axis.ticks.text.fontWeight ? A3.axis.ticks.text.fontWeight + " " : "") + A3.axis.ticks.text.fontSize + "px " + A3.axis.ticks.text.fontFamily, (null != (i4 = A3.axis.domain.line.strokeWidth) ? i4 : 0) > 0 && (t8.lineWidth = Number(A3.axis.domain.line.strokeWidth), t8.lineCap = "square", A3.axis.domain.line.stroke && (t8.strokeStyle = A3.axis.domain.line.stroke), t8.beginPath(), t8.moveTo(0, 0), t8.lineTo("x" === n5 ? c4 : 0, "x" === n5 ? 0 : c4), t8.stroke());
  var B4 = "function" == typeof v4 ? v4 : function(t9) {
    return "" + t9;
  };
  if (X4.forEach(function(e7) {
    var i5;
    (null != (i5 = A3.axis.ticks.line.strokeWidth) ? i5 : 0) > 0 && (t8.lineWidth = Number(A3.axis.ticks.line.strokeWidth), t8.lineCap = "square", A3.axis.ticks.line.stroke && (t8.strokeStyle = A3.axis.ticks.line.stroke), t8.beginPath(), t8.moveTo(e7.x, e7.y), t8.lineTo(e7.x + e7.lineX, e7.y + e7.lineY), t8.stroke());
    var n6 = B4(e7.value);
    t8.save(), t8.translate(e7.x + e7.textX, e7.y + e7.textY), t8.rotate(ui(h3)), A3.axis.ticks.text.fill && (t8.fillStyle = A3.axis.ticks.text.fill), t8.fillText(String(n6), 0, 0), t8.restore();
  }), void 0 !== b5) {
    var z2 = 0, V2 = 0, C4 = 0, R = "center";
    "y" === n5 ? (C4 = -90, z2 = w4, "start" === S4 ? (R = "start", V2 = c4) : "middle" === S4 ? (R = "center", V2 = c4 / 2) : "end" === S4 && (R = "end")) : (V2 = w4, "start" === S4 ? R = "start" : "middle" === S4 ? (R = "center", z2 = c4 / 2) : "end" === S4 && (R = "end", z2 = c4)), t8.translate(z2, V2), t8.rotate(ui(C4)), t8.font = (A3.axis.legend.text.fontWeight ? A3.axis.legend.text.fontWeight + " " : "") + A3.axis.legend.text.fontSize + "px " + A3.axis.legend.text.fontFamily, A3.axis.legend.text.fill && (t8.fillStyle = A3.axis.legend.text.fill), t8.textAlign = R, t8.textBaseline = "middle", t8.fillText(b5, 0, 0);
  }
  t8.restore();
};
var V = function(t8, e6) {
  var i4 = e6.xScale, n5 = e6.yScale, r4 = e6.width, a4 = e6.height, o3 = e6.top, l2 = e6.right, s3 = e6.bottom, c4 = e6.left, f3 = e6.theme, x3 = { top: o3, right: l2, bottom: s3, left: c4 };
  O.forEach(function(e7) {
    var o4 = x3[e7];
    if (!o4)
      return null;
    var l3 = "top" === e7 || "bottom" === e7, s4 = "top" === e7 || "left" === e7 ? "before" : "after", c5 = l3 ? i4 : n5, d2 = b2(o4.format, c5);
    z(t8, v({}, o4, { axis: l3 ? "x" : "y", x: "right" === e7 ? r4 : 0, y: "bottom" === e7 ? a4 : 0, scale: c5, format: d2, length: l3 ? r4 : a4, ticksPosition: s4, theme: f3 }));
  });
};
var C3 = function(t8, e6) {
  var i4 = e6.width, n5 = e6.height, r4 = e6.scale, a4 = e6.axis, o3 = e6.values;
  P2({ width: i4, height: n5, scale: r4, axis: a4, values: o3 }).forEach(function(e7) {
    t8.beginPath(), t8.moveTo(e7.x1, e7.y1), t8.lineTo(e7.x2, e7.y2), t8.stroke();
  });
};

// ../node_modules/@nivo/line/node_modules/@nivo/legends/dist/nivo-legends.es.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var a2 = __toESM(require_react());
var import_react6 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());
var m = function(e6) {
  var i4 = e6.x, n5 = e6.y, o3 = e6.size, r4 = e6.fill, l2 = e6.opacity, a4 = void 0 === l2 ? 1 : l2, c4 = e6.borderWidth, s3 = void 0 === c4 ? 0 : c4, d2 = e6.borderColor;
  return (0, import_jsx_runtime2.jsx)("circle", { r: o3 / 2, cx: i4 + o3 / 2, cy: n5 + o3 / 2, fill: r4, opacity: a4, strokeWidth: s3, stroke: void 0 === d2 ? "transparent" : d2, style: { pointerEvents: "none" } });
};
var f = function(e6) {
  var i4 = e6.x, n5 = e6.y, o3 = e6.size, r4 = e6.fill, l2 = e6.opacity, a4 = void 0 === l2 ? 1 : l2, c4 = e6.borderWidth, s3 = void 0 === c4 ? 0 : c4, d2 = e6.borderColor;
  return (0, import_jsx_runtime2.jsx)("g", { transform: "translate(" + i4 + "," + n5 + ")", children: (0, import_jsx_runtime2.jsx)("path", { d: "\n                    M" + o3 / 2 + " 0\n                    L" + 0.8 * o3 + " " + o3 / 2 + "\n                    L" + o3 / 2 + " " + o3 + "\n                    L" + 0.2 * o3 + " " + o3 / 2 + "\n                    L" + o3 / 2 + " 0\n                ", fill: r4, opacity: a4, strokeWidth: s3, stroke: void 0 === d2 ? "transparent" : d2, style: { pointerEvents: "none" } }) });
};
var u = function(e6) {
  var i4 = e6.x, n5 = e6.y, o3 = e6.size, r4 = e6.fill, l2 = e6.opacity, a4 = void 0 === l2 ? 1 : l2, c4 = e6.borderWidth, s3 = void 0 === c4 ? 0 : c4, d2 = e6.borderColor;
  return (0, import_jsx_runtime2.jsx)("rect", { x: i4, y: n5, fill: r4, opacity: a4, strokeWidth: s3, stroke: void 0 === d2 ? "transparent" : d2, width: o3, height: o3, style: { pointerEvents: "none" } });
};
var v2 = function(e6) {
  var i4 = e6.x, n5 = e6.y, o3 = e6.size, r4 = e6.fill, l2 = e6.opacity, a4 = void 0 === l2 ? 1 : l2, c4 = e6.borderWidth, s3 = void 0 === c4 ? 0 : c4, d2 = e6.borderColor;
  return (0, import_jsx_runtime2.jsx)("g", { transform: "translate(" + i4 + "," + n5 + ")", children: (0, import_jsx_runtime2.jsx)("path", { d: "\n                M" + o3 / 2 + " 0\n                L" + o3 + " " + o3 + "\n                L0 " + o3 + "\n                L" + o3 / 2 + " 0\n            ", fill: r4, opacity: a4, strokeWidth: s3, stroke: void 0 === d2 ? "transparent" : d2, style: { pointerEvents: "none" } }) });
};
function p2() {
  return p2 = Object.assign || function(t8) {
    for (var e6 = 1; e6 < arguments.length; e6++) {
      var i4 = arguments[e6];
      for (var n5 in i4)
        Object.prototype.hasOwnProperty.call(i4, n5) && (t8[n5] = i4[n5]);
    }
    return t8;
  }, p2.apply(this, arguments);
}
var b3 = { top: 0, right: 0, bottom: 0, left: 0 };
var k3 = function(t8) {
  var e6, i4 = t8.direction, n5 = t8.itemsSpacing, o3 = t8.padding, r4 = t8.itemCount, l2 = t8.itemWidth, a4 = t8.itemHeight;
  if ("number" != typeof o3 && ("object" != typeof (e6 = o3) || Array.isArray(e6) || null === e6))
    throw new Error("Invalid property padding, must be one of: number, object");
  var c4 = "number" == typeof o3 ? { top: o3, right: o3, bottom: o3, left: o3 } : p2({}, b3, o3), s3 = c4.left + c4.right, d2 = c4.top + c4.bottom, h3 = l2 + s3, g4 = a4 + d2, m2 = (r4 - 1) * n5;
  return "row" === i4 ? h3 = l2 * r4 + m2 + s3 : "column" === i4 && (g4 = a4 * r4 + m2 + d2), { width: h3, height: g4, padding: c4 };
};
var x = function(t8) {
  var e6 = t8.anchor, i4 = t8.translateX, n5 = t8.translateY, o3 = t8.containerWidth, r4 = t8.containerHeight, l2 = t8.width, a4 = t8.height, c4 = i4, s3 = n5;
  switch (e6) {
    case "top":
      c4 += (o3 - l2) / 2;
      break;
    case "top-right":
      c4 += o3 - l2;
      break;
    case "right":
      c4 += o3 - l2, s3 += (r4 - a4) / 2;
      break;
    case "bottom-right":
      c4 += o3 - l2, s3 += r4 - a4;
      break;
    case "bottom":
      c4 += (o3 - l2) / 2, s3 += r4 - a4;
      break;
    case "bottom-left":
      s3 += r4 - a4;
      break;
    case "left":
      s3 += (r4 - a4) / 2;
      break;
    case "center":
      c4 += (o3 - l2) / 2, s3 += (r4 - a4) / 2;
  }
  return { x: c4, y: s3 };
};
var S2 = function(t8) {
  var e6, i4, n5, o3, r4, l2, a4 = t8.direction, c4 = t8.justify, s3 = t8.symbolSize, d2 = t8.symbolSpacing, h3 = t8.width, g4 = t8.height;
  switch (a4) {
    case "left-to-right":
      e6 = 0, i4 = (g4 - s3) / 2, o3 = g4 / 2, l2 = "central", c4 ? (n5 = h3, r4 = "end") : (n5 = s3 + d2, r4 = "start");
      break;
    case "right-to-left":
      e6 = h3 - s3, i4 = (g4 - s3) / 2, o3 = g4 / 2, l2 = "central", c4 ? (n5 = 0, r4 = "start") : (n5 = h3 - s3 - d2, r4 = "end");
      break;
    case "top-to-bottom":
      e6 = (h3 - s3) / 2, i4 = 0, n5 = h3 / 2, r4 = "middle", c4 ? (o3 = g4, l2 = "alphabetic") : (o3 = s3 + d2, l2 = "text-before-edge");
      break;
    case "bottom-to-top":
      e6 = (h3 - s3) / 2, i4 = g4 - s3, n5 = h3 / 2, r4 = "middle", c4 ? (o3 = 0, l2 = "text-before-edge") : (o3 = g4 - s3 - d2, l2 = "alphabetic");
  }
  return { symbolX: e6, symbolY: i4, labelX: n5, labelY: o3, labelAnchor: r4, labelAlignment: l2 };
};
var O2 = { circle: m, diamond: f, square: u, triangle: v2 };
var B3 = function(i4) {
  var n5, r4, l2, c4, h3, g4, m2, f3, u2, v4, y2, b5 = i4.x, k5 = i4.y, x3 = i4.width, A3 = i4.height, W3 = i4.data, z2 = i4.direction, C4 = void 0 === z2 ? "left-to-right" : z2, B4 = i4.justify, w4 = void 0 !== B4 && B4, X4 = i4.textColor, Y4 = i4.background, H2 = void 0 === Y4 ? "transparent" : Y4, E2 = i4.opacity, j = void 0 === E2 ? 1 : E2, T3 = i4.symbolShape, L2 = void 0 === T3 ? "square" : T3, M = i4.symbolSize, F = void 0 === M ? 16 : M, P4 = i4.symbolSpacing, R = void 0 === P4 ? 8 : P4, q = i4.symbolBorderWidth, V2 = void 0 === q ? 0 : q, D2 = i4.symbolBorderColor, G = void 0 === D2 ? "transparent" : D2, I = i4.onClick, N2 = i4.onMouseEnter, _2 = i4.onMouseLeave, J2 = i4.toggleSerie, K4 = i4.effects, Q3 = (0, import_react6.useState)({}), U = Q3[0], Z = Q3[1], $2 = Vt(), tt2 = (0, import_react6.useCallback)(function(t8) {
    if (K4) {
      var e6 = K4.filter(function(t9) {
        return "hover" === t9.on;
      }).reduce(function(t9, e7) {
        return p2({}, t9, e7.style);
      }, {});
      Z(e6);
    }
    null == N2 || N2(W3, t8);
  }, [N2, W3, K4]), et2 = (0, import_react6.useCallback)(function(t8) {
    if (K4) {
      var e6 = K4.filter(function(t9) {
        return "hover" !== t9.on;
      }).reduce(function(t9, e7) {
        return p2({}, t9, e7.style);
      }, {});
      Z(e6);
    }
    null == _2 || _2(W3, t8);
  }, [_2, W3, K4]), it2 = S2({ direction: C4, justify: w4, symbolSize: null != (n5 = U.symbolSize) ? n5 : F, symbolSpacing: R, width: x3, height: A3 }), nt = it2.symbolX, ot = it2.symbolY, rt = it2.labelX, lt = it2.labelY, at = it2.labelAnchor, ct = it2.labelAlignment, st = [I, N2, _2, J2].some(function(t8) {
    return void 0 !== t8;
  }), dt = "function" == typeof L2 ? L2 : O2[L2];
  return (0, import_jsx_runtime2.jsxs)("g", { transform: "translate(" + b5 + "," + k5 + ")", style: { opacity: null != (r4 = U.itemOpacity) ? r4 : j }, children: [(0, import_jsx_runtime2.jsx)("rect", { width: x3, height: A3, fill: null != (l2 = U.itemBackground) ? l2 : H2, style: { cursor: st ? "pointer" : "auto" }, onClick: function(t8) {
    null == I || I(W3, t8), null == J2 || J2(W3.id);
  }, onMouseEnter: tt2, onMouseLeave: et2 }), a2.createElement(dt, p2({ id: W3.id, x: nt, y: ot, size: null != (c4 = U.symbolSize) ? c4 : F, fill: null != (h3 = null != (g4 = W3.fill) ? g4 : W3.color) ? h3 : "black", borderWidth: null != (m2 = U.symbolBorderWidth) ? m2 : V2, borderColor: null != (f3 = U.symbolBorderColor) ? f3 : G }, W3.hidden ? $2.legends.hidden.symbol : void 0)), (0, import_jsx_runtime2.jsx)("text", { textAnchor: at, style: p2({}, $2.legends.text, { fill: null != (u2 = null != (v4 = null != (y2 = U.itemTextColor) ? y2 : X4) ? v4 : $2.legends.text.fill) ? u2 : "black", dominantBaseline: ct, pointerEvents: "none", userSelect: "none" }, W3.hidden ? $2.legends.hidden.text : void 0), x: rt, y: lt, children: W3.label })] });
};
var w3 = function(e6) {
  var i4 = e6.data, n5 = e6.x, o3 = e6.y, r4 = e6.direction, l2 = e6.padding, a4 = void 0 === l2 ? 0 : l2, c4 = e6.justify, s3 = e6.effects, d2 = e6.itemWidth, h3 = e6.itemHeight, g4 = e6.itemDirection, m2 = void 0 === g4 ? "left-to-right" : g4, f3 = e6.itemsSpacing, u2 = void 0 === f3 ? 0 : f3, v4 = e6.itemTextColor, p4 = e6.itemBackground, y2 = void 0 === p4 ? "transparent" : p4, b5 = e6.itemOpacity, x3 = void 0 === b5 ? 1 : b5, S4 = e6.symbolShape, A3 = e6.symbolSize, W3 = e6.symbolSpacing, z2 = e6.symbolBorderWidth, C4 = e6.symbolBorderColor, O4 = e6.onClick, w4 = e6.onMouseEnter, X4 = e6.onMouseLeave, Y4 = e6.toggleSerie, H2 = k3({ itemCount: i4.length, itemWidth: d2, itemHeight: h3, itemsSpacing: u2, direction: r4, padding: a4 }).padding, E2 = "row" === r4 ? d2 + u2 : 0, j = "column" === r4 ? h3 + u2 : 0;
  return (0, import_jsx_runtime2.jsx)("g", { transform: "translate(" + n5 + "," + o3 + ")", children: i4.map(function(e7, i5) {
    return (0, import_jsx_runtime2.jsx)(B3, { data: e7, x: i5 * E2 + H2.left, y: i5 * j + H2.top, width: d2, height: h3, direction: m2, justify: c4, effects: s3, textColor: v4, background: y2, opacity: x3, symbolShape: S4, symbolSize: A3, symbolSpacing: W3, symbolBorderWidth: z2, symbolBorderColor: C4, onClick: O4, onMouseEnter: w4, onMouseLeave: X4, toggleSerie: Y4 }, i5);
  }) });
};
var X3 = function(e6) {
  var i4 = e6.data, n5 = e6.containerWidth, o3 = e6.containerHeight, r4 = e6.translateX, l2 = void 0 === r4 ? 0 : r4, a4 = e6.translateY, c4 = void 0 === a4 ? 0 : a4, s3 = e6.anchor, d2 = e6.direction, h3 = e6.padding, g4 = void 0 === h3 ? 0 : h3, m2 = e6.justify, f3 = e6.itemsSpacing, u2 = void 0 === f3 ? 0 : f3, v4 = e6.itemWidth, p4 = e6.itemHeight, y2 = e6.itemDirection, b5 = e6.itemTextColor, S4 = e6.itemBackground, A3 = e6.itemOpacity, W3 = e6.symbolShape, z2 = e6.symbolSize, C4 = e6.symbolSpacing, O4 = e6.symbolBorderWidth, B4 = e6.symbolBorderColor, X4 = e6.onClick, Y4 = e6.onMouseEnter, H2 = e6.onMouseLeave, E2 = e6.toggleSerie, j = e6.effects, T3 = k3({ itemCount: i4.length, itemsSpacing: u2, itemWidth: v4, itemHeight: p4, direction: d2, padding: g4 }), L2 = T3.width, M = T3.height, F = x({ anchor: s3, translateX: l2, translateY: c4, containerWidth: n5, containerHeight: o3, width: L2, height: M }), P4 = F.x, R = F.y;
  return (0, import_jsx_runtime2.jsx)(w3, { data: i4, x: P4, y: R, direction: d2, padding: g4, justify: m2, effects: j, itemsSpacing: u2, itemWidth: v4, itemHeight: p4, itemDirection: y2, itemTextColor: b5, itemBackground: S4, itemOpacity: A3, symbolShape: W3, symbolSize: z2, symbolSpacing: C4, symbolBorderWidth: O4, symbolBorderColor: B4, onClick: X4, onMouseEnter: Y4, onMouseLeave: H2, toggleSerie: "boolean" == typeof E2 ? void 0 : E2 });
};
var Y3 = { start: "left", middle: "center", end: "right" };
var H = function(t8, e6) {
  var i4 = e6.data, n5 = e6.containerWidth, o3 = e6.containerHeight, r4 = e6.translateX, l2 = void 0 === r4 ? 0 : r4, a4 = e6.translateY, c4 = void 0 === a4 ? 0 : a4, s3 = e6.anchor, d2 = e6.direction, h3 = e6.padding, g4 = void 0 === h3 ? 0 : h3, m2 = e6.justify, f3 = void 0 !== m2 && m2, u2 = e6.itemsSpacing, v4 = void 0 === u2 ? 0 : u2, p4 = e6.itemWidth, y2 = e6.itemHeight, b5 = e6.itemDirection, A3 = void 0 === b5 ? "left-to-right" : b5, W3 = e6.itemTextColor, z2 = e6.symbolSize, C4 = void 0 === z2 ? 16 : z2, O4 = e6.symbolSpacing, B4 = void 0 === O4 ? 8 : O4, w4 = e6.theme, X4 = k3({ itemCount: i4.length, itemWidth: p4, itemHeight: y2, itemsSpacing: v4, direction: d2, padding: g4 }), H2 = X4.width, E2 = X4.height, j = X4.padding, T3 = x({ anchor: s3, translateX: l2, translateY: c4, containerWidth: n5, containerHeight: o3, width: H2, height: E2 }), L2 = T3.x, M = T3.y, F = "row" === d2 ? p4 + v4 : 0, P4 = "column" === d2 ? y2 + v4 : 0;
  t8.save(), t8.translate(L2, M), t8.font = w4.legends.text.fontSize + "px " + (w4.legends.text.fontFamily || "sans-serif"), i4.forEach(function(e7, i5) {
    var n6, o4, r5 = i5 * F + j.left, l3 = i5 * P4 + j.top, a5 = S2({ direction: A3, justify: f3, symbolSize: C4, symbolSpacing: B4, width: p4, height: y2 }), c5 = a5.symbolX, s4 = a5.symbolY, d3 = a5.labelX, h4 = a5.labelY, g5 = a5.labelAnchor, m3 = a5.labelAlignment;
    t8.fillStyle = null != (n6 = e7.color) ? n6 : "black", t8.fillRect(r5 + c5, l3 + s4, C4, C4), t8.textAlign = Y3[g5], "central" === m3 && (t8.textBaseline = "middle"), t8.fillStyle = null != (o4 = null != W3 ? W3 : w4.legends.text.fill) ? o4 : "black", t8.fillText(String(e7.label), r5 + d3, l3 + h4);
  }), t8.restore();
};
var T2 = { data: import_prop_types3.default.arrayOf(import_prop_types3.default.object), anchor: import_prop_types3.default.oneOf(["top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", "center"]).isRequired, translateX: import_prop_types3.default.number, translateY: import_prop_types3.default.number, direction: import_prop_types3.default.oneOf(["row", "column"]).isRequired, itemsSpacing: import_prop_types3.default.number, itemWidth: import_prop_types3.default.number.isRequired, itemHeight: import_prop_types3.default.number.isRequired, itemDirection: import_prop_types3.default.oneOf(["left-to-right", "right-to-left", "top-to-bottom", "bottom-to-top"]), itemTextColor: import_prop_types3.default.string, itemBackground: import_prop_types3.default.string, itemOpacity: import_prop_types3.default.number, symbolShape: import_prop_types3.default.oneOfType([import_prop_types3.default.oneOf(["circle", "diamond", "square", "triangle"]), import_prop_types3.default.func]), symbolSize: import_prop_types3.default.number, symbolSpacing: import_prop_types3.default.number, symbolBorderWidth: import_prop_types3.default.number, symbolBorderColor: import_prop_types3.default.string, onClick: import_prop_types3.default.func, onMouseEnter: import_prop_types3.default.func, onMouseLeave: import_prop_types3.default.func, effects: import_prop_types3.default.arrayOf(import_prop_types3.default.shape({ on: import_prop_types3.default.oneOfType([import_prop_types3.default.oneOf(["hover"])]).isRequired, style: import_prop_types3.default.shape({ itemTextColor: import_prop_types3.default.string, itemBackground: import_prop_types3.default.string, itemOpacity: import_prop_types3.default.number, symbolSize: import_prop_types3.default.number, symbolBorderWidth: import_prop_types3.default.number, symbolBorderColor: import_prop_types3.default.string }).isRequired })) };

// ../node_modules/@nivo/line/dist/nivo-line.es.js
var import_prop_types4 = __toESM(require_prop_types());
var import_jsx_runtime4 = __toESM(require_jsx_runtime());

// ../node_modules/@nivo/voronoi/dist/nivo-voronoi.es.js
var import_react7 = __toESM(require_react());

// ../node_modules/delaunator/index.js
var EPSILON = Math.pow(2, -52);
var EDGE_STACK = new Uint32Array(512);
var Delaunator = class _Delaunator {
  static from(points, getX = defaultGetX, getY = defaultGetY) {
    const n5 = points.length;
    const coords = new Float64Array(n5 * 2);
    for (let i4 = 0; i4 < n5; i4++) {
      const p4 = points[i4];
      coords[2 * i4] = getX(p4);
      coords[2 * i4 + 1] = getY(p4);
    }
    return new _Delaunator(coords);
  }
  constructor(coords) {
    const n5 = coords.length >> 1;
    if (n5 > 0 && typeof coords[0] !== "number")
      throw new Error("Expected coords to contain numbers.");
    this.coords = coords;
    const maxTriangles = Math.max(2 * n5 - 5, 0);
    this._triangles = new Uint32Array(maxTriangles * 3);
    this._halfedges = new Int32Array(maxTriangles * 3);
    this._hashSize = Math.ceil(Math.sqrt(n5));
    this._hullPrev = new Uint32Array(n5);
    this._hullNext = new Uint32Array(n5);
    this._hullTri = new Uint32Array(n5);
    this._hullHash = new Int32Array(this._hashSize).fill(-1);
    this._ids = new Uint32Array(n5);
    this._dists = new Float64Array(n5);
    this.update();
  }
  update() {
    const { coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash } = this;
    const n5 = coords.length >> 1;
    let minX = Infinity;
    let minY = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    for (let i4 = 0; i4 < n5; i4++) {
      const x3 = coords[2 * i4];
      const y2 = coords[2 * i4 + 1];
      if (x3 < minX)
        minX = x3;
      if (y2 < minY)
        minY = y2;
      if (x3 > maxX)
        maxX = x3;
      if (y2 > maxY)
        maxY = y2;
      this._ids[i4] = i4;
    }
    const cx = (minX + maxX) / 2;
    const cy = (minY + maxY) / 2;
    let minDist = Infinity;
    let i0, i1, i22;
    for (let i4 = 0; i4 < n5; i4++) {
      const d2 = dist(cx, cy, coords[2 * i4], coords[2 * i4 + 1]);
      if (d2 < minDist) {
        i0 = i4;
        minDist = d2;
      }
    }
    const i0x = coords[2 * i0];
    const i0y = coords[2 * i0 + 1];
    minDist = Infinity;
    for (let i4 = 0; i4 < n5; i4++) {
      if (i4 === i0)
        continue;
      const d2 = dist(i0x, i0y, coords[2 * i4], coords[2 * i4 + 1]);
      if (d2 < minDist && d2 > 0) {
        i1 = i4;
        minDist = d2;
      }
    }
    let i1x = coords[2 * i1];
    let i1y = coords[2 * i1 + 1];
    let minRadius = Infinity;
    for (let i4 = 0; i4 < n5; i4++) {
      if (i4 === i0 || i4 === i1)
        continue;
      const r4 = circumradius(i0x, i0y, i1x, i1y, coords[2 * i4], coords[2 * i4 + 1]);
      if (r4 < minRadius) {
        i22 = i4;
        minRadius = r4;
      }
    }
    let i2x = coords[2 * i22];
    let i2y = coords[2 * i22 + 1];
    if (minRadius === Infinity) {
      for (let i4 = 0; i4 < n5; i4++) {
        this._dists[i4] = coords[2 * i4] - coords[0] || coords[2 * i4 + 1] - coords[1];
      }
      quicksort(this._ids, this._dists, 0, n5 - 1);
      const hull = new Uint32Array(n5);
      let j = 0;
      for (let i4 = 0, d0 = -Infinity; i4 < n5; i4++) {
        const id = this._ids[i4];
        if (this._dists[id] > d0) {
          hull[j++] = id;
          d0 = this._dists[id];
        }
      }
      this.hull = hull.subarray(0, j);
      this.triangles = new Uint32Array(0);
      this.halfedges = new Uint32Array(0);
      return;
    }
    if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {
      const i4 = i1;
      const x3 = i1x;
      const y2 = i1y;
      i1 = i22;
      i1x = i2x;
      i1y = i2y;
      i22 = i4;
      i2x = x3;
      i2y = y2;
    }
    const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
    this._cx = center.x;
    this._cy = center.y;
    for (let i4 = 0; i4 < n5; i4++) {
      this._dists[i4] = dist(coords[2 * i4], coords[2 * i4 + 1], center.x, center.y);
    }
    quicksort(this._ids, this._dists, 0, n5 - 1);
    this._hullStart = i0;
    let hullSize = 3;
    hullNext[i0] = hullPrev[i22] = i1;
    hullNext[i1] = hullPrev[i0] = i22;
    hullNext[i22] = hullPrev[i1] = i0;
    hullTri[i0] = 0;
    hullTri[i1] = 1;
    hullTri[i22] = 2;
    hullHash.fill(-1);
    hullHash[this._hashKey(i0x, i0y)] = i0;
    hullHash[this._hashKey(i1x, i1y)] = i1;
    hullHash[this._hashKey(i2x, i2y)] = i22;
    this.trianglesLen = 0;
    this._addTriangle(i0, i1, i22, -1, -1, -1);
    for (let k5 = 0, xp, yp; k5 < this._ids.length; k5++) {
      const i4 = this._ids[k5];
      const x3 = coords[2 * i4];
      const y2 = coords[2 * i4 + 1];
      if (k5 > 0 && Math.abs(x3 - xp) <= EPSILON && Math.abs(y2 - yp) <= EPSILON)
        continue;
      xp = x3;
      yp = y2;
      if (i4 === i0 || i4 === i1 || i4 === i22)
        continue;
      let start2 = 0;
      for (let j = 0, key = this._hashKey(x3, y2); j < this._hashSize; j++) {
        start2 = hullHash[(key + j) % this._hashSize];
        if (start2 !== -1 && start2 !== hullNext[start2])
          break;
      }
      start2 = hullPrev[start2];
      let e6 = start2, q;
      while (q = hullNext[e6], !orient(x3, y2, coords[2 * e6], coords[2 * e6 + 1], coords[2 * q], coords[2 * q + 1])) {
        e6 = q;
        if (e6 === start2) {
          e6 = -1;
          break;
        }
      }
      if (e6 === -1)
        continue;
      let t8 = this._addTriangle(e6, i4, hullNext[e6], -1, -1, hullTri[e6]);
      hullTri[i4] = this._legalize(t8 + 2);
      hullTri[e6] = t8;
      hullSize++;
      let n6 = hullNext[e6];
      while (q = hullNext[n6], orient(x3, y2, coords[2 * n6], coords[2 * n6 + 1], coords[2 * q], coords[2 * q + 1])) {
        t8 = this._addTriangle(n6, i4, q, hullTri[i4], -1, hullTri[n6]);
        hullTri[i4] = this._legalize(t8 + 2);
        hullNext[n6] = n6;
        hullSize--;
        n6 = q;
      }
      if (e6 === start2) {
        while (q = hullPrev[e6], orient(x3, y2, coords[2 * q], coords[2 * q + 1], coords[2 * e6], coords[2 * e6 + 1])) {
          t8 = this._addTriangle(q, i4, e6, -1, hullTri[e6], hullTri[q]);
          this._legalize(t8 + 2);
          hullTri[q] = t8;
          hullNext[e6] = e6;
          hullSize--;
          e6 = q;
        }
      }
      this._hullStart = hullPrev[i4] = e6;
      hullNext[e6] = hullPrev[n6] = i4;
      hullNext[i4] = n6;
      hullHash[this._hashKey(x3, y2)] = i4;
      hullHash[this._hashKey(coords[2 * e6], coords[2 * e6 + 1])] = e6;
    }
    this.hull = new Uint32Array(hullSize);
    for (let i4 = 0, e6 = this._hullStart; i4 < hullSize; i4++) {
      this.hull[i4] = e6;
      e6 = hullNext[e6];
    }
    this.triangles = this._triangles.subarray(0, this.trianglesLen);
    this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
  }
  _hashKey(x3, y2) {
    return Math.floor(pseudoAngle(x3 - this._cx, y2 - this._cy) * this._hashSize) % this._hashSize;
  }
  _legalize(a4) {
    const { _triangles: triangles, _halfedges: halfedges, coords } = this;
    let i4 = 0;
    let ar = 0;
    while (true) {
      const b5 = halfedges[a4];
      const a0 = a4 - a4 % 3;
      ar = a0 + (a4 + 2) % 3;
      if (b5 === -1) {
        if (i4 === 0)
          break;
        a4 = EDGE_STACK[--i4];
        continue;
      }
      const b0 = b5 - b5 % 3;
      const al = a0 + (a4 + 1) % 3;
      const bl = b0 + (b5 + 2) % 3;
      const p0 = triangles[ar];
      const pr = triangles[a4];
      const pl = triangles[al];
      const p1 = triangles[bl];
      const illegal = inCircle(
        coords[2 * p0],
        coords[2 * p0 + 1],
        coords[2 * pr],
        coords[2 * pr + 1],
        coords[2 * pl],
        coords[2 * pl + 1],
        coords[2 * p1],
        coords[2 * p1 + 1]
      );
      if (illegal) {
        triangles[a4] = p1;
        triangles[b5] = p0;
        const hbl = halfedges[bl];
        if (hbl === -1) {
          let e6 = this._hullStart;
          do {
            if (this._hullTri[e6] === bl) {
              this._hullTri[e6] = a4;
              break;
            }
            e6 = this._hullPrev[e6];
          } while (e6 !== this._hullStart);
        }
        this._link(a4, hbl);
        this._link(b5, halfedges[ar]);
        this._link(ar, bl);
        const br = b0 + (b5 + 1) % 3;
        if (i4 < EDGE_STACK.length) {
          EDGE_STACK[i4++] = br;
        }
      } else {
        if (i4 === 0)
          break;
        a4 = EDGE_STACK[--i4];
      }
    }
    return ar;
  }
  _link(a4, b5) {
    this._halfedges[a4] = b5;
    if (b5 !== -1)
      this._halfedges[b5] = a4;
  }
  // add a new triangle given vertex indices and adjacent half-edge ids
  _addTriangle(i0, i1, i22, a4, b5, c4) {
    const t8 = this.trianglesLen;
    this._triangles[t8] = i0;
    this._triangles[t8 + 1] = i1;
    this._triangles[t8 + 2] = i22;
    this._link(t8, a4);
    this._link(t8 + 1, b5);
    this._link(t8 + 2, c4);
    this.trianglesLen += 3;
    return t8;
  }
};
function pseudoAngle(dx, dy) {
  const p4 = dx / (Math.abs(dx) + Math.abs(dy));
  return (dy > 0 ? 3 - p4 : 1 + p4) / 4;
}
function dist(ax, ay, bx, by) {
  const dx = ax - bx;
  const dy = ay - by;
  return dx * dx + dy * dy;
}
function orientIfSure(px, py, rx, ry, qx, qy) {
  const l2 = (ry - py) * (qx - px);
  const r4 = (rx - px) * (qy - py);
  return Math.abs(l2 - r4) >= 33306690738754716e-32 * Math.abs(l2 + r4) ? l2 - r4 : 0;
}
function orient(rx, ry, qx, qy, px, py) {
  const sign = orientIfSure(px, py, rx, ry, qx, qy) || orientIfSure(rx, ry, qx, qy, px, py) || orientIfSure(qx, qy, px, py, rx, ry);
  return sign < 0;
}
function inCircle(ax, ay, bx, by, cx, cy, px, py) {
  const dx = ax - px;
  const dy = ay - py;
  const ex = bx - px;
  const ey = by - py;
  const fx = cx - px;
  const fy = cy - py;
  const ap = dx * dx + dy * dy;
  const bp = ex * ex + ey * ey;
  const cp = fx * fx + fy * fy;
  return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
}
function circumradius(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d2 = 0.5 / (dx * ey - dy * ex);
  const x3 = (ey * bl - dy * cl) * d2;
  const y2 = (dx * cl - ex * bl) * d2;
  return x3 * x3 + y2 * y2;
}
function circumcenter(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d2 = 0.5 / (dx * ey - dy * ex);
  const x3 = ax + (ey * bl - dy * cl) * d2;
  const y2 = ay + (dx * cl - ex * bl) * d2;
  return { x: x3, y: y2 };
}
function quicksort(ids, dists, left, right) {
  if (right - left <= 20) {
    for (let i4 = left + 1; i4 <= right; i4++) {
      const temp = ids[i4];
      const tempDist = dists[temp];
      let j = i4 - 1;
      while (j >= left && dists[ids[j]] > tempDist)
        ids[j + 1] = ids[j--];
      ids[j + 1] = temp;
    }
  } else {
    const median = left + right >> 1;
    let i4 = left + 1;
    let j = right;
    swap(ids, median, i4);
    if (dists[ids[left]] > dists[ids[right]])
      swap(ids, left, right);
    if (dists[ids[i4]] > dists[ids[right]])
      swap(ids, i4, right);
    if (dists[ids[left]] > dists[ids[i4]])
      swap(ids, left, i4);
    const temp = ids[i4];
    const tempDist = dists[temp];
    while (true) {
      do
        i4++;
      while (dists[ids[i4]] < tempDist);
      do
        j--;
      while (dists[ids[j]] > tempDist);
      if (j < i4)
        break;
      swap(ids, i4, j);
    }
    ids[left + 1] = ids[j];
    ids[j] = temp;
    if (right - i4 + 1 >= j - left) {
      quicksort(ids, dists, i4, right);
      quicksort(ids, dists, left, j - 1);
    } else {
      quicksort(ids, dists, left, j - 1);
      quicksort(ids, dists, i4, right);
    }
  }
}
function swap(arr, i4, j) {
  const tmp = arr[i4];
  arr[i4] = arr[j];
  arr[j] = tmp;
}
function defaultGetX(p4) {
  return p4[0];
}
function defaultGetY(p4) {
  return p4[1];
}

// ../node_modules/d3-delaunay/src/path.js
var epsilon = 1e-6;
var Path = class {
  constructor() {
    this._x0 = this._y0 = // start of current subpath
    this._x1 = this._y1 = null;
    this._ = "";
  }
  moveTo(x3, y2) {
    this._ += `M${this._x0 = this._x1 = +x3},${this._y0 = this._y1 = +y2}`;
  }
  closePath() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  }
  lineTo(x3, y2) {
    this._ += `L${this._x1 = +x3},${this._y1 = +y2}`;
  }
  arc(x3, y2, r4) {
    x3 = +x3, y2 = +y2, r4 = +r4;
    const x0 = x3 + r4;
    const y0 = y2;
    if (r4 < 0)
      throw new Error("negative radius");
    if (this._x1 === null)
      this._ += `M${x0},${y0}`;
    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon)
      this._ += "L" + x0 + "," + y0;
    if (!r4)
      return;
    this._ += `A${r4},${r4},0,1,1,${x3 - r4},${y2}A${r4},${r4},0,1,1,${this._x1 = x0},${this._y1 = y0}`;
  }
  rect(x3, y2, w4, h3) {
    this._ += `M${this._x0 = this._x1 = +x3},${this._y0 = this._y1 = +y2}h${+w4}v${+h3}h${-w4}Z`;
  }
  value() {
    return this._ || null;
  }
};

// ../node_modules/d3-delaunay/src/polygon.js
var Polygon = class {
  constructor() {
    this._ = [];
  }
  moveTo(x3, y2) {
    this._.push([x3, y2]);
  }
  closePath() {
    this._.push(this._[0].slice());
  }
  lineTo(x3, y2) {
    this._.push([x3, y2]);
  }
  value() {
    return this._.length ? this._ : null;
  }
};

// ../node_modules/d3-delaunay/src/voronoi.js
var Voronoi = class {
  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {
    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin)))
      throw new Error("invalid bounds");
    this.delaunay = delaunay;
    this._circumcenters = new Float64Array(delaunay.points.length * 2);
    this.vectors = new Float64Array(delaunay.points.length * 2);
    this.xmax = xmax, this.xmin = xmin;
    this.ymax = ymax, this.ymin = ymin;
    this._init();
  }
  update() {
    this.delaunay.update();
    this._init();
    return this;
  }
  _init() {
    const { delaunay: { points, hull, triangles }, vectors } = this;
    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);
    for (let i4 = 0, j = 0, n5 = triangles.length, x3, y2; i4 < n5; i4 += 3, j += 2) {
      const t13 = triangles[i4] * 2;
      const t22 = triangles[i4 + 1] * 2;
      const t32 = triangles[i4 + 2] * 2;
      const x12 = points[t13];
      const y12 = points[t13 + 1];
      const x22 = points[t22];
      const y22 = points[t22 + 1];
      const x32 = points[t32];
      const y3 = points[t32 + 1];
      const dx = x22 - x12;
      const dy = y22 - y12;
      const ex = x32 - x12;
      const ey = y3 - y12;
      const bl = dx * dx + dy * dy;
      const cl = ex * ex + ey * ey;
      const ab = (dx * ey - dy * ex) * 2;
      if (!ab) {
        x3 = (x12 + x32) / 2 - 1e8 * ey;
        y2 = (y12 + y3) / 2 + 1e8 * ex;
      } else if (Math.abs(ab) < 1e-8) {
        x3 = (x12 + x32) / 2;
        y2 = (y12 + y3) / 2;
      } else {
        const d2 = 1 / ab;
        x3 = x12 + (ey * bl - dy * cl) * d2;
        y2 = y12 + (dx * cl - ex * bl) * d2;
      }
      circumcenters[j] = x3;
      circumcenters[j + 1] = y2;
    }
    let h3 = hull[hull.length - 1];
    let p0, p1 = h3 * 4;
    let x0, x1 = points[2 * h3];
    let y0, y1 = points[2 * h3 + 1];
    vectors.fill(0);
    for (let i4 = 0; i4 < hull.length; ++i4) {
      h3 = hull[i4];
      p0 = p1, x0 = x1, y0 = y1;
      p1 = h3 * 4, x1 = points[2 * h3], y1 = points[2 * h3 + 1];
      vectors[p0 + 2] = vectors[p1] = y0 - y1;
      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;
    }
  }
  render(context) {
    const buffer = context == null ? context = new Path() : void 0;
    const { delaunay: { halfedges, inedges, hull }, circumcenters, vectors } = this;
    if (hull.length <= 1)
      return null;
    for (let i4 = 0, n5 = halfedges.length; i4 < n5; ++i4) {
      const j = halfedges[i4];
      if (j < i4)
        continue;
      const ti2 = Math.floor(i4 / 3) * 2;
      const tj = Math.floor(j / 3) * 2;
      const xi = circumcenters[ti2];
      const yi2 = circumcenters[ti2 + 1];
      const xj = circumcenters[tj];
      const yj = circumcenters[tj + 1];
      this._renderSegment(xi, yi2, xj, yj, context);
    }
    let h0, h1 = hull[hull.length - 1];
    for (let i4 = 0; i4 < hull.length; ++i4) {
      h0 = h1, h1 = hull[i4];
      const t8 = Math.floor(inedges[h1] / 3) * 2;
      const x3 = circumcenters[t8];
      const y2 = circumcenters[t8 + 1];
      const v4 = h0 * 4;
      const p4 = this._project(x3, y2, vectors[v4 + 2], vectors[v4 + 3]);
      if (p4)
        this._renderSegment(x3, y2, p4[0], p4[1], context);
    }
    return buffer && buffer.value();
  }
  renderBounds(context) {
    const buffer = context == null ? context = new Path() : void 0;
    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
    return buffer && buffer.value();
  }
  renderCell(i4, context) {
    const buffer = context == null ? context = new Path() : void 0;
    const points = this._clip(i4);
    if (points === null || !points.length)
      return;
    context.moveTo(points[0], points[1]);
    let n5 = points.length;
    while (points[0] === points[n5 - 2] && points[1] === points[n5 - 1] && n5 > 1)
      n5 -= 2;
    for (let i5 = 2; i5 < n5; i5 += 2) {
      if (points[i5] !== points[i5 - 2] || points[i5 + 1] !== points[i5 - 1])
        context.lineTo(points[i5], points[i5 + 1]);
    }
    context.closePath();
    return buffer && buffer.value();
  }
  *cellPolygons() {
    const { delaunay: { points } } = this;
    for (let i4 = 0, n5 = points.length / 2; i4 < n5; ++i4) {
      const cell = this.cellPolygon(i4);
      if (cell)
        cell.index = i4, yield cell;
    }
  }
  cellPolygon(i4) {
    const polygon = new Polygon();
    this.renderCell(i4, polygon);
    return polygon.value();
  }
  _renderSegment(x0, y0, x1, y1, context) {
    let S4;
    const c0 = this._regioncode(x0, y0);
    const c1 = this._regioncode(x1, y1);
    if (c0 === 0 && c1 === 0) {
      context.moveTo(x0, y0);
      context.lineTo(x1, y1);
    } else if (S4 = this._clipSegment(x0, y0, x1, y1, c0, c1)) {
      context.moveTo(S4[0], S4[1]);
      context.lineTo(S4[2], S4[3]);
    }
  }
  contains(i4, x3, y2) {
    if ((x3 = +x3, x3 !== x3) || (y2 = +y2, y2 !== y2))
      return false;
    return this.delaunay._step(i4, x3, y2) === i4;
  }
  *neighbors(i4) {
    const ci = this._clip(i4);
    if (ci)
      for (const j of this.delaunay.neighbors(i4)) {
        const cj = this._clip(j);
        if (cj)
          loop:
            for (let ai = 0, li = ci.length; ai < li; ai += 2) {
              for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {
                if (ci[ai] == cj[aj] && ci[ai + 1] == cj[aj + 1] && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]) {
                  yield j;
                  break loop;
                }
              }
            }
      }
  }
  _cell(i4) {
    const { circumcenters, delaunay: { inedges, halfedges, triangles } } = this;
    const e0 = inedges[i4];
    if (e0 === -1)
      return null;
    const points = [];
    let e6 = e0;
    do {
      const t8 = Math.floor(e6 / 3);
      points.push(circumcenters[t8 * 2], circumcenters[t8 * 2 + 1]);
      e6 = e6 % 3 === 2 ? e6 - 2 : e6 + 1;
      if (triangles[e6] !== i4)
        break;
      e6 = halfedges[e6];
    } while (e6 !== e0 && e6 !== -1);
    return points;
  }
  _clip(i4) {
    if (i4 === 0 && this.delaunay.hull.length === 1) {
      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
    }
    const points = this._cell(i4);
    if (points === null)
      return null;
    const { vectors: V2 } = this;
    const v4 = i4 * 4;
    return V2[v4] || V2[v4 + 1] ? this._clipInfinite(i4, points, V2[v4], V2[v4 + 1], V2[v4 + 2], V2[v4 + 3]) : this._clipFinite(i4, points);
  }
  _clipFinite(i4, points) {
    const n5 = points.length;
    let P4 = null;
    let x0, y0, x1 = points[n5 - 2], y1 = points[n5 - 1];
    let c0, c1 = this._regioncode(x1, y1);
    let e0, e1;
    for (let j = 0; j < n5; j += 2) {
      x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];
      c0 = c1, c1 = this._regioncode(x1, y1);
      if (c0 === 0 && c1 === 0) {
        e0 = e1, e1 = 0;
        if (P4)
          P4.push(x1, y1);
        else
          P4 = [x1, y1];
      } else {
        let S4, sx0, sy0, sx1, sy1;
        if (c0 === 0) {
          if ((S4 = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null)
            continue;
          [sx0, sy0, sx1, sy1] = S4;
        } else {
          if ((S4 = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null)
            continue;
          [sx1, sy1, sx0, sy0] = S4;
          e0 = e1, e1 = this._edgecode(sx0, sy0);
          if (e0 && e1)
            this._edge(i4, e0, e1, P4, P4.length);
          if (P4)
            P4.push(sx0, sy0);
          else
            P4 = [sx0, sy0];
        }
        e0 = e1, e1 = this._edgecode(sx1, sy1);
        if (e0 && e1)
          this._edge(i4, e0, e1, P4, P4.length);
        if (P4)
          P4.push(sx1, sy1);
        else
          P4 = [sx1, sy1];
      }
    }
    if (P4) {
      e0 = e1, e1 = this._edgecode(P4[0], P4[1]);
      if (e0 && e1)
        this._edge(i4, e0, e1, P4, P4.length);
    } else if (this.contains(i4, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
    }
    return P4;
  }
  _clipSegment(x0, y0, x1, y1, c0, c1) {
    while (true) {
      if (c0 === 0 && c1 === 0)
        return [x0, y0, x1, y1];
      if (c0 & c1)
        return null;
      let x3, y2, c4 = c0 || c1;
      if (c4 & 8)
        x3 = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y2 = this.ymax;
      else if (c4 & 4)
        x3 = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y2 = this.ymin;
      else if (c4 & 2)
        y2 = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x3 = this.xmax;
      else
        y2 = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x3 = this.xmin;
      if (c0)
        x0 = x3, y0 = y2, c0 = this._regioncode(x0, y0);
      else
        x1 = x3, y1 = y2, c1 = this._regioncode(x1, y1);
    }
  }
  _clipInfinite(i4, points, vx0, vy0, vxn, vyn) {
    let P4 = Array.from(points), p4;
    if (p4 = this._project(P4[0], P4[1], vx0, vy0))
      P4.unshift(p4[0], p4[1]);
    if (p4 = this._project(P4[P4.length - 2], P4[P4.length - 1], vxn, vyn))
      P4.push(p4[0], p4[1]);
    if (P4 = this._clipFinite(i4, P4)) {
      for (let j = 0, n5 = P4.length, c0, c1 = this._edgecode(P4[n5 - 2], P4[n5 - 1]); j < n5; j += 2) {
        c0 = c1, c1 = this._edgecode(P4[j], P4[j + 1]);
        if (c0 && c1)
          j = this._edge(i4, c0, c1, P4, j), n5 = P4.length;
      }
    } else if (this.contains(i4, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
      P4 = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];
    }
    return P4;
  }
  _edge(i4, e0, e1, P4, j) {
    while (e0 !== e1) {
      let x3, y2;
      switch (e0) {
        case 5:
          e0 = 4;
          continue;
        case 4:
          e0 = 6, x3 = this.xmax, y2 = this.ymin;
          break;
        case 6:
          e0 = 2;
          continue;
        case 2:
          e0 = 10, x3 = this.xmax, y2 = this.ymax;
          break;
        case 10:
          e0 = 8;
          continue;
        case 8:
          e0 = 9, x3 = this.xmin, y2 = this.ymax;
          break;
        case 9:
          e0 = 1;
          continue;
        case 1:
          e0 = 5, x3 = this.xmin, y2 = this.ymin;
          break;
      }
      if ((P4[j] !== x3 || P4[j + 1] !== y2) && this.contains(i4, x3, y2)) {
        P4.splice(j, 0, x3, y2), j += 2;
      }
    }
    if (P4.length > 4) {
      for (let i5 = 0; i5 < P4.length; i5 += 2) {
        const j2 = (i5 + 2) % P4.length, k5 = (i5 + 4) % P4.length;
        if (P4[i5] === P4[j2] && P4[j2] === P4[k5] || P4[i5 + 1] === P4[j2 + 1] && P4[j2 + 1] === P4[k5 + 1])
          P4.splice(j2, 2), i5 -= 2;
      }
    }
    return j;
  }
  _project(x0, y0, vx, vy) {
    let t8 = Infinity, c4, x3, y2;
    if (vy < 0) {
      if (y0 <= this.ymin)
        return null;
      if ((c4 = (this.ymin - y0) / vy) < t8)
        y2 = this.ymin, x3 = x0 + (t8 = c4) * vx;
    } else if (vy > 0) {
      if (y0 >= this.ymax)
        return null;
      if ((c4 = (this.ymax - y0) / vy) < t8)
        y2 = this.ymax, x3 = x0 + (t8 = c4) * vx;
    }
    if (vx > 0) {
      if (x0 >= this.xmax)
        return null;
      if ((c4 = (this.xmax - x0) / vx) < t8)
        x3 = this.xmax, y2 = y0 + (t8 = c4) * vy;
    } else if (vx < 0) {
      if (x0 <= this.xmin)
        return null;
      if ((c4 = (this.xmin - x0) / vx) < t8)
        x3 = this.xmin, y2 = y0 + (t8 = c4) * vy;
    }
    return [x3, y2];
  }
  _edgecode(x3, y2) {
    return (x3 === this.xmin ? 1 : x3 === this.xmax ? 2 : 0) | (y2 === this.ymin ? 4 : y2 === this.ymax ? 8 : 0);
  }
  _regioncode(x3, y2) {
    return (x3 < this.xmin ? 1 : x3 > this.xmax ? 2 : 0) | (y2 < this.ymin ? 4 : y2 > this.ymax ? 8 : 0);
  }
};

// ../node_modules/d3-delaunay/src/delaunay.js
var tau = 2 * Math.PI;
var pow = Math.pow;
function pointX(p4) {
  return p4[0];
}
function pointY(p4) {
  return p4[1];
}
function collinear(d2) {
  const { triangles, coords } = d2;
  for (let i4 = 0; i4 < triangles.length; i4 += 3) {
    const a4 = 2 * triangles[i4], b5 = 2 * triangles[i4 + 1], c4 = 2 * triangles[i4 + 2], cross = (coords[c4] - coords[a4]) * (coords[b5 + 1] - coords[a4 + 1]) - (coords[b5] - coords[a4]) * (coords[c4 + 1] - coords[a4 + 1]);
    if (cross > 1e-10)
      return false;
  }
  return true;
}
function jitter(x3, y2, r4) {
  return [x3 + Math.sin(x3 + y2) * r4, y2 + Math.cos(x3 - y2) * r4];
}
var Delaunay = class _Delaunay {
  static from(points, fx = pointX, fy = pointY, that) {
    return new _Delaunay("length" in points ? flatArray(points, fx, fy, that) : Float64Array.from(flatIterable(points, fx, fy, that)));
  }
  constructor(points) {
    this._delaunator = new Delaunator(points);
    this.inedges = new Int32Array(points.length / 2);
    this._hullIndex = new Int32Array(points.length / 2);
    this.points = this._delaunator.coords;
    this._init();
  }
  update() {
    this._delaunator.update();
    this._init();
    return this;
  }
  _init() {
    const d2 = this._delaunator, points = this.points;
    if (d2.hull && d2.hull.length > 2 && collinear(d2)) {
      this.collinear = Int32Array.from({ length: points.length / 2 }, (_2, i4) => i4).sort((i4, j) => points[2 * i4] - points[2 * j] || points[2 * i4 + 1] - points[2 * j + 1]);
      const e6 = this.collinear[0], f3 = this.collinear[this.collinear.length - 1], bounds = [points[2 * e6], points[2 * e6 + 1], points[2 * f3], points[2 * f3 + 1]], r4 = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);
      for (let i4 = 0, n5 = points.length / 2; i4 < n5; ++i4) {
        const p4 = jitter(points[2 * i4], points[2 * i4 + 1], r4);
        points[2 * i4] = p4[0];
        points[2 * i4 + 1] = p4[1];
      }
      this._delaunator = new Delaunator(points);
    } else {
      delete this.collinear;
    }
    const halfedges = this.halfedges = this._delaunator.halfedges;
    const hull = this.hull = this._delaunator.hull;
    const triangles = this.triangles = this._delaunator.triangles;
    const inedges = this.inedges.fill(-1);
    const hullIndex = this._hullIndex.fill(-1);
    for (let e6 = 0, n5 = halfedges.length; e6 < n5; ++e6) {
      const p4 = triangles[e6 % 3 === 2 ? e6 - 2 : e6 + 1];
      if (halfedges[e6] === -1 || inedges[p4] === -1)
        inedges[p4] = e6;
    }
    for (let i4 = 0, n5 = hull.length; i4 < n5; ++i4) {
      hullIndex[hull[i4]] = i4;
    }
    if (hull.length <= 2 && hull.length > 0) {
      this.triangles = new Int32Array(3).fill(-1);
      this.halfedges = new Int32Array(3).fill(-1);
      this.triangles[0] = hull[0];
      this.triangles[1] = hull[1];
      this.triangles[2] = hull[1];
      inedges[hull[0]] = 1;
      if (hull.length === 2)
        inedges[hull[1]] = 0;
    }
  }
  voronoi(bounds) {
    return new Voronoi(this, bounds);
  }
  *neighbors(i4) {
    const { inedges, hull, _hullIndex, halfedges, triangles, collinear: collinear2 } = this;
    if (collinear2) {
      const l2 = collinear2.indexOf(i4);
      if (l2 > 0)
        yield collinear2[l2 - 1];
      if (l2 < collinear2.length - 1)
        yield collinear2[l2 + 1];
      return;
    }
    const e0 = inedges[i4];
    if (e0 === -1)
      return;
    let e6 = e0, p0 = -1;
    do {
      yield p0 = triangles[e6];
      e6 = e6 % 3 === 2 ? e6 - 2 : e6 + 1;
      if (triangles[e6] !== i4)
        return;
      e6 = halfedges[e6];
      if (e6 === -1) {
        const p4 = hull[(_hullIndex[i4] + 1) % hull.length];
        if (p4 !== p0)
          yield p4;
        return;
      }
    } while (e6 !== e0);
  }
  find(x3, y2, i4 = 0) {
    if ((x3 = +x3, x3 !== x3) || (y2 = +y2, y2 !== y2))
      return -1;
    const i0 = i4;
    let c4;
    while ((c4 = this._step(i4, x3, y2)) >= 0 && c4 !== i4 && c4 !== i0)
      i4 = c4;
    return c4;
  }
  _step(i4, x3, y2) {
    const { inedges, hull, _hullIndex, halfedges, triangles, points } = this;
    if (inedges[i4] === -1 || !points.length)
      return (i4 + 1) % (points.length >> 1);
    let c4 = i4;
    let dc = pow(x3 - points[i4 * 2], 2) + pow(y2 - points[i4 * 2 + 1], 2);
    const e0 = inedges[i4];
    let e6 = e0;
    do {
      let t8 = triangles[e6];
      const dt = pow(x3 - points[t8 * 2], 2) + pow(y2 - points[t8 * 2 + 1], 2);
      if (dt < dc)
        dc = dt, c4 = t8;
      e6 = e6 % 3 === 2 ? e6 - 2 : e6 + 1;
      if (triangles[e6] !== i4)
        break;
      e6 = halfedges[e6];
      if (e6 === -1) {
        e6 = hull[(_hullIndex[i4] + 1) % hull.length];
        if (e6 !== t8) {
          if (pow(x3 - points[e6 * 2], 2) + pow(y2 - points[e6 * 2 + 1], 2) < dc)
            return e6;
        }
        break;
      }
    } while (e6 !== e0);
    return c4;
  }
  render(context) {
    const buffer = context == null ? context = new Path() : void 0;
    const { points, halfedges, triangles } = this;
    for (let i4 = 0, n5 = halfedges.length; i4 < n5; ++i4) {
      const j = halfedges[i4];
      if (j < i4)
        continue;
      const ti2 = triangles[i4] * 2;
      const tj = triangles[j] * 2;
      context.moveTo(points[ti2], points[ti2 + 1]);
      context.lineTo(points[tj], points[tj + 1]);
    }
    this.renderHull(context);
    return buffer && buffer.value();
  }
  renderPoints(context, r4 = 2) {
    const buffer = context == null ? context = new Path() : void 0;
    const { points } = this;
    for (let i4 = 0, n5 = points.length; i4 < n5; i4 += 2) {
      const x3 = points[i4], y2 = points[i4 + 1];
      context.moveTo(x3 + r4, y2);
      context.arc(x3, y2, r4, 0, tau);
    }
    return buffer && buffer.value();
  }
  renderHull(context) {
    const buffer = context == null ? context = new Path() : void 0;
    const { hull, points } = this;
    const h3 = hull[0] * 2, n5 = hull.length;
    context.moveTo(points[h3], points[h3 + 1]);
    for (let i4 = 1; i4 < n5; ++i4) {
      const h4 = 2 * hull[i4];
      context.lineTo(points[h4], points[h4 + 1]);
    }
    context.closePath();
    return buffer && buffer.value();
  }
  hullPolygon() {
    const polygon = new Polygon();
    this.renderHull(polygon);
    return polygon.value();
  }
  renderTriangle(i4, context) {
    const buffer = context == null ? context = new Path() : void 0;
    const { points, triangles } = this;
    const t03 = triangles[i4 *= 3] * 2;
    const t13 = triangles[i4 + 1] * 2;
    const t22 = triangles[i4 + 2] * 2;
    context.moveTo(points[t03], points[t03 + 1]);
    context.lineTo(points[t13], points[t13 + 1]);
    context.lineTo(points[t22], points[t22 + 1]);
    context.closePath();
    return buffer && buffer.value();
  }
  *trianglePolygons() {
    const { triangles } = this;
    for (let i4 = 0, n5 = triangles.length / 3; i4 < n5; ++i4) {
      yield this.trianglePolygon(i4);
    }
  }
  trianglePolygon(i4) {
    const polygon = new Polygon();
    this.renderTriangle(i4, polygon);
    return polygon.value();
  }
};
function flatArray(points, fx, fy, that) {
  const n5 = points.length;
  const array = new Float64Array(n5 * 2);
  for (let i4 = 0; i4 < n5; ++i4) {
    const p4 = points[i4];
    array[i4 * 2] = fx.call(that, p4, i4, points);
    array[i4 * 2 + 1] = fy.call(that, p4, i4, points);
  }
  return array;
}
function* flatIterable(points, fx, fy, that) {
  let i4 = 0;
  for (const p4 of points) {
    yield fx.call(that, p4, i4, points);
    yield fy.call(that, p4, i4, points);
    ++i4;
  }
}

// ../node_modules/@nivo/voronoi/dist/nivo-voronoi.es.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var g3 = function(n5) {
  return "function" == typeof n5 ? n5 : function(e6) {
    return e6[n5];
  };
};
var b4 = function(n5) {
  var e6 = n5.points, i4 = n5.x, o3 = void 0 === i4 ? "x" : i4, t8 = n5.y, r4 = void 0 === t8 ? "y" : t8, l2 = g3(o3), u2 = g3(r4);
  return e6.map(function(n6) {
    return [l2(n6), u2(n6)];
  });
};
var k4 = function(n5) {
  var e6 = n5.points, i4 = n5.width, o3 = n5.height, t8 = n5.debug, r4 = Delaunay.from(e6), l2 = t8 ? r4.voronoi([0, 0, i4, o3]) : void 0;
  return { delaunay: r4, voronoi: l2 };
};
var x2 = function(e6) {
  var i4 = e6.points, o3 = e6.x, t8 = e6.y, r4 = e6.width, l2 = e6.height, u2 = e6.debug, a4 = (0, import_react7.useMemo)(function() {
    return b4({ points: i4, x: o3, y: t8 });
  }, [i4, o3, t8]);
  return (0, import_react7.useMemo)(function() {
    return k4({ points: a4, width: r4, height: l2, debug: u2 });
  }, [a4, r4, l2, u2]);
};
var P3 = function(e6) {
  var i4 = e6.nodes, l2 = e6.width, u2 = e6.height, a4 = e6.x, d2 = e6.y, c4 = e6.onMouseEnter, h3 = e6.onMouseMove, m2 = e6.onMouseLeave, y2 = e6.onClick, g4 = e6.debug, b5 = (0, import_react7.useRef)(null), k5 = (0, import_react7.useState)(null), C4 = k5[0], L2 = k5[1], w4 = x2({ points: i4, x: a4, y: d2, width: l2, height: u2, debug: g4 }), W3 = w4.delaunay, D2 = w4.voronoi, M = (0, import_react7.useMemo)(function() {
    if (g4 && D2)
      return D2.render();
  }, [g4, D2]), P4 = (0, import_react7.useCallback)(function(n5) {
    if (!b5.current)
      return [null, null];
    var e7 = Qi(b5.current, n5), o3 = e7[0], t8 = e7[1], r4 = W3.find(o3, t8);
    return [r4, void 0 !== r4 ? i4[r4] : null];
  }, [b5, W3]), O4 = (0, import_react7.useCallback)(function(n5) {
    var e7 = P4(n5), i5 = e7[0], o3 = e7[1];
    L2(i5), o3 && (null == c4 || c4(o3, n5));
  }, [P4, L2, c4]), S4 = (0, import_react7.useCallback)(function(n5) {
    var e7 = P4(n5), i5 = e7[0], o3 = e7[1];
    L2(i5), o3 && (null == h3 || h3(o3, n5));
  }, [P4, L2, h3]), j = (0, import_react7.useCallback)(function(n5) {
    if (L2(null), m2) {
      var e7 = void 0;
      null !== C4 && (e7 = i4[C4]), e7 && m2(e7, n5);
    }
  }, [L2, C4, m2, i4]), z2 = (0, import_react7.useCallback)(function(n5) {
    var e7 = P4(n5), i5 = e7[0], o3 = e7[1];
    L2(i5), o3 && (null == y2 || y2(o3, n5));
  }, [P4, L2, y2]);
  return (0, import_jsx_runtime3.jsxs)("g", { ref: b5, children: [g4 && D2 && (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, { children: [(0, import_jsx_runtime3.jsx)("path", { d: M, stroke: "red", strokeWidth: 1, opacity: 0.75 }), null !== C4 && (0, import_jsx_runtime3.jsx)("path", { fill: "pink", opacity: 0.35, d: D2.renderCell(C4) })] }), (0, import_jsx_runtime3.jsx)("rect", { width: l2, height: u2, fill: "red", opacity: 0, style: { cursor: "auto" }, onMouseEnter: O4, onMouseMove: S4, onMouseLeave: j, onClick: z2 })] });
};
var O3 = function(n5, e6) {
  n5.save(), n5.globalAlpha = 0.75, n5.beginPath(), e6.render(n5), n5.strokeStyle = "red", n5.lineWidth = 1, n5.stroke(), n5.restore();
};
var S3 = function(n5, e6, i4) {
  n5.save(), n5.globalAlpha = 0.35, n5.beginPath(), e6.renderCell(i4, n5), n5.fillStyle = "red", n5.fill(), n5.restore();
};

// ../node_modules/@nivo/line/dist/nivo-line.es.js
function ie() {
  return ie = Object.assign || function(e6) {
    for (var r4 = 1; r4 < arguments.length; r4++) {
      var i4 = arguments[r4];
      for (var n5 in i4)
        Object.prototype.hasOwnProperty.call(i4, n5) && (e6[n5] = i4[n5]);
    }
    return e6;
  }, ie.apply(this, arguments);
}
var ne = function(e6) {
  var r4 = e6.point;
  return (0, import_jsx_runtime4.jsx)(w, { id: (0, import_jsx_runtime4.jsxs)("span", { children: ["x: ", (0, import_jsx_runtime4.jsx)("strong", { children: r4.data.xFormatted }), ", y:", " ", (0, import_jsx_runtime4.jsx)("strong", { children: r4.data.yFormatted })] }), enableChip: true, color: r4.serieColor });
};
ne.propTypes = { point: import_prop_types4.default.object.isRequired };
var te = (0, import_react8.memo)(ne);
var oe = function(e6) {
  var r4 = e6.slice, i4 = e6.axis, n5 = Vt(), t8 = "x" === i4 ? "y" : "x";
  return (0, import_jsx_runtime4.jsx)(C, { rows: r4.points.map(function(e7) {
    return [(0, import_jsx_runtime4.jsx)(b, { color: e7.serieColor, style: n5.tooltip.chip }, "chip"), e7.serieId, (0, import_jsx_runtime4.jsx)("span", { style: n5.tooltip.tableCellValue, children: e7.data[t8 + "Formatted"] }, "value")];
  }) });
};
oe.propTypes = { slice: import_prop_types4.default.object.isRequired, axis: import_prop_types4.default.oneOf(["x", "y"]).isRequired };
var ae = (0, import_react8.memo)(oe);
var se = { data: import_prop_types4.default.arrayOf(import_prop_types4.default.shape({ id: import_prop_types4.default.oneOfType([import_prop_types4.default.string, import_prop_types4.default.number]).isRequired, data: import_prop_types4.default.arrayOf(import_prop_types4.default.shape({ x: import_prop_types4.default.oneOfType([import_prop_types4.default.number, import_prop_types4.default.string, import_prop_types4.default.instanceOf(Date)]), y: import_prop_types4.default.oneOfType([import_prop_types4.default.number, import_prop_types4.default.string, import_prop_types4.default.instanceOf(Date)]) })).isRequired })).isRequired, xScale: import_prop_types4.default.object.isRequired, xFormat: import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.string]), yScale: import_prop_types4.default.object.isRequired, yFormat: import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.string]), layers: import_prop_types4.default.arrayOf(import_prop_types4.default.oneOfType([import_prop_types4.default.oneOf(["grid", "markers", "axes", "areas", "crosshair", "lines", "slices", "points", "mesh", "legends"]), import_prop_types4.default.func])).isRequired, curve: Rt.isRequired, axisTop: A2, axisRight: A2, axisBottom: A2, axisLeft: A2, enableGridX: import_prop_types4.default.bool.isRequired, enableGridY: import_prop_types4.default.bool.isRequired, gridXValues: import_prop_types4.default.oneOfType([import_prop_types4.default.number, import_prop_types4.default.arrayOf(import_prop_types4.default.oneOfType([import_prop_types4.default.number, import_prop_types4.default.string, import_prop_types4.default.instanceOf(Date)]))]), gridYValues: import_prop_types4.default.oneOfType([import_prop_types4.default.number, import_prop_types4.default.arrayOf(import_prop_types4.default.oneOfType([import_prop_types4.default.number, import_prop_types4.default.string, import_prop_types4.default.instanceOf(Date)]))]), enablePoints: import_prop_types4.default.bool.isRequired, pointSymbol: import_prop_types4.default.func, pointSize: import_prop_types4.default.number.isRequired, pointColor: import_prop_types4.default.any.isRequired, pointBorderWidth: import_prop_types4.default.number.isRequired, pointBorderColor: import_prop_types4.default.any.isRequired, enablePointLabel: import_prop_types4.default.bool.isRequired, pointLabel: import_prop_types4.default.oneOfType([import_prop_types4.default.string, import_prop_types4.default.func]).isRequired, markers: import_prop_types4.default.arrayOf(import_prop_types4.default.shape({ axis: import_prop_types4.default.oneOf(["x", "y"]).isRequired, value: import_prop_types4.default.oneOfType([import_prop_types4.default.number, import_prop_types4.default.string, import_prop_types4.default.instanceOf(Date)]).isRequired, style: import_prop_types4.default.object })), colors: Xe.isRequired, enableArea: import_prop_types4.default.bool.isRequired, areaOpacity: import_prop_types4.default.number.isRequired, areaBlendMode: Mt.isRequired, areaBaselineValue: import_prop_types4.default.oneOfType([import_prop_types4.default.number, import_prop_types4.default.string, import_prop_types4.default.instanceOf(Date)]).isRequired, lineWidth: import_prop_types4.default.number.isRequired, legends: import_prop_types4.default.arrayOf(import_prop_types4.default.shape(T2)).isRequired, isInteractive: import_prop_types4.default.bool.isRequired, debugMesh: import_prop_types4.default.bool.isRequired, tooltip: import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object]).isRequired, enableSlices: import_prop_types4.default.oneOf(["x", "y", false]).isRequired, debugSlices: import_prop_types4.default.bool.isRequired, sliceTooltip: import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object]).isRequired, enableCrosshair: import_prop_types4.default.bool.isRequired, crosshairType: import_prop_types4.default.string.isRequired };
var le = ie({}, se, { enablePointLabel: import_prop_types4.default.bool.isRequired, role: import_prop_types4.default.string.isRequired, useMesh: import_prop_types4.default.bool.isRequired }, et, kt);
var ue = ie({ pixelRatio: import_prop_types4.default.number.isRequired }, se);
var de = { curve: "linear", xScale: { type: "point" }, yScale: { type: "linear", min: 0, max: "auto" }, layers: ["grid", "markers", "axes", "areas", "crosshair", "lines", "points", "slices", "mesh", "legends"], axisBottom: {}, axisLeft: {}, enableGridX: true, enableGridY: true, enablePoints: true, pointSize: 6, pointColor: { from: "color" }, pointBorderWidth: 0, pointBorderColor: { theme: "background" }, enablePointLabel: false, pointLabel: "yFormatted", colors: { scheme: "nivo" }, enableArea: false, areaBaselineValue: 0, areaOpacity: 0.2, areaBlendMode: "normal", lineWidth: 2, legends: [], isInteractive: true, tooltip: te, enableSlices: false, debugSlices: false, sliceTooltip: ae, debugMesh: false, enableCrosshair: true, crosshairType: "bottom-left" };
var ce = ie({}, de, { enablePointLabel: false, useMesh: false, animate: true, motionConfig: "gentle", defs: [], fill: [], role: "img" });
var fe = ie({}, de, { pixelRatio: "undefined" != typeof window && window.devicePixelRatio || 1 });
var pe = function(e6) {
  var i4 = e6.curve;
  return (0, import_react8.useMemo)(function() {
    return line_default().defined(function(e7) {
      return null !== e7.x && null !== e7.y;
    }).x(function(e7) {
      return e7.x;
    }).y(function(e7) {
      return e7.y;
    }).curve(qt(i4));
  }, [i4]);
};
var he = function(e6) {
  var i4 = e6.curve, n5 = e6.yScale, t8 = e6.areaBaselineValue;
  return (0, import_react8.useMemo)(function() {
    return area_default().defined(function(e7) {
      return null !== e7.x && null !== e7.y;
    }).x(function(e7) {
      return e7.x;
    }).y1(function(e7) {
      return e7.y;
    }).curve(qt(i4)).y0(n5(t8));
  }, [i4, n5, t8]);
};
var ye = function(e6) {
  var i4 = e6.enableSlices, n5 = e6.points, t8 = e6.width, o3 = e6.height;
  return (0, import_react8.useMemo)(function() {
    if (false === i4)
      return [];
    if ("x" === i4) {
      var e7 = /* @__PURE__ */ new Map();
      return n5.forEach(function(r5) {
        null !== r5.data.x && null !== r5.data.y && (e7.has(r5.x) ? e7.get(r5.x).push(r5) : e7.set(r5.x, [r5]));
      }), Array.from(e7.entries()).sort(function(e8, r5) {
        return e8[0] - r5[0];
      }).map(function(e8, r5, i5) {
        var n6, a4 = e8[0], s3 = e8[1], l2 = i5[r5 - 1], u2 = i5[r5 + 1];
        return { id: a4, x0: n6 = l2 ? a4 - (a4 - l2[0]) / 2 : a4, x: a4, y0: 0, y: 0, width: u2 ? a4 - n6 + (u2[0] - a4) / 2 : t8 - n6, height: o3, points: s3.reverse() };
      });
    }
    if ("y" === i4) {
      var r4 = /* @__PURE__ */ new Map();
      return n5.forEach(function(e8) {
        null !== e8.data.x && null !== e8.data.y && (r4.has(e8.y) ? r4.get(e8.y).push(e8) : r4.set(e8.y, [e8]));
      }), Array.from(r4.entries()).sort(function(e8, r5) {
        return e8[0] - r5[0];
      }).map(function(e8, r5, i5) {
        var n6, a4, s3 = e8[0], l2 = e8[1], u2 = i5[r5 - 1], d2 = i5[r5 + 1];
        return n6 = u2 ? s3 - (s3 - u2[0]) / 2 : s3, a4 = d2 ? s3 - n6 + (d2[0] - s3) / 2 : o3 - n6, { id: s3, x0: 0, x: 0, y0: n6, y: s3, width: t8, height: a4, points: l2.reverse() };
      });
    }
  }, [i4, n5]);
};
var be = function(e6) {
  var t8 = e6.data, o3 = e6.xScale, a4 = void 0 === o3 ? ce.xScale : o3, s3 = e6.xFormat, l2 = e6.yScale, d2 = void 0 === l2 ? ce.yScale : l2, c4 = e6.yFormat, f3 = e6.width, p4 = e6.height, h3 = e6.colors, b5 = void 0 === h3 ? ce.colors : h3, g4 = e6.curve, m2 = void 0 === g4 ? ce.curve : g4, v4 = e6.areaBaselineValue, x3 = void 0 === v4 ? ce.areaBaselineValue : v4, R = e6.pointColor, q = void 0 === R ? ce.pointColor : R, O4 = e6.pointBorderColor, S4 = void 0 === O4 ? ce.pointBorderColor : O4, C4 = e6.enableSlices, T3 = void 0 === C4 ? ce.enableSlicesTooltip : C4, M = Xt(s3), w4 = Xt(c4), W3 = dr(b5, "id"), G = Vt(), L2 = We(q, G), P4 = We(S4, G), j = (0, import_react8.useState)([]), F = j[0], V2 = j[1], E2 = (0, import_react8.useMemo)(function() {
    return dn(t8.filter(function(e7) {
      return -1 === F.indexOf(e7.id);
    }), a4, d2, f3, p4);
  }, [t8, F, a4, d2, f3, p4]), Y4 = E2.xScale, D2 = E2.yScale, X4 = E2.series, z2 = (0, import_react8.useMemo)(function() {
    var e7 = t8.map(function(e8) {
      return { id: e8.id, label: e8.id, color: W3(e8) };
    }), r4 = e7.map(function(e8) {
      return ie({}, X4.find(function(r5) {
        return r5.id === e8.id;
      }), { color: e8.color });
    }).filter(function(e8) {
      return Boolean(e8.id);
    });
    return { legendData: e7.map(function(e8) {
      return ie({}, e8, { hidden: !r4.find(function(r5) {
        return r5.id === e8.id;
      }) });
    }).reverse(), series: r4 };
  }, [t8, X4, W3]), A3 = z2.legendData, H2 = z2.series, I = (0, import_react8.useCallback)(function(e7) {
    V2(function(r4) {
      return r4.indexOf(e7) > -1 ? r4.filter(function(r5) {
        return r5 !== e7;
      }) : [].concat(r4, [e7]);
    });
  }, []), K4 = function(e7) {
    var i4 = e7.series, n5 = e7.getPointColor, t9 = e7.getPointBorderColor, o4 = e7.formatX, a5 = e7.formatY;
    return (0, import_react8.useMemo)(function() {
      return i4.reduce(function(e8, r4) {
        return [].concat(e8, r4.data.filter(function(e9) {
          return null !== e9.position.x && null !== e9.position.y;
        }).map(function(i5, s4) {
          var l3 = { id: r4.id + "." + s4, index: e8.length + s4, serieId: r4.id, serieColor: r4.color, x: i5.position.x, y: i5.position.y };
          return l3.color = n5(r4), l3.borderColor = t9(l3), l3.data = ie({}, i5.data, { xFormatted: o4(i5.data.x), yFormatted: a5(i5.data.y) }), l3;
        }));
      }, []);
    }, [i4, n5, t9, o4, a5]);
  }({ series: H2, getPointColor: L2, getPointBorderColor: P4, formatX: M, formatY: w4 }), N2 = ye({ enableSlices: T3, points: K4, width: f3, height: p4 });
  return { legendData: A3, toggleSerie: I, lineGenerator: pe({ curve: m2 }), areaGenerator: he({ curve: m2, yScale: D2, areaBaselineValue: x3 }), getColor: W3, series: H2, xScale: Y4, yScale: D2, slices: N2, points: K4 };
};
var ge = function(e6) {
  var r4 = e6.areaBlendMode, i4 = e6.areaOpacity, n5 = e6.color, t8 = e6.fill, o3 = e6.path, a4 = tt(), s3 = a4.animate, l2 = a4.config, u2 = it(o3), d2 = useSpring({ color: n5, config: l2, immediate: !s3 });
  return (0, import_jsx_runtime4.jsx)(animated.path, { d: u2, fill: t8 || d2.color, fillOpacity: i4, strokeWidth: 0, style: { mixBlendMode: r4 } });
};
ge.propTypes = { areaBlendMode: Mt.isRequired, areaOpacity: import_prop_types4.default.number.isRequired, color: import_prop_types4.default.string, fill: import_prop_types4.default.string, path: import_prop_types4.default.string.isRequired };
var me = function(e6) {
  var r4 = e6.areaGenerator, i4 = e6.areaOpacity, n5 = e6.areaBlendMode, t8 = e6.lines.slice(0).reverse();
  return (0, import_jsx_runtime4.jsx)("g", { children: t8.map(function(e7) {
    return (0, import_jsx_runtime4.jsx)(ge, ie({ path: r4(e7.data.map(function(e8) {
      return e8.position;
    })) }, ie({ areaOpacity: i4, areaBlendMode: n5 }, e7)), e7.id);
  }) });
};
me.propTypes = { areaGenerator: import_prop_types4.default.func.isRequired, areaOpacity: import_prop_types4.default.number.isRequired, areaBlendMode: Mt.isRequired, lines: import_prop_types4.default.arrayOf(import_prop_types4.default.object).isRequired };
var ve = (0, import_react8.memo)(me);
var xe = function(e6) {
  var i4 = e6.lineGenerator, n5 = e6.points, t8 = e6.color, o3 = e6.thickness, a4 = (0, import_react8.useMemo)(function() {
    return i4(n5);
  }, [i4, n5]), s3 = it(a4);
  return (0, import_jsx_runtime4.jsx)(animated.path, { d: s3, fill: "none", strokeWidth: o3, stroke: t8 });
};
xe.propTypes = { points: import_prop_types4.default.arrayOf(import_prop_types4.default.shape({ x: import_prop_types4.default.oneOfType([import_prop_types4.default.string, import_prop_types4.default.number]), y: import_prop_types4.default.oneOfType([import_prop_types4.default.string, import_prop_types4.default.number]) })), lineGenerator: import_prop_types4.default.func.isRequired, color: import_prop_types4.default.string.isRequired, thickness: import_prop_types4.default.number.isRequired };
var Re2 = (0, import_react8.memo)(xe);
var qe2 = function(e6) {
  var r4 = e6.lines, i4 = e6.lineGenerator, n5 = e6.lineWidth;
  return r4.slice(0).reverse().map(function(e7) {
    var r5 = e7.id, t8 = e7.data, o3 = e7.color;
    return (0, import_jsx_runtime4.jsx)(Re2, { id: r5, points: t8.map(function(e8) {
      return e8.position;
    }), lineGenerator: i4, color: o3, thickness: n5 }, r5);
  });
};
qe2.propTypes = { lines: import_prop_types4.default.arrayOf(import_prop_types4.default.shape({ id: import_prop_types4.default.oneOfType([import_prop_types4.default.string, import_prop_types4.default.number]).isRequired, color: import_prop_types4.default.string.isRequired, data: import_prop_types4.default.arrayOf(import_prop_types4.default.shape({ data: import_prop_types4.default.shape({ x: import_prop_types4.default.oneOfType([import_prop_types4.default.string, import_prop_types4.default.number, import_prop_types4.default.instanceOf(Date)]), y: import_prop_types4.default.oneOfType([import_prop_types4.default.string, import_prop_types4.default.number, import_prop_types4.default.instanceOf(Date)]) }).isRequired, position: import_prop_types4.default.shape({ x: import_prop_types4.default.number, y: import_prop_types4.default.number }).isRequired })).isRequired })).isRequired, lineWidth: import_prop_types4.default.number.isRequired, lineGenerator: import_prop_types4.default.func.isRequired };
var Oe2 = (0, import_react8.memo)(qe2);
var Se2 = function(e6) {
  var r4 = e6.slice, i4 = e6.axis, o3 = e6.debug, a4 = e6.tooltip, s3 = e6.isCurrent, l2 = e6.setCurrent, u2 = k(), d2 = u2.showTooltipFromEvent, c4 = u2.hideTooltip, f3 = (0, import_react8.useCallback)(function(e7) {
    d2((0, import_react8.createElement)(a4, { slice: r4, axis: i4 }), e7, "right"), l2(r4);
  }, [d2, a4, r4]), p4 = (0, import_react8.useCallback)(function(e7) {
    d2((0, import_react8.createElement)(a4, { slice: r4, axis: i4 }), e7, "right");
  }, [d2, a4, r4]), h3 = (0, import_react8.useCallback)(function() {
    c4(), l2(null);
  }, [c4]);
  return (0, import_jsx_runtime4.jsx)("rect", { x: r4.x0, y: r4.y0, width: r4.width, height: r4.height, stroke: "red", strokeWidth: o3 ? 1 : 0, strokeOpacity: 0.75, fill: "red", fillOpacity: s3 && o3 ? 0.35 : 0, onMouseEnter: f3, onMouseMove: p4, onMouseLeave: h3 });
};
Se2.propTypes = { slice: import_prop_types4.default.object.isRequired, axis: import_prop_types4.default.oneOf(["x", "y"]).isRequired, debug: import_prop_types4.default.bool.isRequired, height: import_prop_types4.default.number.isRequired, tooltip: import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object]), isCurrent: import_prop_types4.default.bool.isRequired, setCurrent: import_prop_types4.default.func.isRequired };
var Ce2 = (0, import_react8.memo)(Se2);
var Te2 = function(e6) {
  var r4 = e6.slices, i4 = e6.axis, n5 = e6.debug, t8 = e6.height, o3 = e6.tooltip, a4 = e6.current, s3 = e6.setCurrent;
  return r4.map(function(e7) {
    return (0, import_jsx_runtime4.jsx)(Ce2, { slice: e7, axis: i4, debug: n5, height: t8, tooltip: o3, setCurrent: s3, isCurrent: null !== a4 && a4.id === e7.id }, e7.id);
  });
};
Te2.propTypes = { slices: import_prop_types4.default.arrayOf(import_prop_types4.default.shape({ id: import_prop_types4.default.oneOfType([import_prop_types4.default.number, import_prop_types4.default.string, import_prop_types4.default.instanceOf(Date)]).isRequired, x: import_prop_types4.default.number.isRequired, y: import_prop_types4.default.number.isRequired, points: import_prop_types4.default.arrayOf(import_prop_types4.default.object).isRequired })).isRequired, axis: import_prop_types4.default.oneOf(["x", "y"]).isRequired, debug: import_prop_types4.default.bool.isRequired, height: import_prop_types4.default.number.isRequired, tooltip: import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object]).isRequired, current: import_prop_types4.default.object, setCurrent: import_prop_types4.default.func.isRequired };
var Me2 = (0, import_react8.memo)(Te2);
var we2 = function(e6) {
  var r4 = e6.points, i4 = e6.symbol, n5 = e6.size, t8 = e6.borderWidth, o3 = e6.enableLabel, a4 = e6.label, s3 = e6.labelYOffset, l2 = Vt(), d2 = Ei(a4), c4 = r4.reverse().map(function(e7) {
    return { id: e7.id, x: e7.x, y: e7.y, datum: e7.data, fill: e7.color, stroke: e7.borderColor, label: o3 ? d2(e7.data) : null };
  });
  return (0, import_jsx_runtime4.jsx)("g", { children: c4.map(function(e7) {
    return (0, import_jsx_runtime4.jsx)(Mi, { x: e7.x, y: e7.y, datum: e7.datum, symbol: i4, size: n5, color: e7.fill, borderWidth: t8, borderColor: e7.stroke, label: e7.label, labelYOffset: s3, theme: l2 }, e7.id);
  }) });
};
we2.propTypes = { points: import_prop_types4.default.arrayOf(import_prop_types4.default.object), symbol: import_prop_types4.default.func, size: import_prop_types4.default.number.isRequired, color: import_prop_types4.default.func.isRequired, borderWidth: import_prop_types4.default.number.isRequired, borderColor: import_prop_types4.default.func.isRequired, enableLabel: import_prop_types4.default.bool.isRequired, label: import_prop_types4.default.oneOfType([import_prop_types4.default.string, import_prop_types4.default.func]).isRequired, labelYOffset: import_prop_types4.default.number };
var Be2 = (0, import_react8.memo)(we2);
var ke = function(e6) {
  var r4 = e6.points, i4 = e6.width, o3 = e6.height, a4 = e6.margin, s3 = e6.setCurrent, l2 = e6.onMouseEnter, u2 = e6.onMouseMove, d2 = e6.onMouseLeave, c4 = e6.onClick, f3 = e6.tooltip, p4 = e6.debug, h3 = k(), y2 = h3.showTooltipAt, b5 = h3.hideTooltip, g4 = (0, import_react8.useCallback)(function(e7, r5) {
    y2((0, import_react8.createElement)(f3, { point: e7 }), [e7.x + a4.left, e7.y + a4.top], "top"), s3(e7), l2 && l2(e7, r5);
  }, [s3, y2, f3, l2, a4]), m2 = (0, import_react8.useCallback)(function(e7, r5) {
    y2((0, import_react8.createElement)(f3, { point: e7 }), [e7.x + a4.left, e7.y + a4.top], "top"), s3(e7), u2 && u2(e7, r5);
  }, [s3, y2, f3, u2]), v4 = (0, import_react8.useCallback)(function(e7, r5) {
    b5(), s3(null), d2 && d2(e7, r5);
  }, [b5, s3, d2]), x3 = (0, import_react8.useCallback)(function(e7, r5) {
    c4 && c4(e7, r5);
  }, [c4]);
  return (0, import_jsx_runtime4.jsx)(P3, { nodes: r4, width: i4, height: o3, onMouseEnter: g4, onMouseMove: m2, onMouseLeave: v4, onClick: x3, debug: p4 });
};
ke.propTypes = { points: import_prop_types4.default.arrayOf(import_prop_types4.default.object).isRequired, width: import_prop_types4.default.number.isRequired, height: import_prop_types4.default.number.isRequired, margin: import_prop_types4.default.object.isRequired, setCurrent: import_prop_types4.default.func.isRequired, onMouseEnter: import_prop_types4.default.func, onMouseMove: import_prop_types4.default.func, onMouseLeave: import_prop_types4.default.func, onClick: import_prop_types4.default.func, tooltip: import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object]).isRequired, debug: import_prop_types4.default.bool.isRequired };
var We2 = (0, import_react8.memo)(ke);
var Ge2 = function(e6) {
  var r4 = e6.data, n5 = e6.xScale, t8 = e6.xFormat, a4 = e6.yScale, s3 = e6.yFormat, l2 = e6.layers, d2 = e6.curve, c4 = e6.areaBaselineValue, f3 = e6.colors, p4 = e6.margin, h3 = e6.width, y2 = e6.height, b5 = e6.axisTop, g4 = e6.axisRight, m2 = e6.axisBottom, v4 = e6.axisLeft, x3 = e6.enableGridX, C4 = e6.enableGridY, T3 = e6.gridXValues, M = e6.gridYValues, w4 = e6.lineWidth, B4 = e6.enableArea, W3 = e6.areaOpacity, P4 = e6.areaBlendMode, j = e6.enablePoints, F = e6.pointSymbol, E2 = e6.pointSize, Y4 = e6.pointColor, D2 = e6.pointBorderWidth, X4 = e6.pointBorderColor, z2 = e6.enablePointLabel, H2 = e6.pointLabel, I = e6.pointLabelYOffset, J2 = e6.defs, K4 = e6.fill, Q3 = e6.markers, U = e6.legends, Z = e6.isInteractive, $2 = e6.useMesh, _2 = e6.debugMesh, ee = e6.onMouseEnter, re = e6.onMouseMove, ne2 = e6.onMouseLeave, te2 = e6.onClick, oe2 = e6.tooltip, ae2 = e6.enableSlices, se2 = e6.debugSlices, le2 = e6.sliceTooltip, ue2 = e6.enableCrosshair, de2 = e6.crosshairType, ce2 = e6.role, fe2 = At(h3, y2, p4), pe2 = fe2.margin, he2 = fe2.innerWidth, ye2 = fe2.innerHeight, ge2 = fe2.outerWidth, me2 = fe2.outerHeight, xe2 = be({ data: r4, xScale: n5, xFormat: t8, yScale: a4, yFormat: s3, width: he2, height: ye2, colors: f3, curve: d2, areaBaselineValue: c4, pointColor: Y4, pointBorderColor: X4, enableSlices: ae2 }), Re3 = xe2.legendData, qe3 = xe2.toggleSerie, Se3 = xe2.lineGenerator, Ce3 = xe2.areaGenerator, Te3 = xe2.series, we3 = xe2.xScale, ke2 = xe2.yScale, Ge3 = xe2.slices, Le3 = xe2.points, Pe3 = Vt(), je2 = We(Y4, Pe3), Fe3 = We(X4, Pe3), Ve3 = (0, import_react8.useState)(null), Ee2 = Ve3[0], Ye2 = Ve3[1], De2 = (0, import_react8.useState)(null), Xe2 = De2[0], ze2 = De2[1], Ae = { grid: (0, import_jsx_runtime4.jsx)(B2, { theme: Pe3, width: he2, height: ye2, xScale: x3 ? we3 : null, yScale: C4 ? ke2 : null, xValues: T3, yValues: M }, "grid"), markers: (0, import_jsx_runtime4.jsx)(Bi, { markers: Q3, width: he2, height: ye2, xScale: we3, yScale: ke2, theme: Pe3 }, "markers"), axes: (0, import_jsx_runtime4.jsx)(X2, { xScale: we3, yScale: ke2, width: he2, height: ye2, theme: Pe3, top: b5, right: g4, bottom: m2, left: v4 }, "axes"), areas: null, lines: (0, import_jsx_runtime4.jsx)(Oe2, { lines: Te3, lineGenerator: Se3, lineWidth: w4 }, "lines"), slices: null, points: null, crosshair: null, mesh: null, legends: U.map(function(e7, r5) {
    return (0, import_jsx_runtime4.jsx)(X3, ie({}, e7, { containerWidth: he2, containerHeight: ye2, data: e7.data || Re3, theme: Pe3, toggleSerie: e7.toggleSerie ? qe3 : void 0 }), "legend." + r5);
  }) }, He2 = rn(J2, Te3, K4);
  return B4 && (Ae.areas = (0, import_jsx_runtime4.jsx)(ve, { areaGenerator: Ce3, areaOpacity: W3, areaBlendMode: P4, lines: Te3 }, "areas")), Z && false !== ae2 && (Ae.slices = (0, import_jsx_runtime4.jsx)(Me2, { slices: Ge3, axis: ae2, debug: se2, height: ye2, tooltip: le2, current: Xe2, setCurrent: ze2 }, "slices")), j && (Ae.points = (0, import_jsx_runtime4.jsx)(Be2, { points: Le3, symbol: F, size: E2, color: je2, borderWidth: D2, borderColor: Fe3, enableLabel: z2, label: H2, labelYOffset: I }, "points")), Z && ue2 && (null !== Ee2 && (Ae.crosshair = (0, import_jsx_runtime4.jsx)(P, { width: he2, height: ye2, x: Ee2.x, y: Ee2.y, type: de2 }, "crosshair")), null !== Xe2 && (Ae.crosshair = (0, import_jsx_runtime4.jsx)(P, { width: he2, height: ye2, x: Xe2.x, y: Xe2.y, type: ae2 }, "crosshair"))), Z && $2 && false === ae2 && (Ae.mesh = (0, import_jsx_runtime4.jsx)(We2, { points: Le3, width: he2, height: ye2, margin: pe2, current: Ee2, setCurrent: Ye2, onMouseEnter: ee, onMouseMove: re, onMouseLeave: ne2, onClick: te2, tooltip: oe2, debug: _2 }, "mesh")), (0, import_jsx_runtime4.jsx)(Si, { defs: He2, width: ge2, height: me2, margin: pe2, role: ce2, children: l2.map(function(r5, i4) {
    return "function" == typeof r5 ? (0, import_jsx_runtime4.jsx)(import_react8.Fragment, { children: r5(ie({}, e6, { innerWidth: he2, innerHeight: ye2, series: Te3, slices: Ge3, points: Le3, xScale: we3, yScale: ke2, lineGenerator: Se3, areaGenerator: Ce3, currentPoint: Ee2, setCurrentPoint: Ye2, currentSlice: Xe2, setCurrentSlice: ze2 })) }, i4) : Ae[r5];
  }) });
};
Ge2.propTypes = le, Ge2.defaultProps = ce;
var Le2 = Fi(Ge2);
var Pe2 = function(e6) {
  return (0, import_jsx_runtime4.jsx)(ti, { children: function(r4) {
    var i4 = r4.width, n5 = r4.height;
    return (0, import_jsx_runtime4.jsx)(Le2, ie({ width: i4, height: n5 }, e6));
  } });
};
var je = function(e6) {
  var r4 = e6.width, o3 = e6.height, a4 = e6.margin, d2 = e6.pixelRatio, c4 = e6.data, f3 = e6.xScale, p4 = e6.xFormat, h3 = e6.yScale, y2 = e6.yFormat, b5 = e6.curve, g4 = e6.layers, m2 = e6.colors, v4 = e6.lineWidth, x3 = e6.enableArea, q = e6.areaBaselineValue, O4 = e6.areaOpacity, S4 = e6.enablePoints, C4 = e6.pointSize, w4 = e6.pointColor, B4 = e6.pointBorderWidth, k5 = e6.pointBorderColor, W3 = e6.enableGridX, G = e6.gridXValues, L2 = e6.enableGridY, F = e6.gridYValues, V2 = e6.axisTop, Y4 = e6.axisRight, D2 = e6.axisBottom, X4 = e6.axisLeft, A3 = e6.legends, H2 = e6.isInteractive, I = e6.debugMesh, J2 = e6.onMouseLeave, K4 = e6.onClick, Q3 = e6.tooltip, U = e6.canvasRef, Z = (0, import_react8.useRef)(null), $2 = At(r4, o3, a4), ne2 = $2.margin, te2 = $2.innerWidth, oe2 = $2.innerHeight, ae2 = $2.outerWidth, se2 = $2.outerHeight, le2 = Vt(), ue2 = (0, import_react8.useState)(null), de2 = ue2[0], ce2 = ue2[1], fe2 = be({ data: c4, xScale: f3, xFormat: p4, yScale: h3, yFormat: y2, width: te2, height: oe2, colors: m2, curve: b5, areaBaselineValue: q, pointColor: w4, pointBorderColor: k5 }), pe2 = fe2.lineGenerator, he2 = fe2.areaGenerator, ye2 = fe2.series, ge2 = fe2.xScale, me2 = fe2.yScale, ve2 = fe2.points, xe2 = x2({ points: ve2, width: te2, height: oe2, debug: I }), Re3 = xe2.delaunay, qe3 = xe2.voronoi;
  (0, import_react8.useEffect)(function() {
    U && (U.current = Z.current), Z.current.width = ae2 * d2, Z.current.height = se2 * d2;
    var e7 = Z.current.getContext("2d");
    e7.scale(d2, d2), e7.fillStyle = le2.background, e7.fillRect(0, 0, ae2, se2), e7.translate(ne2.left, ne2.top), g4.forEach(function(r5) {
      if ("function" == typeof r5 && r5({ ctx: e7, innerWidth: te2, innerHeight: oe2, series: ye2, points: ve2, xScale: ge2, yScale: me2, lineWidth: v4, lineGenerator: pe2, areaGenerator: he2, currentPoint: de2, setCurrentPoint: ce2 }), "grid" === r5 && le2.grid.line.strokeWidth > 0 && (e7.lineWidth = le2.grid.line.strokeWidth, e7.strokeStyle = le2.grid.line.stroke, W3 && C3(e7, { width: te2, height: oe2, scale: ge2, axis: "x", values: G }), L2 && C3(e7, { width: te2, height: oe2, scale: me2, axis: "y", values: F })), "axes" === r5 && V(e7, { xScale: ge2, yScale: me2, width: te2, height: oe2, top: V2, right: Y4, bottom: D2, left: X4, theme: le2 }), "areas" === r5 && true === x3 && (e7.save(), e7.globalAlpha = O4, he2.context(e7), ye2.forEach(function(r6) {
        e7.fillStyle = r6.color, e7.beginPath(), he2(r6.data.map(function(e8) {
          return e8.position;
        })), e7.fill();
      }), e7.restore()), "lines" === r5 && (pe2.context(e7), ye2.forEach(function(r6) {
        e7.strokeStyle = r6.color, e7.lineWidth = v4, e7.beginPath(), pe2(r6.data.map(function(e8) {
          return e8.position;
        })), e7.stroke();
      })), "points" === r5 && true === S4 && C4 > 0 && ve2.forEach(function(r6) {
        e7.fillStyle = r6.color, e7.beginPath(), e7.arc(r6.x, r6.y, C4 / 2, 0, 2 * Math.PI), e7.fill(), B4 > 0 && (e7.strokeStyle = r6.borderColor, e7.lineWidth = B4, e7.stroke());
      }), "mesh" === r5 && true === I && (O3(e7, qe3), de2 && S3(e7, qe3, de2.index)), "legends" === r5) {
        var i4 = ye2.map(function(e8) {
          return { id: e8.id, label: e8.id, color: e8.color };
        }).reverse();
        A3.forEach(function(r6) {
          H(e7, ie({}, r6, { data: r6.data || i4, containerWidth: te2, containerHeight: oe2, theme: le2 }));
        });
      }
    });
  }, [Z, ae2, se2, g4, le2, pe2, ye2, ge2, me2, W3, G, L2, F, V2, Y4, D2, X4, A3, ve2, S4, C4, de2]);
  var Oe3 = (0, import_react8.useCallback)(function(e7) {
    var r5 = Qi(Z.current, e7), i4 = r5[0], n5 = r5[1];
    if (!Ji(ne2.left, ne2.top, te2, oe2, i4, n5))
      return null;
    var t8 = Re3.find(i4 - ne2.left, n5 - ne2.top);
    return ve2[t8];
  }, [Z, ne2, te2, oe2, Re3]), Se3 = k(), Ce3 = Se3.showTooltipFromEvent, Te3 = Se3.hideTooltip, Me3 = (0, import_react8.useCallback)(function(e7) {
    var r5 = Oe3(e7);
    ce2(r5), r5 ? Ce3((0, import_react8.createElement)(Q3, { point: r5 }), e7) : Te3();
  }, [Oe3, ce2, Ce3, Te3, Q3]), we3 = (0, import_react8.useCallback)(function(e7) {
    Te3(), ce2(null), de2 && J2 && J2(de2, e7);
  }, [Te3, ce2, J2]), Be3 = (0, import_react8.useCallback)(function(e7) {
    if (K4) {
      var r5 = Oe3(e7);
      r5 && K4(r5, e7);
    }
  }, [Oe3, K4]);
  return (0, import_jsx_runtime4.jsx)("canvas", { ref: Z, width: ae2 * d2, height: se2 * d2, style: { width: ae2, height: se2, cursor: H2 ? "auto" : "normal" }, onMouseEnter: H2 ? Me3 : void 0, onMouseMove: H2 ? Me3 : void 0, onMouseLeave: H2 ? we3 : void 0, onClick: H2 ? Be3 : void 0 });
};
je.propTypes = ue, je.defaultProps = fe;
var Fe2 = Fi(je);
var Ve2 = (0, import_react8.forwardRef)(function(e6, r4) {
  return (0, import_jsx_runtime4.jsx)(Fe2, ie({}, e6, { canvasRef: r4 }));
});
var Ee = (0, import_react8.forwardRef)(function(e6, r4) {
  return (0, import_jsx_runtime4.jsx)(ti, { children: function(i4) {
    var n5 = i4.width, t8 = i4.height;
    return (0, import_jsx_runtime4.jsx)(Ve2, ie({ width: n5, height: t8 }, e6, { ref: r4 }));
  } });
});
export {
  Le2 as Line,
  Ve2 as LineCanvas,
  fe as LineCanvasDefaultProps,
  ue as LineCanvasPropTypes,
  ce as LineDefaultProps,
  le as LinePropTypes,
  Pe2 as ResponsiveLine,
  Ee as ResponsiveLineCanvas,
  he as useAreaGenerator,
  be as useLine,
  pe as useLineGenerator,
  ye as useSlices
};
//# sourceMappingURL=@nivo_line.js.map
